"use strict";
(function() {
var nape, zpp_nape, js, Std, Reflect, StringTools, sandbox;
var rgaInits = [];

var $_, $hxClasses = $hxClasses || {}, $estr = function() { return js.Boot.__string_rec(this,''); };
function $bind(o,m) { var f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; return f; };;
Reflect = $hxClasses['Reflect'] = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.prototype.__class__ = Reflect;
Std = $hxClasses['Std'] = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.prototype.__class__ = Std;
StringTools = $hxClasses['StringTools'] = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.prototype.__class__ = StringTools;
if(typeof js=='undefined') js = {};
js.Boot = $hxClasses['js.Boot'] = function() { };
js.Boot.__name__ = ["js","Boot"];
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.prototype.__class__ = js.Boot;
if(typeof nape=='undefined') nape = {};
nape.Config = $hxClasses['nape.Config'] = function() {
};
nape.Config.__name__ = ["nape","Config"];
nape.Config.prototype.__class__ = nape.Config;
if(!nape.callbacks) nape.callbacks = {};
nape.callbacks.Callback = $hxClasses['nape.callbacks.Callback'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.callbacks.ZPP_Callback.internal) throw "Error: Callback cannot be instantiated derp!";
};
nape.callbacks.Callback.__name__ = ["nape","callbacks","Callback"];
nape.callbacks.Callback.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.Callback.prototype, "event", {get: nape.callbacks.Callback.prototype.get_event});
});nape.callbacks.Callback.prototype.get_event = function() {
	return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.Callback.prototype, "listener", {get: nape.callbacks.Callback.prototype.get_listener});
});nape.callbacks.Callback.prototype.get_listener = function() {
	return this.zpp_inner.listener.outer;
};
nape.callbacks.Callback.prototype.toString = function() {
	return "";
};
nape.callbacks.Callback.prototype.__class__ = nape.callbacks.Callback;
nape.callbacks.BodyCallback = $hxClasses['nape.callbacks.BodyCallback'] = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape.callbacks.BodyCallback.__super__ = nape.callbacks.Callback;
for(var k in nape.callbacks.Callback.prototype ) nape.callbacks.BodyCallback.prototype[k] = nape.callbacks.Callback.prototype[k];
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.BodyCallback.prototype, "body", {get: nape.callbacks.BodyCallback.prototype.get_body});
});nape.callbacks.BodyCallback.prototype.get_body = function() {
	return this.zpp_inner.body.outer;
};
nape.callbacks.BodyCallback.prototype.toString = function() {
	var ret = "Cb:";
	ret += ["WAKE","SLEEP"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
	ret += ":" + this.zpp_inner.body.outer.toString();
	ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
nape.callbacks.BodyCallback.prototype.__class__ = nape.callbacks.BodyCallback;
nape.callbacks.Listener = $hxClasses['nape.callbacks.Listener'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.callbacks.ZPP_Listener.internal) throw "Error: Cannot instantiate Listener derp!";
};
nape.callbacks.Listener.__name__ = ["nape","callbacks","Listener"];
nape.callbacks.Listener.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.Listener.prototype, "type", {get: nape.callbacks.Listener.prototype.get_type});
});nape.callbacks.Listener.prototype.get_type = function() {
	return zpp_nape.callbacks.ZPP_Listener.types[this.zpp_inner.type];
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.Listener.prototype, "event", {get: nape.callbacks.Listener.prototype.get_event, set: nape.callbacks.Listener.prototype.set_event});
});nape.callbacks.Listener.prototype.get_event = function() {
	return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
};
nape.callbacks.Listener.prototype.set_event = function(event) {
	if(event == null) throw "Error: Cannot set listener event type to null";
	if(zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event] != event) {
		var xevent;
		if(event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
			return $r;
		}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
			return $r;
		}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else if(event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
			return $r;
		}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
			return $r;
		}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
			return $r;
		}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
			return $r;
		}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_PRE; else xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
		this.zpp_inner.swapEvent(xevent);
	}
	return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.Listener.prototype, "precedence", {get: nape.callbacks.Listener.prototype.get_precedence, set: nape.callbacks.Listener.prototype.set_precedence});
});nape.callbacks.Listener.prototype.get_precedence = function() {
	return this.zpp_inner.precedence;
};
nape.callbacks.Listener.prototype.set_precedence = function(precedence) {
	if(this.zpp_inner.precedence != precedence) {
		this.zpp_inner.precedence = precedence;
		this.zpp_inner.invalidate_precedence();
	}
	return this.zpp_inner.precedence;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.Listener.prototype, "space", {get: nape.callbacks.Listener.prototype.get_space, set: nape.callbacks.Listener.prototype.set_space});
});nape.callbacks.Listener.prototype.get_space = function() {
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
nape.callbacks.Listener.prototype.set_space = function(space) {
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
		if(space != null) space.zpp_inner.wrap_listeners.add(this); else this.zpp_inner.space = null;
	}
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
nape.callbacks.Listener.prototype.toString = function() {
	var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
		var body = this.zpp_inner.body;
		return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
	} else if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
		var con = this.zpp_inner.constraint;
		return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
	} else {
		var con1 = this.zpp_inner.interaction;
		var itype;
		var _g = con1.itype;
		switch(_g) {
		case zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION:
			itype = "COLLISION";
			break;
		case zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR:
			itype = "SENSOR";
			break;
		case zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID:
			itype = "FLUID";
			break;
		default:
			itype = "ALL";
		}
		return (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
	}
};
nape.callbacks.Listener.prototype.__class__ = nape.callbacks.Listener;
nape.callbacks.BodyListener = $hxClasses['nape.callbacks.BodyListener'] = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: BodyListener::handler cannot be null";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else throw "Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_BodyListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape.callbacks.BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape.callbacks.BodyListener.__super__ = nape.callbacks.Listener;
for(var k in nape.callbacks.Listener.prototype ) nape.callbacks.BodyListener.prototype[k] = nape.callbacks.Listener.prototype[k];
nape.callbacks.BodyListener.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.BodyListener.prototype, "options", {get: nape.callbacks.BodyListener.prototype.get_options, set: nape.callbacks.BodyListener.prototype.set_options});
});nape.callbacks.BodyListener.prototype.get_options = function() {
	return this.zpp_inner_zn.options.outer;
};
nape.callbacks.BodyListener.prototype.set_options = function(options) {
	this.zpp_inner_zn.options.set(options.zpp_inner);
	return this.zpp_inner_zn.options.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.BodyListener.prototype, "handler", {get: nape.callbacks.BodyListener.prototype.get_handler, set: nape.callbacks.BodyListener.prototype.set_handler});
});nape.callbacks.BodyListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handler;
};
nape.callbacks.BodyListener.prototype.set_handler = function(handler) {
	if(handler == null) throw "Error: BodyListener::handler cannot be null";
	this.zpp_inner_zn.handler = handler;
	return this.zpp_inner_zn.handler;
};
nape.callbacks.BodyListener.prototype.__class__ = nape.callbacks.BodyListener;
nape.callbacks.CbEvent = $hxClasses['nape.callbacks.CbEvent'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "CbEvent" + " derp!";
};
nape.callbacks.CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape.callbacks.CbEvent.BEGIN = null;
nape.callbacks.CbEvent.get_BEGIN = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
};
nape.callbacks.CbEvent.ONGOING = null;
nape.callbacks.CbEvent.get_ONGOING = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
};
nape.callbacks.CbEvent.END = null;
nape.callbacks.CbEvent.get_END = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_END;
};
nape.callbacks.CbEvent.WAKE = null;
nape.callbacks.CbEvent.get_WAKE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
};
nape.callbacks.CbEvent.SLEEP = null;
nape.callbacks.CbEvent.get_SLEEP = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
};
nape.callbacks.CbEvent.BREAK = null;
nape.callbacks.CbEvent.get_BREAK = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
};
nape.callbacks.CbEvent.PRE = null;
nape.callbacks.CbEvent.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_PRE;
};
nape.callbacks.CbEvent.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
		return $r;
	}(this))) return "PRE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))) return "BEGIN"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))) return "ONGOING"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))) return "END"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) return "WAKE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) return "SLEEP"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) return "BREAK"; else return "";
};
nape.callbacks.CbEvent.prototype.__class__ = nape.callbacks.CbEvent;
nape.callbacks.CbType = $hxClasses['nape.callbacks.CbType'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_CbType();
	this.zpp_inner.outer = this;
};
nape.callbacks.CbType.__name__ = ["nape","callbacks","CbType"];
nape.callbacks.CbType.ANY_BODY = null;
nape.callbacks.CbType.get_ANY_BODY = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_BODY;
};
nape.callbacks.CbType.ANY_CONSTRAINT = null;
nape.callbacks.CbType.get_ANY_CONSTRAINT = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT;
};
nape.callbacks.CbType.ANY_SHAPE = null;
nape.callbacks.CbType.get_ANY_SHAPE = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE;
};
nape.callbacks.CbType.ANY_COMPOUND = null;
nape.callbacks.CbType.get_ANY_COMPOUND = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND;
};
nape.callbacks.CbType.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.CbType.prototype, "id", {get: nape.callbacks.CbType.prototype.get_id});
});nape.callbacks.CbType.prototype.get_id = function() {
	return this.zpp_inner.id;
};
nape.callbacks.CbType.prototype.including = function(includes) {
	return new nape.callbacks.OptionType(this).including(includes);
};
nape.callbacks.CbType.prototype.excluding = function(excludes) {
	return new nape.callbacks.OptionType(this).excluding(excludes);
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.CbType.prototype, "userData", {get: nape.callbacks.CbType.prototype.get_userData});
});nape.callbacks.CbType.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.CbType.prototype, "interactors", {get: nape.callbacks.CbType.prototype.get_interactors});
});nape.callbacks.CbType.prototype.get_interactors = function() {
	if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
	return this.zpp_inner.wrap_interactors;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.CbType.prototype, "constraints", {get: nape.callbacks.CbType.prototype.get_constraints});
});nape.callbacks.CbType.prototype.get_constraints = function() {
	if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
	return this.zpp_inner.wrap_constraints;
};
nape.callbacks.CbType.prototype.toString = function() {
	if(this == zpp_nape.callbacks.ZPP_CbType.ANY_BODY) return "ANY_BODY"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE) return "ANY_SHAPE"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND) return "ANY_COMPOUND"; else if(this == zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT) return "ANY_CONSTRAINT"; else return "CbType#" + this.zpp_inner.id;
};
nape.callbacks.CbType.prototype.__class__ = nape.callbacks.CbType;
nape.callbacks.CbTypeIterator = $hxClasses['nape.callbacks.CbTypeIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_CbTypeList.internal) throw "Error: Cannot instantiate " + "CbType" + "Iterator derp!";
};
nape.callbacks.CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape.callbacks.CbTypeIterator.get = function(list) {
	var ret;
	if(nape.callbacks.CbTypeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_CbTypeList.internal = true;
		var ret1 = new nape.callbacks.CbTypeIterator();
		zpp_nape.util.ZPP_CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.callbacks.CbTypeIterator.zpp_pool;
		nape.callbacks.CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.callbacks.CbTypeIterator.prototype.zpp_inner = null;
nape.callbacks.CbTypeIterator.prototype.zpp_i = null;
nape.callbacks.CbTypeIterator.prototype.zpp_critical = null;
nape.callbacks.CbTypeIterator.prototype.zpp_next = null;
nape.callbacks.CbTypeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
		nape.callbacks.CbTypeIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.callbacks.CbTypeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.callbacks.CbTypeIterator.prototype.__class__ = nape.callbacks.CbTypeIterator;
nape.callbacks.CbTypeList = $hxClasses['nape.callbacks.CbTypeList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CbTypeList();
	this.zpp_inner.outer = this;
};
nape.callbacks.CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape.callbacks.CbTypeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.callbacks.CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.callbacks.CbTypeList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.CbTypeList.prototype, "length", {get: nape.callbacks.CbTypeList.prototype.get_length});
});nape.callbacks.CbTypeList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.callbacks.CbTypeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.callbacks.CbTypeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.callbacks.CbTypeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.callbacks.CbTypeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.callbacks.CbTypeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.callbacks.CbTypeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.callbacks.CbTypeList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.callbacks.CbTypeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.callbacks.CbTypeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.callbacks.CbTypeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.callbacks.CbTypeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.callbacks.CbTypeIterator.get(this);
};
nape.callbacks.CbTypeList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.callbacks.CbTypeList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.callbacks.CbTypeIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "CbType" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.callbacks.CbTypeList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.callbacks.CbTypeIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.callbacks.CbTypeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.callbacks.CbTypeIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.callbacks.CbTypeList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.callbacks.CbTypeIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
		nape.callbacks.CbTypeIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.callbacks.CbTypeList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.callbacks.CbTypeList.prototype.__class__ = nape.callbacks.CbTypeList;
nape.callbacks.ConstraintCallback = $hxClasses['nape.callbacks.ConstraintCallback'] = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape.callbacks.ConstraintCallback.__super__ = nape.callbacks.Callback;
for(var k in nape.callbacks.Callback.prototype ) nape.callbacks.ConstraintCallback.prototype[k] = nape.callbacks.Callback.prototype[k];
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.ConstraintCallback.prototype, "constraint", {get: nape.callbacks.ConstraintCallback.prototype.get_constraint});
});nape.callbacks.ConstraintCallback.prototype.get_constraint = function() {
	return this.zpp_inner.constraint.outer;
};
nape.callbacks.ConstraintCallback.prototype.toString = function() {
	var ret = "Cb:";
	ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
	ret += ":" + this.zpp_inner.constraint.outer.toString();
	ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
nape.callbacks.ConstraintCallback.prototype.__class__ = nape.callbacks.ConstraintCallback;
nape.callbacks.ConstraintListener = $hxClasses['nape.callbacks.ConstraintListener'] = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: ConstraintListener::handler cannot be null";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK; else throw "Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_ConstraintListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape.callbacks.ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape.callbacks.ConstraintListener.__super__ = nape.callbacks.Listener;
for(var k in nape.callbacks.Listener.prototype ) nape.callbacks.ConstraintListener.prototype[k] = nape.callbacks.Listener.prototype[k];
nape.callbacks.ConstraintListener.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.ConstraintListener.prototype, "options", {get: nape.callbacks.ConstraintListener.prototype.get_options, set: nape.callbacks.ConstraintListener.prototype.set_options});
});nape.callbacks.ConstraintListener.prototype.get_options = function() {
	return this.zpp_inner_zn.options.outer;
};
nape.callbacks.ConstraintListener.prototype.set_options = function(options) {
	this.zpp_inner_zn.options.set(options.zpp_inner);
	return this.zpp_inner_zn.options.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.ConstraintListener.prototype, "handler", {get: nape.callbacks.ConstraintListener.prototype.get_handler, set: nape.callbacks.ConstraintListener.prototype.set_handler});
});nape.callbacks.ConstraintListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handler;
};
nape.callbacks.ConstraintListener.prototype.set_handler = function(handler) {
	if(handler == null) throw "Error: ConstraintListener::handler cannot be null";
	this.zpp_inner_zn.handler = handler;
	return this.zpp_inner_zn.handler;
};
nape.callbacks.ConstraintListener.prototype.__class__ = nape.callbacks.ConstraintListener;
nape.callbacks.InteractionCallback = $hxClasses['nape.callbacks.InteractionCallback'] = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape.callbacks.InteractionCallback.__super__ = nape.callbacks.Callback;
for(var k in nape.callbacks.Callback.prototype ) nape.callbacks.InteractionCallback.prototype[k] = nape.callbacks.Callback.prototype[k];
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionCallback.prototype, "int1", {get: nape.callbacks.InteractionCallback.prototype.get_int1});
});nape.callbacks.InteractionCallback.prototype.get_int1 = function() {
	return this.zpp_inner.int1.outer_i;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionCallback.prototype, "int2", {get: nape.callbacks.InteractionCallback.prototype.get_int2});
});nape.callbacks.InteractionCallback.prototype.get_int2 = function() {
	return this.zpp_inner.int2.outer_i;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionCallback.prototype, "arbiters", {get: nape.callbacks.InteractionCallback.prototype.get_arbiters});
});nape.callbacks.InteractionCallback.prototype.get_arbiters = function() {
	return this.zpp_inner.wrap_arbiters;
};
nape.callbacks.InteractionCallback.prototype.toString = function() {
	var ret = "Cb:";
	ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
	ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
	ret += " : " + this.zpp_inner.wrap_arbiters.toString();
	ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
nape.callbacks.InteractionCallback.prototype.__class__ = nape.callbacks.InteractionCallback;
nape.callbacks.InteractionListener = $hxClasses['nape.callbacks.InteractionListener'] = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: InteractionListener::handler cannot be null";
	if(event == null) throw "Error: CbEvent cannot be null for InteractionListener";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else throw "Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),xevent,zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
nape.callbacks.InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape.callbacks.InteractionListener.__super__ = nape.callbacks.Listener;
for(var k in nape.callbacks.Listener.prototype ) nape.callbacks.InteractionListener.prototype[k] = nape.callbacks.Listener.prototype[k];
nape.callbacks.InteractionListener.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionListener.prototype, "options1", {get: nape.callbacks.InteractionListener.prototype.get_options1, set: nape.callbacks.InteractionListener.prototype.set_options1});
});nape.callbacks.InteractionListener.prototype.get_options1 = function() {
	return this.zpp_inner_zn.options1.outer;
};
nape.callbacks.InteractionListener.prototype.set_options1 = function(options1) {
	this.zpp_inner_zn.options1.set(options1.zpp_inner);
	return this.zpp_inner_zn.options1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionListener.prototype, "options2", {get: nape.callbacks.InteractionListener.prototype.get_options2, set: nape.callbacks.InteractionListener.prototype.set_options2});
});nape.callbacks.InteractionListener.prototype.get_options2 = function() {
	return this.zpp_inner_zn.options2.outer;
};
nape.callbacks.InteractionListener.prototype.set_options2 = function(options2) {
	this.zpp_inner_zn.options2.set(options2.zpp_inner);
	return this.zpp_inner_zn.options2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionListener.prototype, "interactionType", {get: nape.callbacks.InteractionListener.prototype.get_interactionType, set: nape.callbacks.InteractionListener.prototype.set_interactionType});
});nape.callbacks.InteractionListener.prototype.get_interactionType = function() {
	var ret = this.zpp_inner_zn.itype;
	if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
	} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
	} else return null;
};
nape.callbacks.InteractionListener.prototype.set_interactionType = function(interactionType) {
	if(interactionType == null) throw "Error: Cannot set listener interaction type to null";
	if(this.get_interactionType() != interactionType) {
		var xtype;
		if(interactionType == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID; else xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
		this.zpp_inner_zn.itype = xtype;
	}
	return this.get_interactionType();
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionListener.prototype, "handler", {get: nape.callbacks.InteractionListener.prototype.get_handler, set: nape.callbacks.InteractionListener.prototype.set_handler});
});nape.callbacks.InteractionListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handleri;
};
nape.callbacks.InteractionListener.prototype.set_handler = function(handler) {
	if(handler == null) throw "Error: InteractionListener::handler cannot be null";
	this.zpp_inner_zn.handleri = handler;
	return this.zpp_inner_zn.handleri;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.InteractionListener.prototype, "allowSleepingCallbacks", {get: nape.callbacks.InteractionListener.prototype.get_allowSleepingCallbacks, set: nape.callbacks.InteractionListener.prototype.set_allowSleepingCallbacks});
});nape.callbacks.InteractionListener.prototype.get_allowSleepingCallbacks = function() {
	return this.zpp_inner_zn.allowSleepingCallbacks;
};
nape.callbacks.InteractionListener.prototype.set_allowSleepingCallbacks = function(allowSleepingCallbacks) {
	this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
	return this.zpp_inner_zn.allowSleepingCallbacks;
};
nape.callbacks.InteractionListener.prototype.__class__ = nape.callbacks.InteractionListener;
nape.callbacks.InteractionType = $hxClasses['nape.callbacks.InteractionType'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InteractionType" + " derp!";
};
nape.callbacks.InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape.callbacks.InteractionType.COLLISION = null;
nape.callbacks.InteractionType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
};
nape.callbacks.InteractionType.SENSOR = null;
nape.callbacks.InteractionType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
};
nape.callbacks.InteractionType.FLUID = null;
nape.callbacks.InteractionType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
};
nape.callbacks.InteractionType.ANY = null;
nape.callbacks.InteractionType.get_ANY = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
};
nape.callbacks.InteractionType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		return $r;
	}(this))) return "COLLISION"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		return $r;
	}(this))) return "SENSOR"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
		return $r;
	}(this))) return "FLUID"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
		return $r;
	}(this))) return "ANY"; else return "";
};
nape.callbacks.InteractionType.prototype.__class__ = nape.callbacks.InteractionType;
nape.callbacks.ListenerIterator = $hxClasses['nape.callbacks.ListenerIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ListenerList.internal) throw "Error: Cannot instantiate " + "Listener" + "Iterator derp!";
};
nape.callbacks.ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape.callbacks.ListenerIterator.get = function(list) {
	var ret;
	if(nape.callbacks.ListenerIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ListenerList.internal = true;
		var ret1 = new nape.callbacks.ListenerIterator();
		zpp_nape.util.ZPP_ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.callbacks.ListenerIterator.prototype.zpp_inner = null;
nape.callbacks.ListenerIterator.prototype.zpp_i = null;
nape.callbacks.ListenerIterator.prototype.zpp_critical = null;
nape.callbacks.ListenerIterator.prototype.zpp_next = null;
nape.callbacks.ListenerIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.callbacks.ListenerIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.callbacks.ListenerIterator.prototype.__class__ = nape.callbacks.ListenerIterator;
nape.callbacks.ListenerList = $hxClasses['nape.callbacks.ListenerList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ListenerList();
	this.zpp_inner.outer = this;
};
nape.callbacks.ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape.callbacks.ListenerList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.callbacks.ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.callbacks.ListenerList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.ListenerList.prototype, "length", {get: nape.callbacks.ListenerList.prototype.get_length});
});nape.callbacks.ListenerList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.callbacks.ListenerList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.callbacks.ListenerList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.callbacks.ListenerList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.callbacks.ListenerList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.callbacks.ListenerList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.callbacks.ListenerList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.callbacks.ListenerList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.callbacks.ListenerList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.callbacks.ListenerList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.callbacks.ListenerList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.callbacks.ListenerList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.callbacks.ListenerIterator.get(this);
};
nape.callbacks.ListenerList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.callbacks.ListenerList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.callbacks.ListenerIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Listener" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.callbacks.ListenerList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.callbacks.ListenerIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.callbacks.ListenerList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.callbacks.ListenerIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.callbacks.ListenerList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.callbacks.ListenerIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.callbacks.ListenerList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.callbacks.ListenerList.prototype.__class__ = nape.callbacks.ListenerList;
nape.callbacks.ListenerType = $hxClasses['nape.callbacks.ListenerType'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ListenerType" + " derp!";
};
nape.callbacks.ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape.callbacks.ListenerType.BODY = null;
nape.callbacks.ListenerType.get_BODY = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_BODY;
};
nape.callbacks.ListenerType.CONSTRAINT = null;
nape.callbacks.ListenerType.get_CONSTRAINT = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
};
nape.callbacks.ListenerType.INTERACTION = null;
nape.callbacks.ListenerType.get_INTERACTION = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
};
nape.callbacks.ListenerType.PRE = null;
nape.callbacks.ListenerType.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_PRE;
};
nape.callbacks.ListenerType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
		return $r;
	}(this))) return "BODY"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
		return $r;
	}(this))) return "CONSTRAINT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
		return $r;
	}(this))) return "INTERACTION"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
		return $r;
	}(this))) return "PRE"; else return "";
};
nape.callbacks.ListenerType.prototype.__class__ = nape.callbacks.ListenerType;
nape.callbacks.OptionType = $hxClasses['nape.callbacks.OptionType'] = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) this.including(includes);
	if(excludes != null) this.excluding(excludes);
};
nape.callbacks.OptionType.__name__ = ["nape","callbacks","OptionType"];
nape.callbacks.OptionType.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.OptionType.prototype, "includes", {get: nape.callbacks.OptionType.prototype.get_includes});
});nape.callbacks.OptionType.prototype.get_includes = function() {
	if(this.zpp_inner.wrap_includes == null) this.zpp_inner.setup_includes();
	return this.zpp_inner.wrap_includes;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.OptionType.prototype, "excludes", {get: nape.callbacks.OptionType.prototype.get_excludes});
});nape.callbacks.OptionType.prototype.get_excludes = function() {
	if(this.zpp_inner.wrap_excludes == null) this.zpp_inner.setup_excludes();
	return this.zpp_inner.wrap_excludes;
};
nape.callbacks.OptionType.prototype.including = function(includes) {
	this.zpp_inner.append(this.zpp_inner.includes,includes);
	return this;
};
nape.callbacks.OptionType.prototype.excluding = function(excludes) {
	this.zpp_inner.append(this.zpp_inner.excludes,excludes);
	return this;
};
nape.callbacks.OptionType.prototype.toString = function() {
	var inc = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_includes == null) $this.zpp_inner.setup_includes();
		$r = $this.zpp_inner.wrap_includes;
		return $r;
	}(this))).toString();
	var exc = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_excludes == null) $this.zpp_inner.setup_excludes();
		$r = $this.zpp_inner.wrap_excludes;
		return $r;
	}(this))).toString();
	return "@{" + inc + " excluding " + exc + "}";
};
nape.callbacks.OptionType.prototype.__class__ = nape.callbacks.OptionType;
nape.callbacks.PreCallback = $hxClasses['nape.callbacks.PreCallback'] = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape.callbacks.PreCallback.__super__ = nape.callbacks.Callback;
for(var k in nape.callbacks.Callback.prototype ) nape.callbacks.PreCallback.prototype[k] = nape.callbacks.Callback.prototype[k];
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreCallback.prototype, "arbiter", {get: nape.callbacks.PreCallback.prototype.get_arbiter});
});nape.callbacks.PreCallback.prototype.get_arbiter = function() {
	return this.zpp_inner.pre_arbiter.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreCallback.prototype, "int1", {get: nape.callbacks.PreCallback.prototype.get_int1});
});nape.callbacks.PreCallback.prototype.get_int1 = function() {
	return this.zpp_inner.int1.outer_i;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreCallback.prototype, "int2", {get: nape.callbacks.PreCallback.prototype.get_int2});
});nape.callbacks.PreCallback.prototype.get_int2 = function() {
	return this.zpp_inner.int2.outer_i;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreCallback.prototype, "swapped", {get: nape.callbacks.PreCallback.prototype.get_swapped});
});nape.callbacks.PreCallback.prototype.get_swapped = function() {
	return this.zpp_inner.pre_swapped;
};
nape.callbacks.PreCallback.prototype.toString = function() {
	var ret = "Cb:PRE:";
	ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
	ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
	ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
nape.callbacks.PreCallback.prototype.__class__ = nape.callbacks.PreCallback;
nape.callbacks.PreFlag = $hxClasses['nape.callbacks.PreFlag'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "PreFlag" + " derp!";
};
nape.callbacks.PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape.callbacks.PreFlag.ACCEPT = null;
nape.callbacks.PreFlag.get_ACCEPT = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
};
nape.callbacks.PreFlag.IGNORE = null;
nape.callbacks.PreFlag.get_IGNORE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
};
nape.callbacks.PreFlag.ACCEPT_ONCE = null;
nape.callbacks.PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
};
nape.callbacks.PreFlag.IGNORE_ONCE = null;
nape.callbacks.PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
};
nape.callbacks.PreFlag.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
		return $r;
	}(this))) return "ACCEPT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
		return $r;
	}(this))) return "IGNORE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
		return $r;
	}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
		return $r;
	}(this))) return "IGNORE_ONCE"; else return "";
};
nape.callbacks.PreFlag.prototype.__class__ = nape.callbacks.PreFlag;
nape.callbacks.PreListener = $hxClasses['nape.callbacks.PreListener'] = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) pure = false;
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: PreListener must take a handler!";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,zpp_nape.util.ZPP_Flags.id_ListenerType_PRE);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
nape.callbacks.PreListener.__name__ = ["nape","callbacks","PreListener"];
nape.callbacks.PreListener.__super__ = nape.callbacks.Listener;
for(var k in nape.callbacks.Listener.prototype ) nape.callbacks.PreListener.prototype[k] = nape.callbacks.Listener.prototype[k];
nape.callbacks.PreListener.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreListener.prototype, "options1", {get: nape.callbacks.PreListener.prototype.get_options1, set: nape.callbacks.PreListener.prototype.set_options1});
});nape.callbacks.PreListener.prototype.get_options1 = function() {
	return this.zpp_inner_zn.options1.outer;
};
nape.callbacks.PreListener.prototype.set_options1 = function(options1) {
	this.zpp_inner_zn.options1.set(options1.zpp_inner);
	return this.zpp_inner_zn.options1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreListener.prototype, "options2", {get: nape.callbacks.PreListener.prototype.get_options2, set: nape.callbacks.PreListener.prototype.set_options2});
});nape.callbacks.PreListener.prototype.get_options2 = function() {
	return this.zpp_inner_zn.options2.outer;
};
nape.callbacks.PreListener.prototype.set_options2 = function(options2) {
	this.zpp_inner_zn.options2.set(options2.zpp_inner);
	return this.zpp_inner_zn.options2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreListener.prototype, "handler", {get: nape.callbacks.PreListener.prototype.get_handler, set: nape.callbacks.PreListener.prototype.set_handler});
});nape.callbacks.PreListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handlerp;
};
nape.callbacks.PreListener.prototype.set_handler = function(handler) {
	if(handler == null) throw "Error: PreListener must take a non-null handler!";
	this.zpp_inner_zn.handlerp = handler;
	this.zpp_inner_zn.wake();
	return this.zpp_inner_zn.handlerp;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreListener.prototype, "pure", {get: nape.callbacks.PreListener.prototype.get_pure, set: nape.callbacks.PreListener.prototype.set_pure});
});nape.callbacks.PreListener.prototype.get_pure = function() {
	return this.zpp_inner_zn.pure;
};
nape.callbacks.PreListener.prototype.set_pure = function(pure) {
	if(!pure) this.zpp_inner_zn.wake();
	this.zpp_inner_zn.pure = pure;
	return this.zpp_inner_zn.pure;
};
rgaInits.push(function() {
Object.defineProperty(nape.callbacks.PreListener.prototype, "interactionType", {get: nape.callbacks.PreListener.prototype.get_interactionType, set: nape.callbacks.PreListener.prototype.set_interactionType});
});nape.callbacks.PreListener.prototype.get_interactionType = function() {
	var ret = this.zpp_inner_zn.itype;
	if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
	} else if(ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
		if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
	} else return null;
};
nape.callbacks.PreListener.prototype.set_interactionType = function(interactionType) {
	if(interactionType == null) throw "Error: Cannot set listener interaction type to null";
	if(this.get_interactionType() != interactionType) {
		var xtype;
		if(interactionType == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this))) xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID; else xtype = zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
		this.zpp_inner_zn.itype = xtype;
	}
	return this.get_interactionType();
};
nape.callbacks.PreListener.prototype.__class__ = nape.callbacks.PreListener;
if(!nape.constraint) nape.constraint = {};
nape.constraint.Constraint = $hxClasses['nape.constraint.Constraint'] = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT.zpp_inner);
	throw "Error: Constraint cannot be instantiated derp!";
};
nape.constraint.Constraint.__name__ = ["nape","constraint","Constraint"];
nape.constraint.Constraint.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "userData", {get: nape.constraint.Constraint.prototype.get_userData});
});nape.constraint.Constraint.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
nape.constraint.Constraint.prototype.debugDraw = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "compound", {get: nape.constraint.Constraint.prototype.get_compound, set: nape.constraint.Constraint.prototype.set_compound});
});nape.constraint.Constraint.prototype.get_compound = function() {
	if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
};
nape.constraint.Constraint.prototype.set_compound = function(compound) {
	if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
		if(compound != null) compound.zpp_inner.wrap_constraints.add(this);
	}
	if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "space", {get: nape.constraint.Constraint.prototype.get_space, set: nape.constraint.Constraint.prototype.set_space});
});nape.constraint.Constraint.prototype.get_space = function() {
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
nape.constraint.Constraint.prototype.set_space = function(space) {
	if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
		this.zpp_inner.clearcache();
		if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
		if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
	}
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "isSleeping", {get: nape.constraint.Constraint.prototype.get_isSleeping});
});nape.constraint.Constraint.prototype.get_isSleeping = function() {
	if(this.zpp_inner.space == null || !this.zpp_inner.active) throw "Error: isSleeping only makes sense if constraint is" + " active and inside a space";
	return this.zpp_inner.component.sleeping;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "active", {get: nape.constraint.Constraint.prototype.get_active, set: nape.constraint.Constraint.prototype.set_active});
});nape.constraint.Constraint.prototype.get_active = function() {
	return this.zpp_inner.active;
};
nape.constraint.Constraint.prototype.set_active = function(active) {
	if(this.zpp_inner.active != active) {
		if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
		this.zpp_inner.clearcache();
		if(active) {
			this.zpp_inner.active = active;
			this.zpp_inner.activate();
			if(this.zpp_inner.space != null) {
				if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
				this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
			}
		} else {
			if(this.zpp_inner.space != null) {
				this.zpp_inner.wake();
				this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
			}
			this.zpp_inner.active = active;
			this.zpp_inner.deactivate();
		}
	}
	return this.zpp_inner.active;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "ignore", {get: nape.constraint.Constraint.prototype.get_ignore, set: nape.constraint.Constraint.prototype.set_ignore});
});nape.constraint.Constraint.prototype.get_ignore = function() {
	return this.zpp_inner.ignore;
};
nape.constraint.Constraint.prototype.set_ignore = function(ignore) {
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.ignore = ignore;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.ignore;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "stiff", {get: nape.constraint.Constraint.prototype.get_stiff, set: nape.constraint.Constraint.prototype.set_stiff});
});nape.constraint.Constraint.prototype.get_stiff = function() {
	return this.zpp_inner.stiff;
};
nape.constraint.Constraint.prototype.set_stiff = function(stiff) {
	if(this.zpp_inner.stiff != stiff) {
		this.zpp_inner.stiff = stiff;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.stiff;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "frequency", {get: nape.constraint.Constraint.prototype.get_frequency, set: nape.constraint.Constraint.prototype.set_frequency});
});nape.constraint.Constraint.prototype.get_frequency = function() {
	return this.zpp_inner.frequency;
};
nape.constraint.Constraint.prototype.set_frequency = function(frequency) {
	if(frequency != frequency) throw "Error: Constraint::Frequency cannot be NaN";
	if(frequency <= 0) throw "Error: Constraint::Frequency must be >0";
	if(this.zpp_inner.frequency != frequency) {
		this.zpp_inner.frequency = frequency;
		if(!this.zpp_inner.stiff) this.zpp_inner.wake();
	}
	return this.zpp_inner.frequency;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "damping", {get: nape.constraint.Constraint.prototype.get_damping, set: nape.constraint.Constraint.prototype.set_damping});
});nape.constraint.Constraint.prototype.get_damping = function() {
	return this.zpp_inner.damping;
};
nape.constraint.Constraint.prototype.set_damping = function(damping) {
	if(damping != damping) throw "Error: Constraint::Damping cannot be Nan";
	if(damping < 0) throw "Error: Constraint::Damping must be >=0";
	if(this.zpp_inner.damping != damping) {
		this.zpp_inner.damping = damping;
		if(!this.zpp_inner.stiff) this.zpp_inner.wake();
	}
	return this.zpp_inner.damping;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "maxForce", {get: nape.constraint.Constraint.prototype.get_maxForce, set: nape.constraint.Constraint.prototype.set_maxForce});
});nape.constraint.Constraint.prototype.get_maxForce = function() {
	return this.zpp_inner.maxForce;
};
nape.constraint.Constraint.prototype.set_maxForce = function(maxForce) {
	if(maxForce != maxForce) throw "Error: Constraint::maxForce cannot be NaN";
	if(maxForce < 0) throw "Error: Constraint::maxForce must be >=0";
	if(this.zpp_inner.maxForce != maxForce) {
		this.zpp_inner.maxForce = maxForce;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.maxForce;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "maxError", {get: nape.constraint.Constraint.prototype.get_maxError, set: nape.constraint.Constraint.prototype.set_maxError});
});nape.constraint.Constraint.prototype.get_maxError = function() {
	return this.zpp_inner.maxError;
};
nape.constraint.Constraint.prototype.set_maxError = function(maxError) {
	if(maxError != maxError) throw "Error: Constraint::maxError cannot be NaN";
	if(maxError < 0) throw "Error: Constraint::maxError must be >=0";
	if(this.zpp_inner.maxError != maxError) {
		this.zpp_inner.maxError = maxError;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.maxError;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "breakUnderForce", {get: nape.constraint.Constraint.prototype.get_breakUnderForce, set: nape.constraint.Constraint.prototype.set_breakUnderForce});
});nape.constraint.Constraint.prototype.get_breakUnderForce = function() {
	return this.zpp_inner.breakUnderForce;
};
nape.constraint.Constraint.prototype.set_breakUnderForce = function(breakUnderForce) {
	if(this.zpp_inner.breakUnderForce != breakUnderForce) {
		this.zpp_inner.breakUnderForce = breakUnderForce;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.breakUnderForce;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "breakUnderError", {get: nape.constraint.Constraint.prototype.get_breakUnderError, set: nape.constraint.Constraint.prototype.set_breakUnderError});
});nape.constraint.Constraint.prototype.get_breakUnderError = function() {
	return this.zpp_inner.breakUnderError;
};
nape.constraint.Constraint.prototype.set_breakUnderError = function(breakUnderError) {
	if(this.zpp_inner.breakUnderError != breakUnderError) {
		this.zpp_inner.breakUnderError = breakUnderError;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.breakUnderError;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "removeOnBreak", {get: nape.constraint.Constraint.prototype.get_removeOnBreak, set: nape.constraint.Constraint.prototype.set_removeOnBreak});
});nape.constraint.Constraint.prototype.get_removeOnBreak = function() {
	return this.zpp_inner.removeOnBreak;
};
nape.constraint.Constraint.prototype.set_removeOnBreak = function(removeOnBreak) {
	this.zpp_inner.removeOnBreak = removeOnBreak;
	return this.zpp_inner.removeOnBreak;
};
nape.constraint.Constraint.prototype.impulse = function() {
	return null;
};
nape.constraint.Constraint.prototype.bodyImpulse = function(body) {
	return null;
};
nape.constraint.Constraint.prototype.visitBodies = function(lambda) {
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.Constraint.prototype, "cbTypes", {get: nape.constraint.Constraint.prototype.get_cbTypes});
});nape.constraint.Constraint.prototype.get_cbTypes = function() {
	if(this.zpp_inner.wrap_cbTypes == null) this.zpp_inner.setupcbTypes();
	return this.zpp_inner.wrap_cbTypes;
};
nape.constraint.Constraint.prototype.toString = function() {
	return "{Constraint}";
};
nape.constraint.Constraint.prototype.copy = function() {
	return this.zpp_inner.copy();
};
nape.constraint.Constraint.prototype.__class__ = nape.constraint.Constraint;
nape.constraint.AngleJoint = $hxClasses['nape.constraint.AngleJoint'] = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
nape.constraint.AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape.constraint.AngleJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.AngleJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.AngleJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.AngleJoint.prototype, "body1", {get: nape.constraint.AngleJoint.prototype.get_body1, set: nape.constraint.AngleJoint.prototype.set_body1});
});nape.constraint.AngleJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.AngleJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.AngleJoint.prototype, "body2", {get: nape.constraint.AngleJoint.prototype.get_body2, set: nape.constraint.AngleJoint.prototype.set_body2});
});nape.constraint.AngleJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.AngleJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.AngleJoint.prototype, "jointMin", {get: nape.constraint.AngleJoint.prototype.get_jointMin, set: nape.constraint.AngleJoint.prototype.set_jointMin});
});nape.constraint.AngleJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
nape.constraint.AngleJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.AngleJoint.prototype, "jointMax", {get: nape.constraint.AngleJoint.prototype.get_jointMax, set: nape.constraint.AngleJoint.prototype.set_jointMax});
});nape.constraint.AngleJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
nape.constraint.AngleJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.AngleJoint.prototype, "ratio", {get: nape.constraint.AngleJoint.prototype.get_ratio, set: nape.constraint.AngleJoint.prototype.set_ratio});
});nape.constraint.AngleJoint.prototype.get_ratio = function() {
	return this.zpp_inner_zn.ratio;
};
nape.constraint.AngleJoint.prototype.set_ratio = function(ratio) {
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
};
nape.constraint.AngleJoint.prototype.isSlack = function() {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw "Error: Cannot compute slack for AngleJoint if either body is null.";
	return this.zpp_inner_zn.is_slack();
};
nape.constraint.AngleJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
	return ret;
};
nape.constraint.AngleJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(0,0,0); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.AngleJoint.prototype.visitBodies = function(lambda) {
	if(lambda == null) throw "Error: Cannot apply null lambda to bodies";
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
};
nape.constraint.AngleJoint.prototype.__class__ = nape.constraint.AngleJoint;
nape.constraint.ConstraintIterator = $hxClasses['nape.constraint.ConstraintIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ConstraintList.internal) throw "Error: Cannot instantiate " + "Constraint" + "Iterator derp!";
};
nape.constraint.ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape.constraint.ConstraintIterator.get = function(list) {
	var ret;
	if(nape.constraint.ConstraintIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ConstraintList.internal = true;
		var ret1 = new nape.constraint.ConstraintIterator();
		zpp_nape.util.ZPP_ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.constraint.ConstraintIterator.prototype.zpp_inner = null;
nape.constraint.ConstraintIterator.prototype.zpp_i = null;
nape.constraint.ConstraintIterator.prototype.zpp_critical = null;
nape.constraint.ConstraintIterator.prototype.zpp_next = null;
nape.constraint.ConstraintIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.constraint.ConstraintIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.constraint.ConstraintIterator.prototype.__class__ = nape.constraint.ConstraintIterator;
nape.constraint.ConstraintList = $hxClasses['nape.constraint.ConstraintList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConstraintList();
	this.zpp_inner.outer = this;
};
nape.constraint.ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape.constraint.ConstraintList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.constraint.ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.constraint.ConstraintList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.ConstraintList.prototype, "length", {get: nape.constraint.ConstraintList.prototype.get_length});
});nape.constraint.ConstraintList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.constraint.ConstraintList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.constraint.ConstraintList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.constraint.ConstraintList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.constraint.ConstraintList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.constraint.ConstraintList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.constraint.ConstraintList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.constraint.ConstraintList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.constraint.ConstraintList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.constraint.ConstraintList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.constraint.ConstraintList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.constraint.ConstraintList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.constraint.ConstraintIterator.get(this);
};
nape.constraint.ConstraintList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.constraint.ConstraintList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.constraint.ConstraintIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Constraint" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.constraint.ConstraintList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.constraint.ConstraintIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.constraint.ConstraintList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.constraint.ConstraintIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.constraint.ConstraintList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.constraint.ConstraintIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.constraint.ConstraintList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.constraint.ConstraintList.prototype.__class__ = nape.constraint.ConstraintList;
nape.constraint.DistanceJoint = $hxClasses['nape.constraint.DistanceJoint'] = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) throw "Error: DistanceJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) throw "Error: DistanceJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape.constraint.DistanceJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.DistanceJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.DistanceJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.DistanceJoint.prototype, "body1", {get: nape.constraint.DistanceJoint.prototype.get_body1, set: nape.constraint.DistanceJoint.prototype.set_body1});
});nape.constraint.DistanceJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.DistanceJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.DistanceJoint.prototype, "body2", {get: nape.constraint.DistanceJoint.prototype.get_body2, set: nape.constraint.DistanceJoint.prototype.set_body2});
});nape.constraint.DistanceJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.DistanceJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.DistanceJoint.prototype, "anchor1", {get: nape.constraint.DistanceJoint.prototype.get_anchor1, set: nape.constraint.DistanceJoint.prototype.set_anchor1});
});nape.constraint.DistanceJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
nape.constraint.DistanceJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.DistanceJoint.prototype, "anchor2", {get: nape.constraint.DistanceJoint.prototype.get_anchor2, set: nape.constraint.DistanceJoint.prototype.set_anchor2});
});nape.constraint.DistanceJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
nape.constraint.DistanceJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.DistanceJoint.prototype, "jointMin", {get: nape.constraint.DistanceJoint.prototype.get_jointMin, set: nape.constraint.DistanceJoint.prototype.set_jointMin});
});nape.constraint.DistanceJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
nape.constraint.DistanceJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) throw "Error: DistanceJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.DistanceJoint.prototype, "jointMax", {get: nape.constraint.DistanceJoint.prototype.get_jointMax, set: nape.constraint.DistanceJoint.prototype.set_jointMax});
});nape.constraint.DistanceJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
nape.constraint.DistanceJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) throw "Error: DistanceJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
nape.constraint.DistanceJoint.prototype.isSlack = function() {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw "Error: Cannot compute slack for DistanceJoint if either body is null.";
	return this.zpp_inner_zn.slack;
};
nape.constraint.DistanceJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
	return ret;
};
nape.constraint.DistanceJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.DistanceJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
};
nape.constraint.DistanceJoint.prototype.__class__ = nape.constraint.DistanceJoint;
nape.constraint.LineJoint = $hxClasses['nape.constraint.LineJoint'] = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	this.zpp_inner_zn.wrap_n;
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape.constraint.LineJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.LineJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.LineJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "body1", {get: nape.constraint.LineJoint.prototype.get_body1, set: nape.constraint.LineJoint.prototype.set_body1});
});nape.constraint.LineJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.LineJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "body2", {get: nape.constraint.LineJoint.prototype.get_body2, set: nape.constraint.LineJoint.prototype.set_body2});
});nape.constraint.LineJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.LineJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "anchor1", {get: nape.constraint.LineJoint.prototype.get_anchor1, set: nape.constraint.LineJoint.prototype.set_anchor1});
});nape.constraint.LineJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
nape.constraint.LineJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "anchor2", {get: nape.constraint.LineJoint.prototype.get_anchor2, set: nape.constraint.LineJoint.prototype.set_anchor2});
});nape.constraint.LineJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
nape.constraint.LineJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "direction", {get: nape.constraint.LineJoint.prototype.get_direction, set: nape.constraint.LineJoint.prototype.set_direction});
});nape.constraint.LineJoint.prototype.get_direction = function() {
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	return this.zpp_inner_zn.wrap_n;
};
nape.constraint.LineJoint.prototype.set_direction = function(direction) {
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	return this.zpp_inner_zn.wrap_n;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "jointMin", {get: nape.constraint.LineJoint.prototype.get_jointMin, set: nape.constraint.LineJoint.prototype.set_jointMin});
});nape.constraint.LineJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
nape.constraint.LineJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.LineJoint.prototype, "jointMax", {get: nape.constraint.LineJoint.prototype.get_jointMax, set: nape.constraint.LineJoint.prototype.set_jointMax});
});nape.constraint.LineJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
nape.constraint.LineJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
nape.constraint.LineJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(2,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
	return ret;
};
nape.constraint.LineJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.LineJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
};
nape.constraint.LineJoint.prototype.__class__ = nape.constraint.LineJoint;
nape.constraint.MotorJoint = $hxClasses['nape.constraint.MotorJoint'] = function(body1,body2,rate,ratio) {
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
nape.constraint.MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape.constraint.MotorJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.MotorJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.MotorJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.MotorJoint.prototype, "body1", {get: nape.constraint.MotorJoint.prototype.get_body1, set: nape.constraint.MotorJoint.prototype.set_body1});
});nape.constraint.MotorJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.MotorJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.MotorJoint.prototype, "body2", {get: nape.constraint.MotorJoint.prototype.get_body2, set: nape.constraint.MotorJoint.prototype.set_body2});
});nape.constraint.MotorJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.MotorJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.MotorJoint.prototype, "ratio", {get: nape.constraint.MotorJoint.prototype.get_ratio, set: nape.constraint.MotorJoint.prototype.set_ratio});
});nape.constraint.MotorJoint.prototype.get_ratio = function() {
	return this.zpp_inner_zn.ratio;
};
nape.constraint.MotorJoint.prototype.set_ratio = function(ratio) {
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.MotorJoint.prototype, "rate", {get: nape.constraint.MotorJoint.prototype.get_rate, set: nape.constraint.MotorJoint.prototype.set_rate});
});nape.constraint.MotorJoint.prototype.get_rate = function() {
	return this.zpp_inner_zn.rate;
};
nape.constraint.MotorJoint.prototype.set_rate = function(rate) {
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.rate;
};
nape.constraint.MotorJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
	return ret;
};
nape.constraint.MotorJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.MotorJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
};
nape.constraint.MotorJoint.prototype.__class__ = nape.constraint.MotorJoint;
nape.constraint.PivotJoint = $hxClasses['nape.constraint.PivotJoint'] = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
};
nape.constraint.PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape.constraint.PivotJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.PivotJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.PivotJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PivotJoint.prototype, "body1", {get: nape.constraint.PivotJoint.prototype.get_body1, set: nape.constraint.PivotJoint.prototype.set_body1});
});nape.constraint.PivotJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.PivotJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PivotJoint.prototype, "body2", {get: nape.constraint.PivotJoint.prototype.get_body2, set: nape.constraint.PivotJoint.prototype.set_body2});
});nape.constraint.PivotJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.PivotJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PivotJoint.prototype, "anchor1", {get: nape.constraint.PivotJoint.prototype.get_anchor1, set: nape.constraint.PivotJoint.prototype.set_anchor1});
});nape.constraint.PivotJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
nape.constraint.PivotJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PivotJoint.prototype, "anchor2", {get: nape.constraint.PivotJoint.prototype.get_anchor2, set: nape.constraint.PivotJoint.prototype.set_anchor2});
});nape.constraint.PivotJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
nape.constraint.PivotJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
nape.constraint.PivotJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(2,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
	return ret;
};
nape.constraint.PivotJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.PivotJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
};
nape.constraint.PivotJoint.prototype.__class__ = nape.constraint.PivotJoint;
nape.constraint.PulleyJoint = $hxClasses['nape.constraint.PulleyJoint'] = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(anchor3 != null && anchor3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor3 == null) throw "Error: Constraint::" + "anchor3" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	this.zpp_inner_zn.wrap_a3;
	if(anchor4 != null && anchor4.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor4 == null) throw "Error: Constraint::" + "anchor4" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	this.zpp_inner_zn.wrap_a4;
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) throw "Error: PulleyJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) throw "Error: PulleyJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: PulleyJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) throw "Error: PulleyJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: PulleyJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
nape.constraint.PulleyJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.PulleyJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.PulleyJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "body1", {get: nape.constraint.PulleyJoint.prototype.get_body1, set: nape.constraint.PulleyJoint.prototype.set_body1});
});nape.constraint.PulleyJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.PulleyJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "body2", {get: nape.constraint.PulleyJoint.prototype.get_body2, set: nape.constraint.PulleyJoint.prototype.set_body2});
});nape.constraint.PulleyJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.PulleyJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "body3", {get: nape.constraint.PulleyJoint.prototype.get_body3, set: nape.constraint.PulleyJoint.prototype.set_body3});
});nape.constraint.PulleyJoint.prototype.get_body3 = function() {
	if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
};
nape.constraint.PulleyJoint.prototype.set_body3 = function(body3) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body3");
	var inbody3;
	if(body3 == null) inbody3 = null; else inbody3 = body3.zpp_inner;
	if(inbody3 != this.zpp_inner_zn.b3) {
		if(this.zpp_inner_zn.b3 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
				if(this.zpp_inner_zn.b3 != null) this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b3.wake();
		}
		this.zpp_inner_zn.b3 = inbody3;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
			if(inbody3 != null) inbody3.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody3 != null) inbody3.wake();
		}
	}
	if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "body4", {get: nape.constraint.PulleyJoint.prototype.get_body4, set: nape.constraint.PulleyJoint.prototype.set_body4});
});nape.constraint.PulleyJoint.prototype.get_body4 = function() {
	if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
};
nape.constraint.PulleyJoint.prototype.set_body4 = function(body4) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body4");
	var inbody4;
	if(body4 == null) inbody4 = null; else inbody4 = body4.zpp_inner;
	if(inbody4 != this.zpp_inner_zn.b4) {
		if(this.zpp_inner_zn.b4 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
				if(this.zpp_inner_zn.b4 != null) this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b4.wake();
		}
		this.zpp_inner_zn.b4 = inbody4;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
			if(inbody4 != null) inbody4.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody4 != null) inbody4.wake();
		}
	}
	if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "anchor1", {get: nape.constraint.PulleyJoint.prototype.get_anchor1, set: nape.constraint.PulleyJoint.prototype.set_anchor1});
});nape.constraint.PulleyJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
nape.constraint.PulleyJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "anchor2", {get: nape.constraint.PulleyJoint.prototype.get_anchor2, set: nape.constraint.PulleyJoint.prototype.set_anchor2});
});nape.constraint.PulleyJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
nape.constraint.PulleyJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "anchor3", {get: nape.constraint.PulleyJoint.prototype.get_anchor3, set: nape.constraint.PulleyJoint.prototype.set_anchor3});
});nape.constraint.PulleyJoint.prototype.get_anchor3 = function() {
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	return this.zpp_inner_zn.wrap_a3;
};
nape.constraint.PulleyJoint.prototype.set_anchor3 = function(anchor3) {
	if(anchor3 != null && anchor3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor3 == null) throw "Error: Constraint::" + "anchor3" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	return this.zpp_inner_zn.wrap_a3;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "anchor4", {get: nape.constraint.PulleyJoint.prototype.get_anchor4, set: nape.constraint.PulleyJoint.prototype.set_anchor4});
});nape.constraint.PulleyJoint.prototype.get_anchor4 = function() {
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	return this.zpp_inner_zn.wrap_a4;
};
nape.constraint.PulleyJoint.prototype.set_anchor4 = function(anchor4) {
	if(anchor4 != null && anchor4.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor4 == null) throw "Error: Constraint::" + "anchor4" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	return this.zpp_inner_zn.wrap_a4;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "jointMin", {get: nape.constraint.PulleyJoint.prototype.get_jointMin, set: nape.constraint.PulleyJoint.prototype.set_jointMin});
});nape.constraint.PulleyJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
nape.constraint.PulleyJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) throw "Error: PulleyJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: PulleyJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "jointMax", {get: nape.constraint.PulleyJoint.prototype.get_jointMax, set: nape.constraint.PulleyJoint.prototype.set_jointMax});
});nape.constraint.PulleyJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
nape.constraint.PulleyJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) throw "Error: PulleyJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: PulleyJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.PulleyJoint.prototype, "ratio", {get: nape.constraint.PulleyJoint.prototype.get_ratio, set: nape.constraint.PulleyJoint.prototype.set_ratio});
});nape.constraint.PulleyJoint.prototype.get_ratio = function() {
	return this.zpp_inner_zn.ratio;
};
nape.constraint.PulleyJoint.prototype.set_ratio = function(ratio) {
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) throw "Error: PulleyJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
};
nape.constraint.PulleyJoint.prototype.isSlack = function() {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null || (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) == null || (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) == null) throw "Error: Cannot compute slack for PulleyJoint if either body is null.";
	return this.zpp_inner_zn.slack;
};
nape.constraint.PulleyJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
	return ret;
};
nape.constraint.PulleyJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && body != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) && body != (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.PulleyJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
	if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
};
nape.constraint.PulleyJoint.prototype.__class__ = nape.constraint.PulleyJoint;
nape.constraint.UserConstraint = $hxClasses['nape.constraint.UserConstraint'] = function(dimensions,velocityOnly) {
	if(velocityOnly == null) velocityOnly = false;
	this.zpp_inner_zn = null;
	if(dimensions < 1) throw "Error: Constraint dimension must be at least 1";
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
};
nape.constraint.UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
nape.constraint.UserConstraint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.UserConstraint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.UserConstraint.prototype.zpp_inner_zn = null;
nape.constraint.UserConstraint.prototype.__bindVec2 = function() {
	var ret = new nape.geom.Vec2();
	ret.zpp_inner._inuse = true;
	ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
	return ret;
};
nape.constraint.UserConstraint.prototype.__copy = function() {
	throw "Error: UserConstraint::__copy must be overriden";
	return null;
};
nape.constraint.UserConstraint.prototype.__broken = function() {
};
nape.constraint.UserConstraint.prototype.__validate = function() {
};
nape.constraint.UserConstraint.prototype.__draw = function(debug) {
};
nape.constraint.UserConstraint.prototype.__prepare = function() {
};
nape.constraint.UserConstraint.prototype.__position = function(err) {
	throw "Error: UserConstraint::__position must be overriden";
};
nape.constraint.UserConstraint.prototype.__velocity = function(err) {
	throw "Error: Userconstraint::__velocity must be overriden";
};
nape.constraint.UserConstraint.prototype.__eff_mass = function(eff) {
	throw "Error: UserConstraint::__eff_mass must be overriden";
};
nape.constraint.UserConstraint.prototype.__clamp = function(jAcc) {
};
nape.constraint.UserConstraint.prototype.__impulse = function(imp,body,out) {
	throw "Error: UserConstraint::__impulse must be overriden";
};
nape.constraint.UserConstraint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(this.zpp_inner_zn.dim,1);
	var _g1 = 0;
	var _g = this.zpp_inner_zn.dim;
	while(_g1 < _g) {
		var i = _g1++;
		if(i < 0 || i >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
	}
	return ret;
};
nape.constraint.UserConstraint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	var found = false;
	var _g = 0;
	var _g1 = this.zpp_inner_zn.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body == body.zpp_inner) {
			found = true;
			break;
		}
	}
	if(!found) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.UserConstraint.prototype.visitBodies = function(lambda) {
	var i = 0;
	var nbodies = this.zpp_inner_zn.bodies.length;
	while(i < nbodies) {
		var b = this.zpp_inner_zn.bodies[i];
		if(b.body != null) {
			var found = false;
			var _g = i + 1;
			while(_g < nbodies) {
				var j = _g++;
				var c = this.zpp_inner_zn.bodies[j];
				if(c.body == b.body) {
					found = true;
					break;
				}
			}
			if(!found) lambda(b.body.outer);
		}
		i++;
	}
};
nape.constraint.UserConstraint.prototype.__invalidate = function() {
	this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
	if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.wake();
};
nape.constraint.UserConstraint.prototype.__registerBody = function(oldBody,newBody) {
	this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
	if(oldBody != newBody) {
		if(oldBody != null) {
			if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) throw "Error: oldBody is not registered to the cosntraint";
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) oldBody.zpp_inner.wake();
		}
		if(newBody != null) this.zpp_inner_zn.addBody(newBody.zpp_inner);
		this.zpp_inner.wake();
		if(newBody != null) newBody.zpp_inner.wake();
	}
	return newBody;
};
nape.constraint.UserConstraint.prototype.__class__ = nape.constraint.UserConstraint;
nape.constraint.WeldJoint = $hxClasses['nape.constraint.WeldJoint'] = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) phase = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
};
nape.constraint.WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape.constraint.WeldJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.WeldJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.WeldJoint.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.constraint.WeldJoint.prototype, "body1", {get: nape.constraint.WeldJoint.prototype.get_body1, set: nape.constraint.WeldJoint.prototype.set_body1});
});nape.constraint.WeldJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
nape.constraint.WeldJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1;
	if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) inbody1.wake();
		}
	}
	if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.WeldJoint.prototype, "body2", {get: nape.constraint.WeldJoint.prototype.get_body2, set: nape.constraint.WeldJoint.prototype.set_body2});
});nape.constraint.WeldJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
nape.constraint.WeldJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2;
	if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) inbody2.wake();
		}
	}
	if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.WeldJoint.prototype, "anchor1", {get: nape.constraint.WeldJoint.prototype.get_anchor1, set: nape.constraint.WeldJoint.prototype.set_anchor1});
});nape.constraint.WeldJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
nape.constraint.WeldJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	return this.zpp_inner_zn.wrap_a1;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.WeldJoint.prototype, "anchor2", {get: nape.constraint.WeldJoint.prototype.get_anchor2, set: nape.constraint.WeldJoint.prototype.set_anchor2});
});nape.constraint.WeldJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
nape.constraint.WeldJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	return this.zpp_inner_zn.wrap_a2;
};
rgaInits.push(function() {
Object.defineProperty(nape.constraint.WeldJoint.prototype, "phase", {get: nape.constraint.WeldJoint.prototype.get_phase, set: nape.constraint.WeldJoint.prototype.set_phase});
});nape.constraint.WeldJoint.prototype.get_phase = function() {
	return this.zpp_inner_zn.phase;
};
nape.constraint.WeldJoint.prototype.set_phase = function(phase) {
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.phase;
};
nape.constraint.WeldJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(3,1);
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
	ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz;
	return ret;
};
nape.constraint.WeldJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
};
nape.constraint.WeldJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
};
nape.constraint.WeldJoint.prototype.__class__ = nape.constraint.WeldJoint;
if(!nape.dynamics) nape.dynamics = {};
nape.dynamics.Arbiter = $hxClasses['nape.dynamics.Arbiter'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate Arbiter derp!";
};
nape.dynamics.Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape.dynamics.Arbiter.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "isSleeping", {get: nape.dynamics.Arbiter.prototype.get_isSleeping});
});nape.dynamics.Arbiter.prototype.get_isSleeping = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	return this.zpp_inner.sleeping;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "type", {get: nape.dynamics.Arbiter.prototype.get_type});
});nape.dynamics.Arbiter.prototype.get_type = function() {
	return zpp_nape.dynamics.ZPP_Arbiter.types[this.zpp_inner.type];
};
nape.dynamics.Arbiter.prototype.isCollisionArbiter = function() {
	return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL;
};
nape.dynamics.Arbiter.prototype.isFluidArbiter = function() {
	return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID;
};
nape.dynamics.Arbiter.prototype.isSensorArbiter = function() {
	return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "collisionArbiter", {get: nape.dynamics.Arbiter.prototype.get_collisionArbiter});
});nape.dynamics.Arbiter.prototype.get_collisionArbiter = function() {
	if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL) return this.zpp_inner.colarb.outer_zn; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "fluidArbiter", {get: nape.dynamics.Arbiter.prototype.get_fluidArbiter});
});nape.dynamics.Arbiter.prototype.get_fluidArbiter = function() {
	if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) return this.zpp_inner.fluidarb.outer_zn; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "shape1", {get: nape.dynamics.Arbiter.prototype.get_shape1});
});nape.dynamics.Arbiter.prototype.get_shape1 = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws2.outer; else return this.zpp_inner.ws1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "shape2", {get: nape.dynamics.Arbiter.prototype.get_shape2});
});nape.dynamics.Arbiter.prototype.get_shape2 = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws1.outer; else return this.zpp_inner.ws2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "body1", {get: nape.dynamics.Arbiter.prototype.get_body1});
});nape.dynamics.Arbiter.prototype.get_body1 = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b2.outer; else return this.zpp_inner.b1.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "body2", {get: nape.dynamics.Arbiter.prototype.get_body2});
});nape.dynamics.Arbiter.prototype.get_body2 = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b1.outer; else return this.zpp_inner.b2.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Arbiter.prototype, "state", {get: nape.dynamics.Arbiter.prototype.get_state});
});nape.dynamics.Arbiter.prototype.get_state = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var _g = this.zpp_inner.immState;
	var x = _g;
	if(x == (zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)) {
		if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
	} else {
		var x1 = _g;
		switch(_g) {
		case zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
		default:
			if(x1 == (zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)) {
				if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
			} else {
				if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
			}
		}
	}
};
nape.dynamics.Arbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	return nape.geom.Vec3.get(0,0,0);
};
nape.dynamics.Arbiter.prototype.toString = function() {
	var ret;
	if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL) ret = "CollisionArbiter"; else if(this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) ret = "FluidArbiter"; else ret = "SensorArbiter";
	if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + ((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
		return $r;
	}(this))).toString() + "|" + ((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
		return $r;
	}(this))).toString() + ")" + (this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-" + this.get_state().toString();
};
nape.dynamics.Arbiter.prototype.__class__ = nape.dynamics.Arbiter;
nape.dynamics.ArbiterIterator = $hxClasses['nape.dynamics.ArbiterIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ArbiterList.internal) throw "Error: Cannot instantiate " + "Arbiter" + "Iterator derp!";
};
nape.dynamics.ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape.dynamics.ArbiterIterator.get = function(list) {
	var ret;
	if(nape.dynamics.ArbiterIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ArbiterList.internal = true;
		var ret1 = new nape.dynamics.ArbiterIterator();
		zpp_nape.util.ZPP_ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.ArbiterIterator.prototype.zpp_inner = null;
nape.dynamics.ArbiterIterator.prototype.zpp_i = null;
nape.dynamics.ArbiterIterator.prototype.zpp_critical = null;
nape.dynamics.ArbiterIterator.prototype.zpp_next = null;
nape.dynamics.ArbiterIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.zpp_gl();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.dynamics.ArbiterIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.dynamics.ArbiterIterator.prototype.__class__ = nape.dynamics.ArbiterIterator;
nape.dynamics.ArbiterList = $hxClasses['nape.dynamics.ArbiterList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ArbiterList();
	this.zpp_inner.outer = this;
};
nape.dynamics.ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape.dynamics.ArbiterList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.ArbiterList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.ArbiterList.prototype, "length", {get: nape.dynamics.ArbiterList.prototype.get_length});
});nape.dynamics.ArbiterList.prototype.get_length = function() {
	return this.zpp_gl();
};
nape.dynamics.ArbiterList.prototype.zpp_gl = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) this.zpp_inner.user_length++;
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length;
};
nape.dynamics.ArbiterList.prototype.zpp_vm = function() {
	this.zpp_inner.valmod();
};
nape.dynamics.ArbiterList.prototype.has = function(obj) {
	this.zpp_vm();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.dynamics.ArbiterList.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = 0;
		this.zpp_inner.at_ite = this.zpp_inner.inner.head;
		while(true) {
			var x = this.zpp_inner.at_ite.elt;
			if(x.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		while(true) {
			var x1 = this.zpp_inner.at_ite.elt;
			if(x1.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.wrapper();
};
nape.dynamics.ArbiterList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.dynamics.ArbiterList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.dynamics.ArbiterList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.dynamics.ArbiterList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.dynamics.ArbiterList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.dynamics.ArbiterList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.dynamics.ArbiterList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
};
nape.dynamics.ArbiterList.prototype.empty = function() {
	return this.zpp_gl() == 0;
};
nape.dynamics.ArbiterList.prototype.iterator = function() {
	this.zpp_vm();
	return nape.dynamics.ArbiterIterator.get(this);
};
nape.dynamics.ArbiterList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.dynamics.ArbiterList();
	var _g = this.iterator();
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Arbiter" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.dynamics.ArbiterList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g = xs.iterator();
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) this.add(x);
	}
};
nape.dynamics.ArbiterList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g = this.iterator();
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.dynamics.ArbiterList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it = this.iterator();
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.dynamics.ArbiterList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.zpp_gl()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.dynamics.ArbiterList.prototype.__class__ = nape.dynamics.ArbiterList;
nape.dynamics.ArbiterType = $hxClasses['nape.dynamics.ArbiterType'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ArbiterType" + " derp!";
};
nape.dynamics.ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape.dynamics.ArbiterType.COLLISION = null;
nape.dynamics.ArbiterType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
};
nape.dynamics.ArbiterType.SENSOR = null;
nape.dynamics.ArbiterType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
};
nape.dynamics.ArbiterType.FLUID = null;
nape.dynamics.ArbiterType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
};
nape.dynamics.ArbiterType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
		return $r;
	}(this))) return "COLLISION"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
		return $r;
	}(this))) return "SENSOR"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
		return $r;
	}(this))) return "FLUID"; else return "";
};
nape.dynamics.ArbiterType.prototype.__class__ = nape.dynamics.ArbiterType;
nape.dynamics.CollisionArbiter = $hxClasses['nape.dynamics.CollisionArbiter'] = function() {
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate CollisionArbiter derp!";
	nape.dynamics.Arbiter.call(this);
};
nape.dynamics.CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape.dynamics.CollisionArbiter.__super__ = nape.dynamics.Arbiter;
for(var k in nape.dynamics.Arbiter.prototype ) nape.dynamics.CollisionArbiter.prototype[k] = nape.dynamics.Arbiter.prototype[k];
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "contacts", {get: nape.dynamics.CollisionArbiter.prototype.get_contacts});
});nape.dynamics.CollisionArbiter.prototype.get_contacts = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.colarb.wrap_contacts == null) this.zpp_inner.colarb.setupcontacts();
	return this.zpp_inner.colarb.wrap_contacts;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "normal", {get: nape.dynamics.CollisionArbiter.prototype.get_normal});
});nape.dynamics.CollisionArbiter.prototype.get_normal = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.colarb.wrap_normal == null) this.zpp_inner.colarb.getnormal();
	return this.zpp_inner.colarb.wrap_normal;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "radius", {get: nape.dynamics.CollisionArbiter.prototype.get_radius});
});nape.dynamics.CollisionArbiter.prototype.get_radius = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	return this.zpp_inner.colarb.radius;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "referenceEdge1", {get: nape.dynamics.CollisionArbiter.prototype.get_referenceEdge1});
});nape.dynamics.CollisionArbiter.prototype.get_referenceEdge1 = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var edge = this.zpp_inner.colarb.__ref_edge1;
	if(edge != null && (!((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
		return $r;
	}(this))).isPolygon() || ((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
		return $r;
	}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
	if(edge == null) return null; else return edge.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "referenceEdge2", {get: nape.dynamics.CollisionArbiter.prototype.get_referenceEdge2});
});nape.dynamics.CollisionArbiter.prototype.get_referenceEdge2 = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var edge = this.zpp_inner.colarb.__ref_edge1;
	if(edge != null && (!((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
		return $r;
	}(this))).isPolygon() || ((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
		return $r;
	}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
	if(edge == null) return null; else return edge.wrapper();
};
nape.dynamics.CollisionArbiter.prototype.firstVertex = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
	if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == -1; else return false;
};
nape.dynamics.CollisionArbiter.prototype.secondVertex = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
	if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == 1; else return false;
};
nape.dynamics.CollisionArbiter.prototype.normalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().normalImpulse(body);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp1 = colarb.oc2.wrapper().normalImpulse(body);
			var t2 = 1;
			var t3 = t2;
			retx += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * t3;
			rety += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * t3;
			retz += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.z;
				return $r;
			}(this)) * t2;
			imp1.dispose();
		}
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.dynamics.CollisionArbiter.prototype.tangentImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().tangentImpulse(body);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp1 = colarb.oc2.wrapper().tangentImpulse(body);
			var t2 = 1;
			var t3 = t2;
			retx += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * t3;
			rety += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * t3;
			retz += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.z;
				return $r;
			}(this)) * t2;
			imp1.dispose();
		}
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.dynamics.CollisionArbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().totalImpulse(body);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp1 = colarb.oc2.wrapper().totalImpulse(body);
			var t2 = 1;
			var t3 = t2;
			retx += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * t3;
			rety += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * t3;
			retz += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.z;
				return $r;
			}(this)) * t2;
			imp1.dispose();
		}
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.dynamics.CollisionArbiter.prototype.rollingImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "elasticity", {get: nape.dynamics.CollisionArbiter.prototype.get_elasticity, set: nape.dynamics.CollisionArbiter.prototype.set_elasticity});
});nape.dynamics.CollisionArbiter.prototype.get_elasticity = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			if(colarb.restitution < 0) colarb.restitution = 0;
			if(colarb.restitution > 1) colarb.restitution = 1;
		}
		if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
	}
	return colarb.restitution;
};
nape.dynamics.CollisionArbiter.prototype.set_elasticity = function(elasticity) {
	if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "elasticity" + " is only mutable during a pre-handler";
	if(elasticity != elasticity) throw "Error: CollisionArbiter::" + "elasticity" + " cannot be NaN";
	if(elasticity < 0) throw "Error: CollisionArbiter::" + "elasticity" + " cannot be negative";
	var colarb = this.zpp_inner.colarb;
	colarb.restitution = elasticity;
	colarb.userdef_restitution = true;
	return this.get_elasticity();
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "dynamicFriction", {get: nape.dynamics.CollisionArbiter.prototype.get_dynamicFriction, set: nape.dynamics.CollisionArbiter.prototype.set_dynamicFriction});
});nape.dynamics.CollisionArbiter.prototype.get_dynamicFriction = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			if(colarb.restitution < 0) colarb.restitution = 0;
			if(colarb.restitution > 1) colarb.restitution = 1;
		}
		if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
	}
	return colarb.dyn_fric;
};
nape.dynamics.CollisionArbiter.prototype.set_dynamicFriction = function(dynamicFriction) {
	if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "dynamicFriction" + " is only mutable during a pre-handler";
	if(dynamicFriction != dynamicFriction) throw "Error: CollisionArbiter::" + "dynamicFriction" + " cannot be NaN";
	if(dynamicFriction < 0) throw "Error: CollisionArbiter::" + "dynamicFriction" + " cannot be negative";
	var colarb = this.zpp_inner.colarb;
	colarb.dyn_fric = dynamicFriction;
	colarb.userdef_dyn_fric = true;
	return this.get_dynamicFriction();
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "staticFriction", {get: nape.dynamics.CollisionArbiter.prototype.get_staticFriction, set: nape.dynamics.CollisionArbiter.prototype.set_staticFriction});
});nape.dynamics.CollisionArbiter.prototype.get_staticFriction = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			if(colarb.restitution < 0) colarb.restitution = 0;
			if(colarb.restitution > 1) colarb.restitution = 1;
		}
		if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
	}
	return colarb.stat_fric;
};
nape.dynamics.CollisionArbiter.prototype.set_staticFriction = function(staticFriction) {
	if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "staticFriction" + " is only mutable during a pre-handler";
	if(staticFriction != staticFriction) throw "Error: CollisionArbiter::" + "staticFriction" + " cannot be NaN";
	if(staticFriction < 0) throw "Error: CollisionArbiter::" + "staticFriction" + " cannot be negative";
	var colarb = this.zpp_inner.colarb;
	colarb.stat_fric = staticFriction;
	colarb.userdef_stat_fric = true;
	return this.get_staticFriction();
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.CollisionArbiter.prototype, "rollingFriction", {get: nape.dynamics.CollisionArbiter.prototype.get_rollingFriction, set: nape.dynamics.CollisionArbiter.prototype.set_rollingFriction});
});nape.dynamics.CollisionArbiter.prototype.get_rollingFriction = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			if(colarb.restitution < 0) colarb.restitution = 0;
			if(colarb.restitution > 1) colarb.restitution = 1;
		}
		if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
	}
	return colarb.rfric;
};
nape.dynamics.CollisionArbiter.prototype.set_rollingFriction = function(rollingFriction) {
	if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "rollingFriction" + " is only mutable during a pre-handler";
	if(rollingFriction != rollingFriction) throw "Error: CollisionArbiter::" + "rollingFriction" + " cannot be NaN";
	if(rollingFriction < 0) throw "Error: CollisionArbiter::" + "rollingFriction" + " cannot be negative";
	var colarb = this.zpp_inner.colarb;
	colarb.rfric = rollingFriction;
	colarb.userdef_rfric = true;
	return this.get_rollingFriction();
};
nape.dynamics.CollisionArbiter.prototype.__class__ = nape.dynamics.CollisionArbiter;
nape.dynamics.Contact = $hxClasses['nape.dynamics.Contact'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Contact.internal) throw "Error: Cannot instantiate Contact derp!";
};
nape.dynamics.Contact.__name__ = ["nape","dynamics","Contact"];
nape.dynamics.Contact.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Contact.prototype, "arbiter", {get: nape.dynamics.Contact.prototype.get_arbiter});
});nape.dynamics.Contact.prototype.get_arbiter = function() {
	if(this.zpp_inner.arbiter == null) return null; else return this.zpp_inner.arbiter.outer.get_collisionArbiter();
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Contact.prototype, "penetration", {get: nape.dynamics.Contact.prototype.get_penetration});
});nape.dynamics.Contact.prototype.get_penetration = function() {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	return -this.zpp_inner.dist;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Contact.prototype, "position", {get: nape.dynamics.Contact.prototype.get_position});
});nape.dynamics.Contact.prototype.get_position = function() {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	if(this.zpp_inner.wrap_position == null) this.zpp_inner.getposition();
	return this.zpp_inner.wrap_position;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Contact.prototype, "fresh", {get: nape.dynamics.Contact.prototype.get_fresh});
});nape.dynamics.Contact.prototype.get_fresh = function() {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	return this.zpp_inner.fresh;
};
nape.dynamics.Contact.prototype.normalImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jnAcc = cin.jnAcc;
	if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc); else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
	}
};
nape.dynamics.Contact.prototype.tangentImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jtAcc = cin.jtAcc;
	if(body == null) return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc); else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
	}
};
nape.dynamics.Contact.prototype.rollingImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
	if(body == null) return jrAcc; else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
	}
};
nape.dynamics.Contact.prototype.totalImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jnAcc = cin.jnAcc;
	var jtAcc = cin.jtAcc;
	var jrAcc = colarb.jrAcc;
	if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
		var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
		if(body == colarb.b1.outer) return nape.geom.Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return nape.geom.Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
	}
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.Contact.prototype, "friction", {get: nape.dynamics.Contact.prototype.get_friction});
});nape.dynamics.Contact.prototype.get_friction = function() {
	if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
	return this.zpp_inner.inner.friction;
};
nape.dynamics.Contact.prototype.toString = function() {
	if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
};
nape.dynamics.Contact.prototype.__class__ = nape.dynamics.Contact;
nape.dynamics.ContactIterator = $hxClasses['nape.dynamics.ContactIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ContactList.internal) throw "Error: Cannot instantiate " + "Contact" + "Iterator derp!";
};
nape.dynamics.ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape.dynamics.ContactIterator.get = function(list) {
	var ret;
	if(nape.dynamics.ContactIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ContactList.internal = true;
		var ret1 = new nape.dynamics.ContactIterator();
		zpp_nape.util.ZPP_ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.ContactIterator.prototype.zpp_inner = null;
nape.dynamics.ContactIterator.prototype.zpp_i = null;
nape.dynamics.ContactIterator.prototype.zpp_critical = null;
nape.dynamics.ContactIterator.prototype.zpp_next = null;
nape.dynamics.ContactIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.dynamics.ContactIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.dynamics.ContactIterator.prototype.__class__ = nape.dynamics.ContactIterator;
nape.dynamics.ContactList = $hxClasses['nape.dynamics.ContactList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ContactList();
	this.zpp_inner.outer = this;
};
nape.dynamics.ContactList.__name__ = ["nape","dynamics","ContactList"];
nape.dynamics.ContactList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.ContactList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.ContactList.prototype, "length", {get: nape.dynamics.ContactList.prototype.get_length});
});nape.dynamics.ContactList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length;
};
nape.dynamics.ContactList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.dynamics.ContactList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = 0;
		this.zpp_inner.at_ite = this.zpp_inner.inner.next;
		while(true) {
			var x = this.zpp_inner.at_ite;
			if(x.active && x.arbiter.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		while(true) {
			var x1 = this.zpp_inner.at_ite;
			if(x1.active && x1.arbiter.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.wrapper();
};
nape.dynamics.ContactList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.dynamics.ContactList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.dynamics.ContactList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.get_length() == 0) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.dynamics.ContactList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.get_length() == 0) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.next;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.dynamics.ContactList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.dynamics.ContactList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.next;
	while(cx_ite != null) {
		var x = cx_ite;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.dynamics.ContactList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.get_length() == 0)) this.pop(); else while(!(this.get_length() == 0)) this.shift();
};
nape.dynamics.ContactList.prototype.empty = function() {
	return this.get_length() == 0;
};
nape.dynamics.ContactList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.dynamics.ContactIterator.get(this);
};
nape.dynamics.ContactList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.dynamics.ContactList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.dynamics.ContactIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Contact" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.dynamics.ContactList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.dynamics.ContactIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.dynamics.ContactList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.dynamics.ContactIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.dynamics.ContactList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.dynamics.ContactIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.dynamics.ContactList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.dynamics.ContactList.prototype.__class__ = nape.dynamics.ContactList;
nape.dynamics.FluidArbiter = $hxClasses['nape.dynamics.FluidArbiter'] = function() {
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate FluidArbiter derp!";
	nape.dynamics.Arbiter.call(this);
};
nape.dynamics.FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape.dynamics.FluidArbiter.__super__ = nape.dynamics.Arbiter;
for(var k in nape.dynamics.Arbiter.prototype ) nape.dynamics.FluidArbiter.prototype[k] = nape.dynamics.Arbiter.prototype[k];
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.FluidArbiter.prototype, "position", {get: nape.dynamics.FluidArbiter.prototype.get_position, set: nape.dynamics.FluidArbiter.prototype.set_position});
});nape.dynamics.FluidArbiter.prototype.get_position = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
	return this.zpp_inner.fluidarb.wrap_position;
};
nape.dynamics.FluidArbiter.prototype.set_position = function(position) {
	if(!this.zpp_inner.fluidarb.mutable) throw "Error: Arbiter is mutable only within a pre-handler";
	if(position == null) throw "Error: FluidArbiter::position cannot be null";
	((function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
		$r = $this.zpp_inner.fluidarb.wrap_position;
		return $r;
	}(this))).set(position);
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
	return this.zpp_inner.fluidarb.wrap_position;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.FluidArbiter.prototype, "overlap", {get: nape.dynamics.FluidArbiter.prototype.get_overlap, set: nape.dynamics.FluidArbiter.prototype.set_overlap});
});nape.dynamics.FluidArbiter.prototype.get_overlap = function() {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	return this.zpp_inner.fluidarb.overlap;
};
nape.dynamics.FluidArbiter.prototype.set_overlap = function(overlap) {
	if(!this.zpp_inner.fluidarb.mutable) throw "Error: Arbiter is mutable only within a pre-handler";
	if(overlap != overlap) throw "Error: FluidArbiter::overlap cannot be NaN";
	if(overlap <= 0 || overlap == Math.POSITIVE_INFINITY) throw "Error: FluidArbiter::overlap must be strictly positive and non infinite";
	this.zpp_inner.fluidarb.overlap = overlap;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	return this.zpp_inner.fluidarb.overlap;
};
nape.dynamics.FluidArbiter.prototype.buoyancyImpulse = function(body) {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var farb = this.zpp_inner.fluidarb;
	if(body == null) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,0); else if(body.zpp_inner == this.zpp_inner.b2) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y); else return nape.geom.Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
};
nape.dynamics.FluidArbiter.prototype.dragImpulse = function(body) {
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var farb = this.zpp_inner.fluidarb;
	var scale;
	if(body == null || body.zpp_inner == this.zpp_inner.b2) scale = 1; else scale = -1;
	return nape.geom.Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
};
nape.dynamics.FluidArbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var tmp = this.buoyancyImpulse(body);
	var ret = this.dragImpulse(body);
	var _g = ret;
	_g.set_x((function($this) {
		var $r;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		$r = _g.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		tmp.zpp_inner.validate();
		$r = tmp.zpp_inner.x;
		return $r;
	}(this)));
	var _g1 = ret;
	_g1.set_y((function($this) {
		var $r;
		if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g1.zpp_inner.validate();
		$r = _g1.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		tmp.zpp_inner.validate();
		$r = tmp.zpp_inner.y;
		return $r;
	}(this)));
	var _g2 = ret;
	_g2.set_z((function($this) {
		var $r;
		if(_g2 != null && _g2.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g2.zpp_inner.validate();
		$r = _g2.zpp_inner.z;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		tmp.zpp_inner.validate();
		$r = tmp.zpp_inner.z;
		return $r;
	}(this)));
	tmp.dispose();
	return ret;
};
nape.dynamics.FluidArbiter.prototype.__class__ = nape.dynamics.FluidArbiter;
nape.dynamics.InteractionFilter = $hxClasses['nape.dynamics.InteractionFilter'] = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = null;
	if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
		this.zpp_inner = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
};
nape.dynamics.InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape.dynamics.InteractionFilter.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "userData", {get: nape.dynamics.InteractionFilter.prototype.get_userData});
});nape.dynamics.InteractionFilter.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "shapes", {get: nape.dynamics.InteractionFilter.prototype.get_shapes});
});nape.dynamics.InteractionFilter.prototype.get_shapes = function() {
	if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
	return this.zpp_inner.wrap_shapes;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "collisionGroup", {get: nape.dynamics.InteractionFilter.prototype.get_collisionGroup, set: nape.dynamics.InteractionFilter.prototype.set_collisionGroup});
});nape.dynamics.InteractionFilter.prototype.get_collisionGroup = function() {
	return this.zpp_inner.collisionGroup;
};
nape.dynamics.InteractionFilter.prototype.set_collisionGroup = function(collisionGroup) {
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionGroup;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "collisionMask", {get: nape.dynamics.InteractionFilter.prototype.get_collisionMask, set: nape.dynamics.InteractionFilter.prototype.set_collisionMask});
});nape.dynamics.InteractionFilter.prototype.get_collisionMask = function() {
	return this.zpp_inner.collisionMask;
};
nape.dynamics.InteractionFilter.prototype.set_collisionMask = function(collisionMask) {
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionMask;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "sensorGroup", {get: nape.dynamics.InteractionFilter.prototype.get_sensorGroup, set: nape.dynamics.InteractionFilter.prototype.set_sensorGroup});
});nape.dynamics.InteractionFilter.prototype.get_sensorGroup = function() {
	return this.zpp_inner.sensorGroup;
};
nape.dynamics.InteractionFilter.prototype.set_sensorGroup = function(sensorGroup) {
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorGroup;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "sensorMask", {get: nape.dynamics.InteractionFilter.prototype.get_sensorMask, set: nape.dynamics.InteractionFilter.prototype.set_sensorMask});
});nape.dynamics.InteractionFilter.prototype.get_sensorMask = function() {
	return this.zpp_inner.sensorMask;
};
nape.dynamics.InteractionFilter.prototype.set_sensorMask = function(sensorMask) {
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorMask;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "fluidGroup", {get: nape.dynamics.InteractionFilter.prototype.get_fluidGroup, set: nape.dynamics.InteractionFilter.prototype.set_fluidGroup});
});nape.dynamics.InteractionFilter.prototype.get_fluidGroup = function() {
	return this.zpp_inner.fluidGroup;
};
nape.dynamics.InteractionFilter.prototype.set_fluidGroup = function(fluidGroup) {
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidGroup;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionFilter.prototype, "fluidMask", {get: nape.dynamics.InteractionFilter.prototype.get_fluidMask, set: nape.dynamics.InteractionFilter.prototype.set_fluidMask});
});nape.dynamics.InteractionFilter.prototype.get_fluidMask = function() {
	return this.zpp_inner.fluidMask;
};
nape.dynamics.InteractionFilter.prototype.set_fluidMask = function(fluidMask) {
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidMask;
};
nape.dynamics.InteractionFilter.prototype.shouldCollide = function(filter) {
	if(filter == null) throw "Error: filter argument cannot be null for shouldCollide";
	return this.zpp_inner.shouldCollide(filter.zpp_inner);
};
nape.dynamics.InteractionFilter.prototype.shouldSense = function(filter) {
	if(filter == null) throw "Error: filter argument cannot be null for shouldSense";
	return this.zpp_inner.shouldSense(filter.zpp_inner);
};
nape.dynamics.InteractionFilter.prototype.shouldFlow = function(filter) {
	if(filter == null) throw "Error: filter argument cannot be null for shouldFlow";
	return this.zpp_inner.shouldFlow(filter.zpp_inner);
};
nape.dynamics.InteractionFilter.prototype.copy = function() {
	return new nape.dynamics.InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
};
nape.dynamics.InteractionFilter.prototype.toString = function() {
	return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
};
nape.dynamics.InteractionFilter.prototype.__class__ = nape.dynamics.InteractionFilter;
nape.dynamics.InteractionGroup = $hxClasses['nape.dynamics.InteractionGroup'] = function(ignore) {
	if(ignore == null) ignore = false;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	this.zpp_inner.ignore;
};
nape.dynamics.InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape.dynamics.InteractionGroup.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionGroup.prototype, "group", {get: nape.dynamics.InteractionGroup.prototype.get_group, set: nape.dynamics.InteractionGroup.prototype.set_group});
});nape.dynamics.InteractionGroup.prototype.get_group = function() {
	if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
};
nape.dynamics.InteractionGroup.prototype.set_group = function(group) {
	if(group == this) throw "Error: Cannot assign InteractionGroup to itself";
	this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
	if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionGroup.prototype, "ignore", {get: nape.dynamics.InteractionGroup.prototype.get_ignore, set: nape.dynamics.InteractionGroup.prototype.set_ignore});
});nape.dynamics.InteractionGroup.prototype.get_ignore = function() {
	return this.zpp_inner.ignore;
};
nape.dynamics.InteractionGroup.prototype.set_ignore = function(ignore) {
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	return this.zpp_inner.ignore;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionGroup.prototype, "interactors", {get: nape.dynamics.InteractionGroup.prototype.get_interactors});
});nape.dynamics.InteractionGroup.prototype.get_interactors = function() {
	if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
	return this.zpp_inner.wrap_interactors;
};
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionGroup.prototype, "groups", {get: nape.dynamics.InteractionGroup.prototype.get_groups});
});nape.dynamics.InteractionGroup.prototype.get_groups = function() {
	if(this.zpp_inner.wrap_groups == null) this.zpp_inner.wrap_groups = zpp_nape.util.ZPP_InteractionGroupList.get(this.zpp_inner.groups,true);
	return this.zpp_inner.wrap_groups;
};
nape.dynamics.InteractionGroup.prototype.toString = function() {
	var ret = "InteractionGroup";
	if(this.zpp_inner.ignore) ret += ":ignore";
	return ret;
};
nape.dynamics.InteractionGroup.prototype.__class__ = nape.dynamics.InteractionGroup;
nape.dynamics.InteractionGroupIterator = $hxClasses['nape.dynamics.InteractionGroupIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_InteractionGroupList.internal) throw "Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!";
};
nape.dynamics.InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape.dynamics.InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape.dynamics.InteractionGroupIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_InteractionGroupList.internal = true;
		var ret1 = new nape.dynamics.InteractionGroupIterator();
		zpp_nape.util.ZPP_InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape.dynamics.InteractionGroupIterator.zpp_pool;
		nape.dynamics.InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.dynamics.InteractionGroupIterator.prototype.zpp_inner = null;
nape.dynamics.InteractionGroupIterator.prototype.zpp_i = null;
nape.dynamics.InteractionGroupIterator.prototype.zpp_critical = null;
nape.dynamics.InteractionGroupIterator.prototype.zpp_next = null;
nape.dynamics.InteractionGroupIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
		nape.dynamics.InteractionGroupIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.dynamics.InteractionGroupIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.dynamics.InteractionGroupIterator.prototype.__class__ = nape.dynamics.InteractionGroupIterator;
nape.dynamics.InteractionGroupList = $hxClasses['nape.dynamics.InteractionGroupList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractionGroupList();
	this.zpp_inner.outer = this;
};
nape.dynamics.InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape.dynamics.InteractionGroupList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.dynamics.InteractionGroupList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.dynamics.InteractionGroupList.prototype, "length", {get: nape.dynamics.InteractionGroupList.prototype.get_length});
});nape.dynamics.InteractionGroupList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.dynamics.InteractionGroupList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.dynamics.InteractionGroupList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.dynamics.InteractionGroupList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.dynamics.InteractionGroupList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.dynamics.InteractionGroupList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.dynamics.InteractionGroupList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.dynamics.InteractionGroupList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.dynamics.InteractionGroupList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.dynamics.InteractionGroupList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.dynamics.InteractionGroupList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.dynamics.InteractionGroupList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.dynamics.InteractionGroupIterator.get(this);
};
nape.dynamics.InteractionGroupList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.dynamics.InteractionGroupList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.dynamics.InteractionGroupIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "InteractionGroup" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.dynamics.InteractionGroupList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.dynamics.InteractionGroupIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.dynamics.InteractionGroupList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.dynamics.InteractionGroupIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.dynamics.InteractionGroupList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.dynamics.InteractionGroupIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
		nape.dynamics.InteractionGroupIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.dynamics.InteractionGroupList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.dynamics.InteractionGroupList.prototype.__class__ = nape.dynamics.InteractionGroupList;
if(!nape.geom) nape.geom = {};
nape.geom.AABB = $hxClasses['nape.geom.AABB'] = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_inner = null;
	if(x != x || y != y) throw "Error: AABB position cannot be NaN";
	if(width != width || height != height) throw "Error: AABB dimensions cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
nape.geom.AABB.__name__ = ["nape","geom","AABB"];
nape.geom.AABB.prototype.zpp_inner = null;
nape.geom.AABB.prototype.copy = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.copy().wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.AABB.prototype, "min", {get: nape.geom.AABB.prototype.get_min, set: nape.geom.AABB.prototype.set_min});
});nape.geom.AABB.prototype.get_min = function() {
	return this.zpp_inner.getmin();
};
nape.geom.AABB.prototype.set_min = function(min) {
	if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
	if(min == null) throw "Error: Cannot assign null to AABB::" + "min";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) || (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this))) throw "Error: AABB::" + "min" + " components cannot be NaN";
	if((function($this) {
		var $r;
		if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		min.zpp_inner.validate();
		$r = min.zpp_inner.x;
		return $r;
	}(this)) > this.zpp_inner.getmax().get_x()) throw "Error: Assignment would cause negative width";
	if((function($this) {
		var $r;
		if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		min.zpp_inner.validate();
		$r = min.zpp_inner.y;
		return $r;
	}(this)) > this.zpp_inner.getmax().get_y()) throw "Error: Assignment would cause negative height";
	this.zpp_inner.getmin().set(min);
	return this.zpp_inner.getmin();
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.AABB.prototype, "max", {get: nape.geom.AABB.prototype.get_max, set: nape.geom.AABB.prototype.set_max});
});nape.geom.AABB.prototype.get_max = function() {
	return this.zpp_inner.getmax();
};
nape.geom.AABB.prototype.set_max = function(max) {
	if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
	if(max == null) throw "Error: Cannot assign null to AABB::" + "max";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) || (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this))) throw "Error: AABB::" + "max" + " components cannot be NaN";
	if((function($this) {
		var $r;
		if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		max.zpp_inner.validate();
		$r = max.zpp_inner.x;
		return $r;
	}(this)) < this.zpp_inner.getmin().get_x()) throw "Error: Assignment would cause negative width";
	if((function($this) {
		var $r;
		if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		max.zpp_inner.validate();
		$r = max.zpp_inner.y;
		return $r;
	}(this)) < this.zpp_inner.getmin().get_y()) throw "Error: Assignment would cause negative height";
	this.zpp_inner.getmax().set(max);
	return this.zpp_inner.getmax();
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.AABB.prototype, "x", {get: nape.geom.AABB.prototype.get_x, set: nape.geom.AABB.prototype.set_x});
});nape.geom.AABB.prototype.get_x = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.minx;
};
nape.geom.AABB.prototype.set_x = function(x) {
	if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) != x) {
		if(x != x) throw "Error: AABB::" + "x" + " cannot be NaN";
		this.zpp_inner.maxx += x - this.zpp_inner.minx;
		this.zpp_inner.minx = x;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.validate();
	return this.zpp_inner.minx;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.AABB.prototype, "y", {get: nape.geom.AABB.prototype.get_y, set: nape.geom.AABB.prototype.set_y});
});nape.geom.AABB.prototype.get_y = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.miny;
};
nape.geom.AABB.prototype.set_y = function(y) {
	if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this)) != y) {
		if(y != y) throw "Error: AABB::" + "y" + " cannot be NaN";
		this.zpp_inner.maxy += y - this.zpp_inner.miny;
		this.zpp_inner.miny = y;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.validate();
	return this.zpp_inner.miny;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.AABB.prototype, "width", {get: nape.geom.AABB.prototype.get_width, set: nape.geom.AABB.prototype.set_width});
});nape.geom.AABB.prototype.get_width = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.width();
};
nape.geom.AABB.prototype.set_width = function(width) {
	if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.width();
		return $r;
	}(this)) != width) {
		if(width != width) throw "Error: AABB::" + "width" + " cannot be NaN";
		if(width < 0) throw "Error: AABB::" + "width" + " (" + width + ") must be >= 0";
		this.zpp_inner.maxx = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) + width;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.validate();
	return this.zpp_inner.width();
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.AABB.prototype, "height", {get: nape.geom.AABB.prototype.get_height, set: nape.geom.AABB.prototype.set_height});
});nape.geom.AABB.prototype.get_height = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.height();
};
nape.geom.AABB.prototype.set_height = function(height) {
	if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.height();
		return $r;
	}(this)) != height) {
		if(height != height) throw "Error: AABB::" + "height" + " cannot be NaN";
		if(height < 0) throw "Error: AABB::" + "height" + " (" + height + ") must be >= 0";
		this.zpp_inner.maxy = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) + height;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.validate();
	return this.zpp_inner.height();
};
nape.geom.AABB.prototype.toString = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.toString();
};
nape.geom.AABB.prototype.__class__ = nape.geom.AABB;
nape.geom.ConvexResult = $hxClasses['nape.geom.ConvexResult'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.geom.ZPP_ConvexRayResult.internal) throw "Error: ConvexResult cannot be instantiated derp!";
};
nape.geom.ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape.geom.ConvexResult.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.ConvexResult.prototype, "normal", {get: nape.geom.ConvexResult.prototype.get_normal});
});nape.geom.ConvexResult.prototype.get_normal = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.normal;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.ConvexResult.prototype, "position", {get: nape.geom.ConvexResult.prototype.get_position});
});nape.geom.ConvexResult.prototype.get_position = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.position;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.ConvexResult.prototype, "toi", {get: nape.geom.ConvexResult.prototype.get_toi});
});nape.geom.ConvexResult.prototype.get_toi = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.toiDistance;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.ConvexResult.prototype, "shape", {get: nape.geom.ConvexResult.prototype.get_shape});
});nape.geom.ConvexResult.prototype.get_shape = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.shape;
};
nape.geom.ConvexResult.prototype.dispose = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	this.zpp_inner.free();
};
nape.geom.ConvexResult.prototype.toString = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return "{ shape: " + Std.string((function($this) {
		var $r;
		if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		$r = $this.zpp_inner.shape;
		return $r;
	}(this))) + " toi: " + (function($this) {
		var $r;
		if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		$r = $this.zpp_inner.toiDistance;
		return $r;
	}(this)) + " }";
};
nape.geom.ConvexResult.prototype.__class__ = nape.geom.ConvexResult;
nape.geom.ConvexResultIterator = $hxClasses['nape.geom.ConvexResultIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ConvexResultList.internal) throw "Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!";
};
nape.geom.ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape.geom.ConvexResultIterator.get = function(list) {
	var ret;
	if(nape.geom.ConvexResultIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ConvexResultList.internal = true;
		var ret1 = new nape.geom.ConvexResultIterator();
		zpp_nape.util.ZPP_ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.ConvexResultIterator.zpp_pool;
		nape.geom.ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.ConvexResultIterator.prototype.zpp_inner = null;
nape.geom.ConvexResultIterator.prototype.zpp_i = null;
nape.geom.ConvexResultIterator.prototype.zpp_critical = null;
nape.geom.ConvexResultIterator.prototype.zpp_next = null;
nape.geom.ConvexResultIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
		nape.geom.ConvexResultIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.geom.ConvexResultIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.geom.ConvexResultIterator.prototype.__class__ = nape.geom.ConvexResultIterator;
nape.geom.ConvexResultList = $hxClasses['nape.geom.ConvexResultList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConvexResultList();
	this.zpp_inner.outer = this;
};
nape.geom.ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape.geom.ConvexResultList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.ConvexResultList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.ConvexResultList.prototype, "length", {get: nape.geom.ConvexResultList.prototype.get_length});
});nape.geom.ConvexResultList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.geom.ConvexResultList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj);
};
nape.geom.ConvexResultList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt;
};
nape.geom.ConvexResultList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.ConvexResultList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		} else this.zpp_inner.inner.add(obj);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.ConvexResultList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret;
	return retx2;
};
nape.geom.ConvexResultList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret;
	return retx2;
};
nape.geom.ConvexResultList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.geom.ConvexResultList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.geom.ConvexResultList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.geom.ConvexResultList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.geom.ConvexResultList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.geom.ConvexResultIterator.get(this);
};
nape.geom.ConvexResultList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.ConvexResultList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.geom.ConvexResultIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "ConvexResult" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.geom.ConvexResultList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.geom.ConvexResultIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.geom.ConvexResultList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.geom.ConvexResultIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.geom.ConvexResultList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.geom.ConvexResultIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
		nape.geom.ConvexResultIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.geom.ConvexResultList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.geom.ConvexResultList.prototype.__class__ = nape.geom.ConvexResultList;
nape.geom.Geom = $hxClasses['nape.geom.Geom'] = function() { };
nape.geom.Geom.__name__ = ["nape","geom","Geom"];
nape.geom.Geom.distanceBody = function(body1,body2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw "Error: Bodies cannot be empty in calculating distances";
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	return zpp_nape.geom.ZPP_SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
};
nape.geom.Geom.distance = function(shape1,shape2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate distances";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) tmp = new zpp_nape.geom.ZPP_Vec2(); else {
		tmp = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var ret = zpp_nape.geom.ZPP_SweepDistance.distance(shape1.zpp_inner,shape2.zpp_inner,out1.zpp_inner,out2.zpp_inner,tmp,1e100);
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
nape.geom.Geom.intersectsBody = function(body1,body2) {
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw "Error: Bodies must have shapes to test for intersection.";
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	if(!body1.zpp_inner.aabb.intersect(body2.zpp_inner.aabb)) return false; else {
		var cx_ite2 = body1.zpp_inner.shapes.head;
		while(cx_ite2 != null) {
			var s1 = cx_ite2.elt;
			var cx_ite3 = body2.zpp_inner.shapes.head;
			while(cx_ite3 != null) {
				var s2 = cx_ite3.elt;
				if(zpp_nape.geom.ZPP_Collide.testCollide_safe(s1,s2)) return true;
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
		return false;
	}
};
nape.geom.Geom.intersects = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate intersection";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
};
nape.geom.Geom.contains = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate containment";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return zpp_nape.geom.ZPP_Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
};
nape.geom.Geom.prototype.__class__ = nape.geom.Geom;
nape.geom.GeomPoly = $hxClasses['nape.geom.GeomPoly'] = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) throw "Error: Vec2List contains null objects";
				if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj1 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
nape.geom.GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape.geom.GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolGeomPoly == null) ret = new nape.geom.GeomPoly(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolGeomPoly;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextGeomPoly) zpp_nape.util.ZPP_PubPool.nextGeomPoly = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) throw "Error: Vec2List contains null objects";
				if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var obj1 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape.geom.GeomPoly.prototype.zpp_pool = null;
nape.geom.GeomPoly.prototype.zpp_disp = null;
nape.geom.GeomPoly.prototype.zpp_inner = null;
nape.geom.GeomPoly.prototype.empty = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	return this.zpp_inner.vertices == null;
};
nape.geom.GeomPoly.prototype.size = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	var ret = 0;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var i = nite;
			ret++;
			nite = nite.next;
		} while(nite != L);
	}
	return ret;
};
nape.geom.GeomPoly.prototype.iterator = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
};
nape.geom.GeomPoly.prototype.forwardIterator = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
};
nape.geom.GeomPoly.prototype.backwardsIterator = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,false);
};
nape.geom.GeomPoly.prototype.current = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null;
		return $r;
	}(this))) throw "Error: GeomPoly is empty";
	return this.zpp_inner.vertices.wrapper();
};
nape.geom.GeomPoly.prototype.push = function(vertex) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vertex == null) throw "Error: Cannot push null vertex";
	var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
		var $r;
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vertex.zpp_inner.validate();
		$r = vertex.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vertex.zpp_inner.validate();
		$r = vertex.zpp_inner.y;
		return $r;
	}(this)));
	if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
		obj.prev = this.zpp_inner.vertices;
		obj.next = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.next.prev = obj;
		this.zpp_inner.vertices.next = obj;
	}
	this.zpp_inner.vertices = obj;
	if(vertex.zpp_inner.weak) {
		vertex.dispose();
		true;
	} else false;
	return this;
};
nape.geom.GeomPoly.prototype.pop = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null) throw "Error: Cannot pop from empty polygon";
	var retv = this.zpp_inner.vertices;
	if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		this.zpp_inner.vertices = null;
	} else {
		var retnodes = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		this.zpp_inner.vertices = null;
		this.zpp_inner.vertices = retnodes;
	}
	var o = retv;
	if(o.wrap != null) {
		o.wrap.zpp_inner._inuse = false;
		o.wrap.dispose();
		o.wrap = null;
	}
	o.prev = o.next = null;
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	return this;
};
nape.geom.GeomPoly.prototype.unshift = function(vertex) {
	if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vertex == null) throw "Error: Cannot unshift null vertex";
	var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
		var $r;
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vertex.zpp_inner.validate();
		$r = vertex.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vertex.zpp_inner.validate();
		$r = vertex.zpp_inner.y;
		return $r;
	}(this)));
	if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
		obj.next = this.zpp_inner.vertices;
		obj.prev = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.prev.next = obj;
		this.zpp_inner.vertices.prev = obj;
	}
	this.zpp_inner.vertices = obj;
	if(vertex.zpp_inner.weak) {
		vertex.dispose();
		true;
	} else false;
	return this;
};
nape.geom.GeomPoly.prototype.shift = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null) throw "Error: Cannot shift from empty polygon";
	var retv = this.zpp_inner.vertices;
	if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		this.zpp_inner.vertices = this.zpp_inner.vertices = null;
	} else {
		var retnodes = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		this.zpp_inner.vertices = null;
		this.zpp_inner.vertices = retnodes;
	}
	var o = retv;
	if(o.wrap != null) {
		o.wrap.zpp_inner._inuse = false;
		o.wrap.dispose();
		o.wrap = null;
	}
	o.prev = o.next = null;
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	return this;
};
nape.geom.GeomPoly.prototype.skipForward = function(times) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(!(this.zpp_inner.vertices == null)) {
		if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
	}
	return this;
};
nape.geom.GeomPoly.prototype.skipBackwards = function(times) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	return this.skipForward(-times);
};
nape.geom.GeomPoly.prototype.erase = function(count) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	while(count != 0 && !(this.zpp_inner.vertices == null)) {
		var retv = this.zpp_inner.vertices;
		if(count > 0) {
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = this.zpp_inner.vertices = null;
			} else {
				var retnodes = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				this.zpp_inner.vertices = retnodes;
			}
			count--;
		} else if(count < 0) {
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
			} else {
				var retnodes1 = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				this.zpp_inner.vertices = retnodes1;
			}
			count++;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	}
	return this;
};
nape.geom.GeomPoly.prototype.clear = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	while(!(this.zpp_inner.vertices == null)) {
		var tmp = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = tmp;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	}
	return this;
};
nape.geom.GeomPoly.prototype.copy = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	var ret = nape.geom.GeomPoly.get();
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var obj = zpp_nape.geom.ZPP_GeomVert.get(v.x,v.y);
			if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
				obj.prev = ret.zpp_inner.vertices;
				obj.next = ret.zpp_inner.vertices.next;
				ret.zpp_inner.vertices.next.prev = obj;
				ret.zpp_inner.vertices.next = obj;
			}
			ret.zpp_inner.vertices = obj;
			nite = nite.next;
		} while(nite != L);
	}
	return ret.skipForward(1);
};
nape.geom.GeomPoly.prototype.dispose = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	this.clear();
	var o = this;
	o.zpp_pool = null;
	if(zpp_nape.util.ZPP_PubPool.nextGeomPoly != null) zpp_nape.util.ZPP_PubPool.nextGeomPoly.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolGeomPoly = o;
	zpp_nape.util.ZPP_PubPool.nextGeomPoly = o;
	o.zpp_disp = true;
};
nape.geom.GeomPoly.prototype.toString = function() {
	var ret = "GeomPoly[";
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v != this.zpp_inner.vertices) ret += ",";
			ret += "{" + v.x + "," + v.y + "}";
			nite = nite.next;
		} while(nite != L);
	}
	return ret + "]";
};
nape.geom.GeomPoly.prototype.area = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return 0.0; else {
		var ret;
		var area = 0.0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				area += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
			} while(nite != L);
		}
		ret = area * 0.5;
		if(ret < 0) return -ret; else return ret;
	}
};
nape.geom.GeomPoly.prototype.winding = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
	} else {
		var area;
		var area1 = 0.0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				area1 += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
			} while(nite != L);
		}
		area = area1 * 0.5;
		if(area > 0) {
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
		} else if(area == 0) {
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
		} else {
			if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
		}
	}
};
nape.geom.GeomPoly.prototype.contains = function(point) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: GeomPoly::contains point cannot be null";
	var ret;
	var x;
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	point.zpp_inner.validate();
	x = point.zpp_inner.x;
	var y;
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	point.zpp_inner.validate();
	y = point.zpp_inner.y;
	var ret1 = false;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			var q = p.prev;
			if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
				if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret1 = !ret1;
			}
			nite = nite.next;
		} while(nite != L);
	}
	ret = ret1;
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.GeomPoly.prototype.isClockwise = function() {
	return this.winding() == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
		return $r;
	}(this));
};
nape.geom.GeomPoly.prototype.isConvex = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else {
		var neg = false;
		var pos = false;
		var ret = true;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var u = v.prev;
				var w = v.next;
				var ax = 0.0;
				var ay = 0.0;
				ax = w.x - v.x;
				ay = w.y - v.y;
				var bx = 0.0;
				var by = 0.0;
				bx = v.x - u.x;
				by = v.y - u.y;
				var dot = by * ax - bx * ay;
				if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
				if(pos && neg) {
					ret = false;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		return ret;
	}
};
nape.geom.GeomPoly.prototype.isSimple = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_nape.geom.ZPP_Simple.isSimple(this.zpp_inner.vertices);
};
nape.geom.GeomPoly.prototype.isMonotone = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_nape.geom.ZPP_Monotone.isMonotone(this.zpp_inner.vertices);
};
nape.geom.GeomPoly.prototype.isDegenerate = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return this.area() < nape.Config.epsilon;
};
nape.geom.GeomPoly.prototype.simplify = function(epsilon) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(epsilon <= 0.0) throw "Error: Epsilon should be > 0 for simplifying a GeomPoly";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
		var x = zpp_nape.geom.ZPP_Simplify.simplify(this.zpp_inner.vertices,epsilon);
		var ret = nape.geom.GeomPoly.get();
		ret.zpp_inner.vertices = x;
		return ret;
	}
};
nape.geom.GeomPoly.prototype.simpleDecomposition = function(output) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
	var MPs = zpp_nape.geom.ZPP_Simple.decompose(this.zpp_inner.vertices,(function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
		$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
		return $r;
	}(this)));
	var ret;
	if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
	while(!(MPs.head == null)) {
		var MP = MPs.pop_unsafe();
		var x = nape.geom.GeomPoly.get();
		x.zpp_inner.vertices = MP;
		if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
	}
	return ret;
};
nape.geom.GeomPoly.prototype.monotoneDecomposition = function(output) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
	var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
		$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
		return $r;
	}(this)));
	var MPs = poly.extract((function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
		$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
		return $r;
	}(this)));
	var ret;
	if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
	while(!(MPs.head == null)) {
		var MP = MPs.pop_unsafe();
		var x = nape.geom.GeomPoly.get();
		x.zpp_inner.vertices = MP;
		if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
	}
	return ret;
};
nape.geom.GeomPoly.prototype.convexDecomposition = function(delaunay,output) {
	if(delaunay == null) delaunay = false;
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
	var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
		$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
		return $r;
	}(this)));
	var MPs = poly.extract_partitions((function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
		$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
		return $r;
	}(this)));
	var ret;
	if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
	while(!(MPs.head == null)) {
		var MP = MPs.pop_unsafe();
		zpp_nape.geom.ZPP_Triangular.triangulate(MP);
		if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
		zpp_nape.geom.ZPP_Convex.optimise(MP);
		var MQs = MP.extract((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var o = MP;
		o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
		while(!(MQs.head == null)) {
			var MQ = MQs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MQ;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
	}
	return ret;
};
nape.geom.GeomPoly.prototype.triangularDecomposition = function(delaunay,output) {
	if(delaunay == null) delaunay = false;
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
	var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
		$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
		return $r;
	}(this)));
	var MPs = poly.extract_partitions((function($this) {
		var $r;
		if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
		$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
		return $r;
	}(this)));
	var ret;
	if(output == null) ret = new nape.geom.GeomPolyList(); else ret = output;
	while(!(MPs.head == null)) {
		var MP = MPs.pop_unsafe();
		zpp_nape.geom.ZPP_Triangular.triangulate(MP);
		if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
		var MQs = MP.extract((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var o = MP;
		o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
		while(!(MQs.head == null)) {
			var MQ = MQs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MQ;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
	}
	return ret;
};
nape.geom.GeomPoly.prototype.inflate = function(inflation) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	var ret = nape.geom.GeomPoly.get();
	if(this.winding() == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
		return $r;
	}(this))) inflation = -inflation;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			var prev = p.prev;
			var next = p.next;
			var ax = 0.0;
			var ay = 0.0;
			var bx = 0.0;
			var by = 0.0;
			ax = p.x - prev.x;
			ay = p.y - prev.y;
			bx = next.x - p.x;
			by = next.y - p.y;
			var apx = 0.0;
			var apy = 0.0;
			var bpx = 0.0;
			var bpy = 0.0;
			apx = ax;
			apy = ay;
			var d = apx * apx + apy * apy;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			apx *= t;
			apy *= t;
			var t1 = apx;
			apx = -apy;
			apy = t1;
			var t2 = inflation;
			apx *= t2;
			apy *= t2;
			bpx = bx;
			bpy = by;
			var d1 = bpx * bpx + bpy * bpy;
			var imag1 = 1.0 / Math.sqrt(d1);
			var t3 = imag1;
			bpx *= t3;
			bpy *= t3;
			var t4 = bpx;
			bpx = -bpy;
			bpy = t4;
			var t5 = inflation;
			bpx *= t5;
			bpy *= t5;
			var bapx = 0.0;
			var bapy = 0.0;
			bapx = bpx - apx;
			bapy = bpy - apy;
			var num = by * bapx - bx * bapy;
			var t6;
			if(num == 0) t6 = 0; else t6 = num / (by * ax - bx * ay);
			var px = 0.0;
			var py = 0.0;
			px = p.x + apx;
			py = p.y + apy;
			var t7 = t6;
			px += ax * t7;
			py += ay * t7;
			ret.push(nape.geom.Vec2.get(px,py,null));
			nite = nite.next;
		} while(nite != L);
	}
	return ret.skipForward(1);
};
nape.geom.GeomPoly.prototype.cut = function(start,end,boundedStart,boundedEnd,output) {
	if(boundedEnd == null) boundedEnd = false;
	if(boundedStart == null) boundedStart = false;
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(!(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null || $this.zpp_inner.vertices.next == null || $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Simple.isSimple($this.zpp_inner.vertices);
		return $r;
	}(this))) throw "Error: Cut requires a truly simple polygon";
	if(start == null || end == null) throw "Error: Cannot cut with null start/end's";
	if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	var ret = zpp_nape.geom.ZPP_Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.GeomPoly.prototype.transform = function(matrix) {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if(matrix == null) throw "Error: Cannot transform by null matrix";
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
			v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
			v.x = t;
			nite = nite.next;
		} while(nite != L);
	}
	return this;
};
nape.geom.GeomPoly.prototype.bounds = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null;
		return $r;
	}(this))) throw "Error: empty GeomPoly has no defineable bounds";
	var minx = 1e100;
	var miny = 1e100;
	var maxx = -1e+100;
	var maxy = -1e+100;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.x < minx) minx = v.x;
			if(v.y < miny) miny = v.y;
			if(v.x > maxx) maxx = v.x;
			if(v.y > maxy) maxy = v.y;
			nite = nite.next;
		} while(nite != L);
	}
	return new nape.geom.AABB(minx,miny,maxx - minx,maxy - miny);
};
nape.geom.GeomPoly.prototype.top = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null;
		return $r;
	}(this))) throw "Error: empty GeomPoly has no defineable topmost vertex";
	var min = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.y < min.y) min = v;
			nite = nite.next;
		} while(nite != L);
	}
	if(min.wrap == null) {
		min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
		min.wrap.zpp_inner._inuse = true;
		min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
		min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
	}
	return min.wrap;
};
nape.geom.GeomPoly.prototype.bottom = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null;
		return $r;
	}(this))) throw "Error: empty GeomPoly has no defineable bottommost vertex";
	var max = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.y > max.y) max = v;
			nite = nite.next;
		} while(nite != L);
	}
	if(max.wrap == null) {
		max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
		max.wrap.zpp_inner._inuse = true;
		max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
		max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
	}
	return max.wrap;
};
nape.geom.GeomPoly.prototype.left = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null;
		return $r;
	}(this))) throw "Error: empty GeomPoly has no defineable leftmost vertex";
	var min = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.x < min.x) min = v;
			nite = nite.next;
		} while(nite != L);
	}
	if(min.wrap == null) {
		min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
		min.wrap.zpp_inner._inuse = true;
		min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
		min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
	}
	return min.wrap;
};
nape.geom.GeomPoly.prototype.right = function() {
	if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		$r = $this.zpp_inner.vertices == null;
		return $r;
	}(this))) throw "Error: empty GeomPoly has no defineable rightmmost vertex";
	var max = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.x > max.x) max = v;
			nite = nite.next;
		} while(nite != L);
	}
	if(max.wrap == null) {
		max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
		max.wrap.zpp_inner._inuse = true;
		max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
		max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
	}
	return max.wrap;
};
nape.geom.GeomPoly.prototype.__class__ = nape.geom.GeomPoly;
nape.geom.GeomPolyIterator = $hxClasses['nape.geom.GeomPolyIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_GeomPolyList.internal) throw "Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!";
};
nape.geom.GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape.geom.GeomPolyIterator.get = function(list) {
	var ret;
	if(nape.geom.GeomPolyIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_GeomPolyList.internal = true;
		var ret1 = new nape.geom.GeomPolyIterator();
		zpp_nape.util.ZPP_GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.GeomPolyIterator.prototype.zpp_inner = null;
nape.geom.GeomPolyIterator.prototype.zpp_i = null;
nape.geom.GeomPolyIterator.prototype.zpp_critical = null;
nape.geom.GeomPolyIterator.prototype.zpp_next = null;
nape.geom.GeomPolyIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.geom.GeomPolyIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.geom.GeomPolyIterator.prototype.__class__ = nape.geom.GeomPolyIterator;
nape.geom.GeomPolyList = $hxClasses['nape.geom.GeomPolyList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_GeomPolyList();
	this.zpp_inner.outer = this;
};
nape.geom.GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape.geom.GeomPolyList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.GeomPolyList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.GeomPolyList.prototype, "length", {get: nape.geom.GeomPolyList.prototype.get_length});
});nape.geom.GeomPolyList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.geom.GeomPolyList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.geom.GeomPolyList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.geom.GeomPolyList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.GeomPolyList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.GeomPolyList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.geom.GeomPolyList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.geom.GeomPolyList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.geom.GeomPolyList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.geom.GeomPolyList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.geom.GeomPolyList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.geom.GeomPolyList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.geom.GeomPolyIterator.get(this);
};
nape.geom.GeomPolyList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.GeomPolyList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.geom.GeomPolyIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "GeomPoly" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.geom.GeomPolyList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.geom.GeomPolyIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.geom.GeomPolyList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.geom.GeomPolyIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.geom.GeomPolyList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.geom.GeomPolyIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.geom.GeomPolyList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.geom.GeomPolyList.prototype.__class__ = nape.geom.GeomPolyList;
nape.geom.GeomVertexIterator = $hxClasses['nape.geom.GeomVertexIterator'] = function() {
	if(!zpp_nape.geom.ZPP_GeomVertexIterator.internal) throw "Error: Cannot instantiate GeomVertexIterator";
};
nape.geom.GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
nape.geom.GeomVertexIterator.prototype.zpp_inner = null;
nape.geom.GeomVertexIterator.prototype.hasNext = function() {
	if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
	var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
	this.zpp_inner.first = false;
	if(!ret) {
		var o = this.zpp_inner;
		o.outer.zpp_inner = null;
		o.ptr = o.start = null;
		o.next = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = o;
	}
	return ret;
};
nape.geom.GeomVertexIterator.prototype.next = function() {
	if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
	var ret = this.zpp_inner.ptr.wrapper();
	if(this.zpp_inner.forward) this.zpp_inner.ptr = this.zpp_inner.ptr.next; else this.zpp_inner.ptr = this.zpp_inner.ptr.prev;
	return ret;
};
nape.geom.GeomVertexIterator.prototype.__class__ = nape.geom.GeomVertexIterator;
nape.geom.MarchingSquares = $hxClasses['nape.geom.MarchingSquares'] = function() { };
nape.geom.MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
nape.geom.MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(iso == null) throw "Error: MarchingSquares requires an iso function to operate";
	if(bounds == null) throw "Error: MarchingSquares requires an AABB to define bounds of surface extraction";
	if(cellsize == null) throw "Error: MarchingSquares requires a Vec2 to define cell size for surface extraction";
	if((function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.y;
		return $r;
	}(this)) <= 0) throw "Error: MarchingSquares cannot operate with non-positive cell dimensions";
	if(quality < 0) throw "Error: MarchingSquares cannot use a negative quality value for interpolation";
	if(subgrid != null && ((function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.y;
		return $r;
	}(this)) <= 0)) throw "Error: MarchingSquares cannot with non-positive sub-grid dimensions";
	var ret;
	if(output != null) ret = output; else ret = new nape.geom.GeomPolyList();
	if(subgrid == null) zpp_nape.geom.ZPP_MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.getmax().get_x(),bounds.zpp_inner.getmax().get_y(),cellsize,quality,combine,ret); else {
		var xp;
		xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var yp;
		yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0;
			x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1;
			if(x == xn - 1) x1 = bounds.zpp_inner.getmax().get_x(); else x1 = x0 + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0;
				y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1;
				if(y == yn - 1) y1 = bounds.zpp_inner.getmax().get_y(); else y1 = y0 + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_nape.geom.ZPP_MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
};
nape.geom.MarchingSquares.prototype.__class__ = nape.geom.MarchingSquares;
nape.geom.Mat23 = $hxClasses['nape.geom.Mat23'] = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_nape.geom.ZPP_Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	this.zpp_inner.a;
	if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	this.zpp_inner.b;
	if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	this.zpp_inner.tx;
	if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	this.zpp_inner.c;
	if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	this.zpp_inner.d;
	if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	this.zpp_inner.ty;
};
nape.geom.Mat23.__name__ = ["nape","geom","Mat23"];
nape.geom.Mat23.rotation = function(angle) {
	if(angle != angle) throw "Error: Cannot create rotation matrix with NaN angle";
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape.geom.Mat23(cos,-sin,sin,cos,0,0);
};
nape.geom.Mat23.translation = function(tx,ty) {
	return new nape.geom.Mat23(1,0,0,1,tx,ty);
};
nape.geom.Mat23.scale = function(sx,sy) {
	return new nape.geom.Mat23(sx,0,0,sy,0,0);
};
nape.geom.Mat23.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "a", {get: nape.geom.Mat23.prototype.get_a, set: nape.geom.Mat23.prototype.set_a});
});nape.geom.Mat23.prototype.get_a = function() {
	return this.zpp_inner.a;
};
nape.geom.Mat23.prototype.set_a = function(a) {
	if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	return this.zpp_inner.a;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "b", {get: nape.geom.Mat23.prototype.get_b, set: nape.geom.Mat23.prototype.set_b});
});nape.geom.Mat23.prototype.get_b = function() {
	return this.zpp_inner.b;
};
nape.geom.Mat23.prototype.set_b = function(b) {
	if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	return this.zpp_inner.b;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "c", {get: nape.geom.Mat23.prototype.get_c, set: nape.geom.Mat23.prototype.set_c});
});nape.geom.Mat23.prototype.get_c = function() {
	return this.zpp_inner.c;
};
nape.geom.Mat23.prototype.set_c = function(c) {
	if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	return this.zpp_inner.c;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "d", {get: nape.geom.Mat23.prototype.get_d, set: nape.geom.Mat23.prototype.set_d});
});nape.geom.Mat23.prototype.get_d = function() {
	return this.zpp_inner.d;
};
nape.geom.Mat23.prototype.set_d = function(d) {
	if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	return this.zpp_inner.d;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "tx", {get: nape.geom.Mat23.prototype.get_tx, set: nape.geom.Mat23.prototype.set_tx});
});nape.geom.Mat23.prototype.get_tx = function() {
	return this.zpp_inner.tx;
};
nape.geom.Mat23.prototype.set_tx = function(tx) {
	if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	return this.zpp_inner.tx;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "ty", {get: nape.geom.Mat23.prototype.get_ty, set: nape.geom.Mat23.prototype.set_ty});
});nape.geom.Mat23.prototype.get_ty = function() {
	return this.zpp_inner.ty;
};
nape.geom.Mat23.prototype.set_ty = function(ty) {
	if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	return this.zpp_inner.ty;
};
nape.geom.Mat23.prototype.copy = function() {
	return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
};
nape.geom.Mat23.prototype.set = function(matrix) {
	if(matrix == null) throw "Error: Cannot set form null matrix";
	this.zpp_inner.set(matrix.zpp_inner);
	this.zpp_inner.invalidate();
	return this;
};
nape.geom.Mat23.prototype.setAs = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner.setas(a,b,c,d,tx,ty);
	this.zpp_inner.invalidate();
	return this;
};
nape.geom.Mat23.prototype.reset = function() {
	return this.setAs();
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Mat23.prototype, "determinant", {get: nape.geom.Mat23.prototype.get_determinant});
});nape.geom.Mat23.prototype.get_determinant = function() {
	return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
};
nape.geom.Mat23.prototype.singular = function() {
	var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
	var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	if(limit < 0) limit = -limit;
	return norm > nape.Config.illConditionedThreshold * limit;
};
nape.geom.Mat23.prototype.inverse = function() {
	if(this.singular()) throw "Error: Matrix is singular and cannot be inverted";
	var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
	return new nape.geom.Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
};
nape.geom.Mat23.prototype.transpose = function() {
	return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
};
nape.geom.Mat23.prototype.concat = function(matrix) {
	var m = matrix;
	if(m == null) throw "Error: Cannot concatenate with null Mat23";
	return new nape.geom.Mat23(m.zpp_inner.a * this.zpp_inner.a + m.zpp_inner.b * this.zpp_inner.c,m.zpp_inner.a * this.zpp_inner.b + m.zpp_inner.b * this.zpp_inner.d,m.zpp_inner.c * this.zpp_inner.a + m.zpp_inner.d * this.zpp_inner.c,m.zpp_inner.c * this.zpp_inner.b + m.zpp_inner.d * this.zpp_inner.d,m.zpp_inner.a * this.zpp_inner.tx + m.zpp_inner.b * this.zpp_inner.ty + m.zpp_inner.tx,m.zpp_inner.c * this.zpp_inner.tx + m.zpp_inner.d * this.zpp_inner.ty + m.zpp_inner.ty);
};
nape.geom.Mat23.prototype.transform = function(point,noTranslation,weak) {
	if(weak == null) weak = false;
	if(noTranslation == null) noTranslation = false;
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot transform null Vec2";
	var ret;
	if(noTranslation) ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.a + (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b,(function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c + (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.d,weak); else ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.a + (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c + (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Mat23.prototype.inverseTransform = function(point,noTranslation,weak) {
	if(weak == null) weak = false;
	if(noTranslation == null) noTranslation = false;
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot transform null Vec2";
	if(this.singular()) throw "Error: Matrix is singular and inverse transformation cannot be performed";
	var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
	var ret;
	if(noTranslation) ret = nape.geom.Vec2.get(((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.d - (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b) * idet,((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.a - (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c) * idet,weak); else {
		var dx;
		dx = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.tx;
		var dy;
		dy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.ty;
		ret = nape.geom.Vec2.get((dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet,(dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet,weak);
	}
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Mat23.prototype.toString = function() {
	return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
};
nape.geom.Mat23.prototype.equiorthogonal = function() {
	if(this.singular()) return false; else {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < nape.Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
			return y * y < nape.Config.epsilon;
		} else return false;
	}
};
nape.geom.Mat23.prototype.orthogonal = function() {
	var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
	if(x * x < nape.Config.epsilon) {
		var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
		var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
		return y * y < nape.Config.epsilon && z * z < nape.Config.epsilon;
	} else return false;
};
nape.geom.Mat23.prototype.equiorthogonalise = function() {
	if(!this.equiorthogonal()) {
		var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
		var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
		if(k1 * k1 < nape.Config.epsilon || k2 * k2 < nape.Config.epsilon) throw "Error: Matrix is singular and cannot be " + "equiorthogonal" + "ised";
		var k = (k1 + k2) / 2;
		k1 = k / k1;
		k2 = k / k2;
		var _g = this;
		_g.set_a(_g.zpp_inner.a * k1);
		var _g1 = this;
		_g1.set_c(_g1.zpp_inner.c * k1);
		var _g2 = this;
		_g2.set_b(_g2.zpp_inner.b * k2);
		var _g3 = this;
		_g3.set_d(_g3.zpp_inner.d * k2);
		var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
		if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
		var sin = Math.sin(ang);
		var cos = Math.cos(ang);
		var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
		var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
		this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
		if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
		this.zpp_inner.a = a2;
		this.zpp_inner.invalidate();
		this.zpp_inner.a;
		this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
		if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
		this.zpp_inner.b = b2;
		this.zpp_inner.invalidate();
		this.zpp_inner.b;
		this.zpp_inner.invalidate();
	}
	return this;
};
nape.geom.Mat23.prototype.orthogonalise = function() {
	if(!this.orthogonal()) {
		var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
		var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
		if(k1 * k1 < nape.Config.epsilon || k2 * k2 < nape.Config.epsilon) throw "Error: Matrix is singular and cannot be " + "orthogonal" + "ised";
		var k = 1;
		k1 = k / k1;
		k2 = k / k2;
		var _g = this;
		_g.set_a(_g.zpp_inner.a * k1);
		var _g1 = this;
		_g1.set_c(_g1.zpp_inner.c * k1);
		var _g2 = this;
		_g2.set_b(_g2.zpp_inner.b * k2);
		var _g3 = this;
		_g3.set_d(_g3.zpp_inner.d * k2);
		var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
		if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
		var sin = Math.sin(ang);
		var cos = Math.cos(ang);
		var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
		var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
		this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
		if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
		this.zpp_inner.a = a2;
		this.zpp_inner.invalidate();
		this.zpp_inner.a;
		this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
		if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
		this.zpp_inner.b = b2;
		this.zpp_inner.invalidate();
		this.zpp_inner.b;
		this.zpp_inner.invalidate();
	}
	return this;
};
nape.geom.Mat23.prototype.__class__ = nape.geom.Mat23;
nape.geom.MatMN = $hxClasses['nape.geom.MatMN'] = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) throw "Error: MatMN::dimensions cannot be < 1";
	this.zpp_inner = new zpp_nape.geom.ZPP_MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
nape.geom.MatMN.__name__ = ["nape","geom","MatMN"];
nape.geom.MatMN.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.MatMN.prototype, "rows", {get: nape.geom.MatMN.prototype.get_rows});
});nape.geom.MatMN.prototype.get_rows = function() {
	return this.zpp_inner.m;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.MatMN.prototype, "cols", {get: nape.geom.MatMN.prototype.get_cols});
});nape.geom.MatMN.prototype.get_cols = function() {
	return this.zpp_inner.n;
};
nape.geom.MatMN.prototype.x = function(row,col) {
	if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
	return this.zpp_inner.x[row * this.zpp_inner.n + col];
};
nape.geom.MatMN.prototype.setx = function(row,col,x) {
	if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
	return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
};
nape.geom.MatMN.prototype.toString = function() {
	var ret = "{ ";
	var fst = true;
	var _g1 = 0;
	var _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		if(!fst) ret += "; ";
		fst = false;
		var _g3 = 0;
		var _g2 = this.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			ret += (function($this) {
				var $r;
				if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
				$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
				return $r;
			}(this)) + " ";
		}
	}
	ret += "}";
	return ret;
};
nape.geom.MatMN.prototype.transpose = function() {
	var ret = new nape.geom.MatMN(this.zpp_inner.n,this.zpp_inner.m);
	var _g1 = 0;
	var _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = this.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			ret.setx(j,i,(function($this) {
				var $r;
				if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
				$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
				return $r;
			}(this)));
		}
	}
	return ret;
};
nape.geom.MatMN.prototype.mul = function(matrix) {
	var y = matrix;
	if(this.zpp_inner.n != y.zpp_inner.m) throw "Error: Matrix dimensions aren't compatible";
	var ret = new nape.geom.MatMN(this.zpp_inner.m,y.zpp_inner.n);
	var _g1 = 0;
	var _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = y.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			var v = 0.0;
			var _g5 = 0;
			var _g4 = this.zpp_inner.n;
			while(_g5 < _g4) {
				var k = _g5++;
				v += (function($this) {
					var $r;
					if(i < 0 || k < 0 || i >= $this.zpp_inner.m || k >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + k];
					return $r;
				}(this)) * (function($this) {
					var $r;
					if(k < 0 || j < 0 || k >= y.zpp_inner.m || j >= y.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = y.zpp_inner.x[k * y.zpp_inner.n + j];
					return $r;
				}(this));
			}
			if(i < 0 || j < 0 || i >= ret.zpp_inner.m || j >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
			ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
		}
	}
	return ret;
};
nape.geom.MatMN.prototype.__class__ = nape.geom.MatMN;
nape.geom.Ray = $hxClasses['nape.geom.Ray'] = function(origin,direction) {
	this.zpp_inner = null;
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.geom.ZPP_Ray();
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(origin == null) throw "Error: Ray::origin cannot be null";
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Ray::direction cannot be null";
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Math.POSITIVE_INFINITY;
};
nape.geom.Ray.__name__ = ["nape","geom","Ray"];
nape.geom.Ray.fromSegment = function(start,end) {
	if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(start == null) throw "Error: Ray::fromSegment::start is null";
	if(end == null) throw "Error: Ray::fromSegment::end is null";
	var dir = end.sub(start,true);
	var ret = new nape.geom.Ray(start,dir);
	ret.set_maxDistance(Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		start.zpp_inner.validate();
		$r = start.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		start.zpp_inner.validate();
		$r = start.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		end.zpp_inner.validate();
		$r = end.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		end.zpp_inner.validate();
		$r = end.zpp_inner.y;
		return $r;
	}(this)))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Ray.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.Ray.prototype, "userData", {get: nape.geom.Ray.prototype.get_userData});
});nape.geom.Ray.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Ray.prototype, "origin", {get: nape.geom.Ray.prototype.get_origin, set: nape.geom.Ray.prototype.set_origin});
});nape.geom.Ray.prototype.get_origin = function() {
	return this.zpp_inner.origin;
};
nape.geom.Ray.prototype.set_origin = function(origin) {
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(origin == null) throw "Error: Ray::origin cannot be null";
	this.zpp_inner.origin.set(origin);
	return this.zpp_inner.origin;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Ray.prototype, "direction", {get: nape.geom.Ray.prototype.get_direction, set: nape.geom.Ray.prototype.set_direction});
});nape.geom.Ray.prototype.get_direction = function() {
	return this.zpp_inner.direction;
};
nape.geom.Ray.prototype.set_direction = function(direction) {
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Ray::direction cannot be null";
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	return this.zpp_inner.direction;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Ray.prototype, "maxDistance", {get: nape.geom.Ray.prototype.get_maxDistance, set: nape.geom.Ray.prototype.set_maxDistance});
});nape.geom.Ray.prototype.get_maxDistance = function() {
	return this.zpp_inner.maxdist;
};
nape.geom.Ray.prototype.set_maxDistance = function(maxDistance) {
	if(maxDistance != maxDistance) throw "Error: maxDistance cannot be NaN";
	this.zpp_inner.maxdist = maxDistance;
	return this.zpp_inner.maxdist;
};
nape.geom.Ray.prototype.aabb = function() {
	return this.zpp_inner.rayAABB().wrapper();
};
nape.geom.Ray.prototype.at = function(distance,weak) {
	if(weak == null) weak = false;
	this.zpp_inner.validate_dir();
	return nape.geom.Vec2.get(this.zpp_inner.origin.get_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.get_y() + distance * this.zpp_inner.diry,weak);
};
nape.geom.Ray.prototype.copy = function() {
	var ret = new nape.geom.Ray(this.zpp_inner.origin,this.zpp_inner.direction);
	ret.set_maxDistance(this.zpp_inner.maxdist);
	return ret;
};
nape.geom.Ray.prototype.__class__ = nape.geom.Ray;
nape.geom.RayResult = $hxClasses['nape.geom.RayResult'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.geom.ZPP_ConvexRayResult.internal) throw "Error: RayResult cannot be instantiated derp!";
};
nape.geom.RayResult.__name__ = ["nape","geom","RayResult"];
nape.geom.RayResult.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.RayResult.prototype, "normal", {get: nape.geom.RayResult.prototype.get_normal});
});nape.geom.RayResult.prototype.get_normal = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.normal;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.RayResult.prototype, "distance", {get: nape.geom.RayResult.prototype.get_distance});
});nape.geom.RayResult.prototype.get_distance = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.toiDistance;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.RayResult.prototype, "inner", {get: nape.geom.RayResult.prototype.get_inner});
});nape.geom.RayResult.prototype.get_inner = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.inner;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.RayResult.prototype, "shape", {get: nape.geom.RayResult.prototype.get_shape});
});nape.geom.RayResult.prototype.get_shape = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return this.zpp_inner.shape;
};
nape.geom.RayResult.prototype.dispose = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	this.zpp_inner.free();
};
nape.geom.RayResult.prototype.toString = function() {
	if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
	return "{ shape: " + Std.string((function($this) {
		var $r;
		if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		$r = $this.zpp_inner.shape;
		return $r;
	}(this))) + " distance: " + (function($this) {
		var $r;
		if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		$r = $this.zpp_inner.toiDistance;
		return $r;
	}(this)) + " ?inner: " + Std.string((function($this) {
		var $r;
		if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		$r = $this.zpp_inner.inner;
		return $r;
	}(this))) + " }";
};
nape.geom.RayResult.prototype.__class__ = nape.geom.RayResult;
nape.geom.RayResultIterator = $hxClasses['nape.geom.RayResultIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_RayResultList.internal) throw "Error: Cannot instantiate " + "RayResult" + "Iterator derp!";
};
nape.geom.RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape.geom.RayResultIterator.get = function(list) {
	var ret;
	if(nape.geom.RayResultIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_RayResultList.internal = true;
		var ret1 = new nape.geom.RayResultIterator();
		zpp_nape.util.ZPP_RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.RayResultIterator.prototype.zpp_inner = null;
nape.geom.RayResultIterator.prototype.zpp_i = null;
nape.geom.RayResultIterator.prototype.zpp_critical = null;
nape.geom.RayResultIterator.prototype.zpp_next = null;
nape.geom.RayResultIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.geom.RayResultIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.geom.RayResultIterator.prototype.__class__ = nape.geom.RayResultIterator;
nape.geom.RayResultList = $hxClasses['nape.geom.RayResultList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_RayResultList();
	this.zpp_inner.outer = this;
};
nape.geom.RayResultList.__name__ = ["nape","geom","RayResultList"];
nape.geom.RayResultList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.RayResultList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.RayResultList.prototype, "length", {get: nape.geom.RayResultList.prototype.get_length});
});nape.geom.RayResultList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.geom.RayResultList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj);
};
nape.geom.RayResultList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt;
};
nape.geom.RayResultList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.RayResultList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		} else this.zpp_inner.inner.add(obj);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.RayResultList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret;
	return retx2;
};
nape.geom.RayResultList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret;
	return retx2;
};
nape.geom.RayResultList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.geom.RayResultList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.geom.RayResultList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.geom.RayResultList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.geom.RayResultList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.geom.RayResultIterator.get(this);
};
nape.geom.RayResultList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.RayResultList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.geom.RayResultIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "RayResult" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.geom.RayResultList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.geom.RayResultIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.geom.RayResultList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.geom.RayResultIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.geom.RayResultList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.geom.RayResultIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.geom.RayResultList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.geom.RayResultList.prototype.__class__ = nape.geom.RayResultList;
nape.geom.Vec2 = $hxClasses['nape.geom.Vec2'] = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
};
nape.geom.Vec2.__name__ = ["nape","geom","Vec2"];
nape.geom.Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape.geom.Vec2.get(x,y,true);
};
nape.geom.Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec2 == null) ret = new nape.geom.Vec2(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec2;
		zpp_nape.util.ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextVec2) zpp_nape.util.ZPP_PubPool.nextVec2 = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		ret.zpp_inner.immutable();
		if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
		if(!((function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			ret.zpp_inner.invalidate();
		}
		ret;
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape.geom.Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	if(length != length) throw "Error: Vec2::length cannot be NaN";
	if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
	return nape.geom.Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
};
nape.geom.Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null || b == null) throw "Error: Cannot compute squared distance between null Vec2";
	var ret = zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null || b == null) throw "Error: Cannot compute squared distance between null Vec2";
	var ret = Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this))));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.zpp_inner = null;
nape.geom.Vec2.prototype.zpp_pool = null;
nape.geom.Vec2.prototype.zpp_disp = null;
nape.geom.Vec2.prototype.dispose = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(this.zpp_inner._inuse) throw "Error: This Vec2 is not disposable";
	var inner = this.zpp_inner;
	this.zpp_inner.outer = null;
	this.zpp_inner = null;
	var o = this;
	o.zpp_pool = null;
	if(zpp_nape.util.ZPP_PubPool.nextVec2 != null) zpp_nape.util.ZPP_PubPool.nextVec2.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec2 = o;
	zpp_nape.util.ZPP_PubPool.nextVec2 = o;
	o.zpp_disp = true;
	var o1 = inner;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
};
nape.geom.Vec2.prototype.copy = function(weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)),weak);
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec2.prototype, "x", {get: nape.geom.Vec2.prototype.get_x, set: nape.geom.Vec2.prototype.set_x});
});nape.geom.Vec2.prototype.get_x = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.x;
};
nape.geom.Vec2.prototype.set_x = function(x) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) != x) {
		if(x != x) throw "Error: Vec2::" + "x" + " cannot be NaN";
		this.zpp_inner.x = x;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.x;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec2.prototype, "y", {get: nape.geom.Vec2.prototype.get_y, set: nape.geom.Vec2.prototype.set_y});
});nape.geom.Vec2.prototype.get_y = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.y;
};
nape.geom.Vec2.prototype.set_y = function(y) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) != y) {
		if(y != y) throw "Error: Vec2::" + "y" + " cannot be NaN";
		this.zpp_inner.y = y;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.y;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec2.prototype, "length", {get: nape.geom.Vec2.prototype.get_length, set: nape.geom.Vec2.prototype.set_length});
});nape.geom.Vec2.prototype.get_length = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)));
};
nape.geom.Vec2.prototype.set_length = function(length) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(length != length) throw "Error: Vec2::length cannot be NaN";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) == 0) throw "Error: Cannot set length of a zero vector";
	var t = length / Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)));
	var _g = this;
	_g.set_x((function($this) {
		var $r;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		$r = _g.zpp_inner.x;
		return $r;
	}(this)) * t);
	var _g1 = this;
	_g1.set_y((function($this) {
		var $r;
		if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_g1.zpp_inner.validate();
		$r = _g1.zpp_inner.y;
		return $r;
	}(this)) * t);
	this.zpp_inner.invalidate();
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)));
};
nape.geom.Vec2.prototype.lsq = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
};
nape.geom.Vec2.prototype.set = function(vector) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(vector == null) throw "Error: Cannot assign null Vec2";
	var ret = this.setxy((function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)));
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.setxy = function(x,y) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	if(!((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) == x && (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) == y)) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		this.zpp_inner.invalidate();
	}
	return this;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec2.prototype, "angle", {get: nape.geom.Vec2.prototype.get_angle, set: nape.geom.Vec2.prototype.set_angle});
});nape.geom.Vec2.prototype.get_angle = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) == (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) && (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)));
};
nape.geom.Vec2.prototype.set_angle = function(angle) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
	var l;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	l = Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)));
	this.setxy(l * Math.cos(angle),l * Math.sin(angle));
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) == (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) && (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)));
};
nape.geom.Vec2.prototype.rotate = function(angle) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(angle != angle) throw "Error: Cannot rotate Vec2 by NaN";
	if(angle % (Math.PI * 2) != 0) {
		var ax = Math.sin(angle);
		var ay = Math.cos(angle);
		var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
		this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
		this.zpp_inner.x = t;
		this.zpp_inner.invalidate();
	}
	return this;
};
nape.geom.Vec2.prototype.reflect = function(vec,weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vec != null && vec.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this)) == 0) throw "Error: Cannot reflect in zero vector";
	var normal = ((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)),true);
		return $r;
	}(this))).normalise();
	var ret = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
	if(vec.zpp_inner.weak) {
		vec.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.normalise = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this)) == 0) throw "Error: Cannot normalise vector of length 0";
	var d;
	d = (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	var _g = this;
	_g.set_x((function($this) {
		var $r;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		$r = _g.zpp_inner.x;
		return $r;
	}(this)) * t);
	var _g1 = this;
	_g1.set_y((function($this) {
		var $r;
		if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_g1.zpp_inner.validate();
		$r = _g1.zpp_inner.y;
		return $r;
	}(this)) * t);
	this.zpp_inner.invalidate();
	return this;
};
nape.geom.Vec2.prototype.unit = function(weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this)) == 0) throw "Error: Cannot normalise vector of length 0";
	var scale = 1 / zpp_nape.util.ZPP_Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)));
	return nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * scale,(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * scale,weak);
};
nape.geom.Vec2.prototype.add = function(vector,weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot add null vectors";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)),weak);
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.addMul = function(vector,scalar,weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot add null vectors";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) * scalar,(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)) * scalar,weak);
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.sub = function(vector,weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot subtract null vectors";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)),weak);
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.mul = function(scalar,weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(scalar != scalar) throw "Error: Cannot multiply with NaN";
	return nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * scalar,(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * scalar,weak);
};
nape.geom.Vec2.prototype.addeq = function(vector) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(vector == null) throw "Error: Cannot add null vectors";
	this.setxy((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)));
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return this;
};
nape.geom.Vec2.prototype.subeq = function(vector) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(vector == null) throw "Error: Cannot subtract null vectors";
	this.setxy((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)));
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return this;
};
nape.geom.Vec2.prototype.muleq = function(scalar) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.immutable();
	if(scalar != scalar) throw "Error: Cannot multiply with NaN";
	return this.setxy((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * scalar,(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * scalar);
};
nape.geom.Vec2.prototype.dot = function(vector) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot take dot product with null vector";
	var ret;
	ret = (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this));
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.cross = function(vector) {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot take cross product with null vector";
	var ret;
	ret = (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return ret;
};
nape.geom.Vec2.prototype.perp = function(weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return nape.geom.Vec2.get(-(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)),weak);
};
nape.geom.Vec2.prototype.toString = function() {
	if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.toString();
};
nape.geom.Vec2.prototype.__class__ = nape.geom.Vec2;
nape.geom.Vec2Iterator = $hxClasses['nape.geom.Vec2Iterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_Vec2List.internal) throw "Error: Cannot instantiate " + "Vec2" + "Iterator derp!";
};
nape.geom.Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape.geom.Vec2Iterator.get = function(list) {
	var ret;
	if(nape.geom.Vec2Iterator.zpp_pool == null) {
		zpp_nape.util.ZPP_Vec2List.internal = true;
		var ret1 = new nape.geom.Vec2Iterator();
		zpp_nape.util.ZPP_Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.geom.Vec2Iterator.prototype.zpp_inner = null;
nape.geom.Vec2Iterator.prototype.zpp_i = null;
nape.geom.Vec2Iterator.prototype.zpp_critical = null;
nape.geom.Vec2Iterator.prototype.zpp_next = null;
nape.geom.Vec2Iterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.zpp_gl();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.geom.Vec2Iterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.geom.Vec2Iterator.prototype.__class__ = nape.geom.Vec2Iterator;
nape.geom.Vec2List = $hxClasses['nape.geom.Vec2List'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_Vec2List();
	this.zpp_inner.outer = this;
};
nape.geom.Vec2List.__name__ = ["nape","geom","Vec2List"];
nape.geom.Vec2List.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.geom.Vec2List.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec2List.prototype, "length", {get: nape.geom.Vec2List.prototype.get_length});
});nape.geom.Vec2List.prototype.get_length = function() {
	return this.zpp_gl();
};
nape.geom.Vec2List.prototype.zpp_gl = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.geom.Vec2List.prototype.zpp_vm = function() {
	this.zpp_inner.valmod();
};
nape.geom.Vec2List.prototype.has = function(obj) {
	this.zpp_vm();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.geom.Vec2List.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.wrapper();
};
nape.geom.Vec2List.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.Vec2List.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.geom.Vec2List.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.geom.Vec2List.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.geom.Vec2List.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.geom.Vec2List.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.geom.Vec2List.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
};
nape.geom.Vec2List.prototype.empty = function() {
	return this.zpp_gl() == 0;
};
nape.geom.Vec2List.prototype.iterator = function() {
	this.zpp_vm();
	return nape.geom.Vec2Iterator.get(this);
};
nape.geom.Vec2List.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.Vec2List();
	var _g = this.iterator();
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				i.zpp_inner.validate();
				$r = i.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				i.zpp_inner.validate();
				$r = i.zpp_inner.y;
				return $r;
			}($this)),false);
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.geom.Vec2List.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g = xs.iterator();
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) this.add(x);
	}
};
nape.geom.Vec2List.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g = this.iterator();
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.geom.Vec2List.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it = this.iterator();
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.geom.Vec2List.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.zpp_gl()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.geom.Vec2List.prototype.__class__ = nape.geom.Vec2List;
nape.geom.Vec3 = $hxClasses['nape.geom.Vec3'] = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.x = x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.y = y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.z = z;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.z;
};
nape.geom.Vec3.__name__ = ["nape","geom","Vec3"];
nape.geom.Vec3.get = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec3 == null) ret = new nape.geom.Vec3(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec3;
		zpp_nape.util.ZPP_PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextVec3) zpp_nape.util.ZPP_PubPool.nextVec3 = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape.geom.Vec3.prototype.zpp_inner = null;
nape.geom.Vec3.prototype.zpp_pool = null;
nape.geom.Vec3.prototype.zpp_disp = null;
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec3.prototype, "x", {get: nape.geom.Vec3.prototype.get_x, set: nape.geom.Vec3.prototype.set_x});
});nape.geom.Vec3.prototype.get_x = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.x;
};
nape.geom.Vec3.prototype.set_x = function(x) {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.x = x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.x;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec3.prototype, "y", {get: nape.geom.Vec3.prototype.get_y, set: nape.geom.Vec3.prototype.set_y});
});nape.geom.Vec3.prototype.get_y = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.y;
};
nape.geom.Vec3.prototype.set_y = function(y) {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.y = y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.y;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec3.prototype, "z", {get: nape.geom.Vec3.prototype.get_z, set: nape.geom.Vec3.prototype.set_z});
});nape.geom.Vec3.prototype.get_z = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.z;
};
nape.geom.Vec3.prototype.set_z = function(z) {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.z = z;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.z;
};
nape.geom.Vec3.prototype.dispose = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: This Vec3 is not disposable";
	var o = this;
	o.zpp_pool = null;
	if(zpp_nape.util.ZPP_PubPool.nextVec3 != null) zpp_nape.util.ZPP_PubPool.nextVec3.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec3 = o;
	zpp_nape.util.ZPP_PubPool.nextVec3 = o;
	o.zpp_disp = true;
};
rgaInits.push(function() {
Object.defineProperty(nape.geom.Vec3.prototype, "length", {get: nape.geom.Vec3.prototype.get_length, set: nape.geom.Vec3.prototype.set_length});
});nape.geom.Vec3.prototype.get_length = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	return Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)));
};
nape.geom.Vec3.prototype.set_length = function(length) {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(length != length) throw "Error: Vec3::length cannot be NaN";
	if((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)) == 0) throw "Error: Cannot set length of a zero vector";
	var t;
	t = length / (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}($this)));
		return $r;
	}(this));
	var t1 = t;
	var _g = this;
	_g.set_x((function($this) {
		var $r;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		$r = _g.zpp_inner.x;
		return $r;
	}(this)) * t1);
	var _g1 = this;
	_g1.set_y((function($this) {
		var $r;
		if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g1.zpp_inner.validate();
		$r = _g1.zpp_inner.y;
		return $r;
	}(this)) * t1);
	var _g2 = this;
	_g2.set_z((function($this) {
		var $r;
		if(_g2 != null && _g2.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g2.zpp_inner.validate();
		$r = _g2.zpp_inner.z;
		return $r;
	}(this)) * t);
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	return Math.sqrt((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)));
};
nape.geom.Vec3.prototype.lsq = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	return (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this));
};
nape.geom.Vec3.prototype.set = function(vector) {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot assign null Vec3";
	return this.setxyz((function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.z;
		return $r;
	}(this)));
};
nape.geom.Vec3.prototype.setxyz = function(x,y,z) {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.x = x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.y = y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.z = z;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.z;
	return this;
};
nape.geom.Vec3.prototype.xy = function(weak) {
	if(weak == null) weak = false;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	return nape.geom.Vec2.get((function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)),weak);
};
nape.geom.Vec3.prototype.toString = function() {
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	return "{ x: " + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + " y: " + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + " z: " + (function($this) {
		var $r;
		if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.z;
		return $r;
	}(this)) + " }";
};
nape.geom.Vec3.prototype.__class__ = nape.geom.Vec3;
nape.geom.Winding = $hxClasses['nape.geom.Winding'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Winding" + " derp!";
};
nape.geom.Winding.__name__ = ["nape","geom","Winding"];
nape.geom.Winding.UNDEFINED = null;
nape.geom.Winding.get_UNDEFINED = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
};
nape.geom.Winding.CLOCKWISE = null;
nape.geom.Winding.get_CLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
};
nape.geom.Winding.ANTICLOCKWISE = null;
nape.geom.Winding.get_ANTICLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
};
nape.geom.Winding.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
		return $r;
	}(this))) return "UNDEFINED"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
		return $r;
	}(this))) return "CLOCKWISE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
		return $r;
	}(this))) return "ANTICLOCKWISE"; else return "";
};
nape.geom.Winding.prototype.__class__ = nape.geom.Winding;
if(!nape.phys) nape.phys = {};
nape.phys.Interactor = $hxClasses['nape.phys.Interactor'] = function() {
	this.zpp_inner_i = null;
	throw "Error: Cannot instantiate an Interactor, only Shape/Body/Compound";
};
nape.phys.Interactor.__name__ = ["nape","phys","Interactor"];
nape.phys.Interactor.prototype.zpp_inner_i = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "id", {get: nape.phys.Interactor.prototype.get_id});
});nape.phys.Interactor.prototype.get_id = function() {
	return this.zpp_inner_i.id;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "userData", {get: nape.phys.Interactor.prototype.get_userData});
});nape.phys.Interactor.prototype.get_userData = function() {
	if(this.zpp_inner_i.userData == null) this.zpp_inner_i.userData = { };
	return this.zpp_inner_i.userData;
};
nape.phys.Interactor.prototype.isShape = function() {
	return this.zpp_inner_i.ishape != null;
};
nape.phys.Interactor.prototype.isBody = function() {
	return this.zpp_inner_i.ibody != null;
};
nape.phys.Interactor.prototype.isCompound = function() {
	return this.zpp_inner_i.icompound != null;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "castShape", {get: nape.phys.Interactor.prototype.get_castShape});
});nape.phys.Interactor.prototype.get_castShape = function() {
	if(this.zpp_inner_i.ishape != null) return this.zpp_inner_i.ishape.outer; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "castBody", {get: nape.phys.Interactor.prototype.get_castBody});
});nape.phys.Interactor.prototype.get_castBody = function() {
	if(this.zpp_inner_i.ibody != null) return this.zpp_inner_i.ibody.outer; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "castCompound", {get: nape.phys.Interactor.prototype.get_castCompound});
});nape.phys.Interactor.prototype.get_castCompound = function() {
	if(this.zpp_inner_i.icompound != null) return this.zpp_inner_i.icompound.outer; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "group", {get: nape.phys.Interactor.prototype.get_group, set: nape.phys.Interactor.prototype.set_group});
});nape.phys.Interactor.prototype.get_group = function() {
	if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
};
nape.phys.Interactor.prototype.set_group = function(group) {
	this.zpp_inner_i.immutable_midstep("Interactor::group");
	this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
	if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Interactor.prototype, "cbTypes", {get: nape.phys.Interactor.prototype.get_cbTypes});
});nape.phys.Interactor.prototype.get_cbTypes = function() {
	if(this.zpp_inner_i.wrap_cbTypes == null) this.zpp_inner_i.setupcbTypes();
	return this.zpp_inner_i.wrap_cbTypes;
};
nape.phys.Interactor.prototype.toString = function() {
	return "";
};
nape.phys.Interactor.prototype.__class__ = nape.phys.Interactor;
nape.phys.Body = $hxClasses['nape.phys.Body'] = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	this.zpp_inner = new zpp_nape.phys.ZPP_Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		this.zpp_inner.posx = position.zpp_inner.x;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_BODY.zpp_inner);
};
nape.phys.Body.__name__ = ["nape","phys","Body"];
nape.phys.Body.__super__ = nape.phys.Interactor;
for(var k in nape.phys.Interactor.prototype ) nape.phys.Body.prototype[k] = nape.phys.Interactor.prototype[k];
nape.phys.Body.prototype.zpp_inner = null;
nape.phys.Body.prototype.debugDraw = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "type", {get: nape.phys.Body.prototype.get_type, set: nape.phys.Body.prototype.set_type});
});nape.phys.Body.prototype.get_type = function() {
	return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
};
nape.phys.Body.prototype.set_type = function(type) {
	this.zpp_inner.immutable_midstep("Body::type");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type] != type) {
		if(type == null) throw "Error: Cannot use null BodyType";
		var ntype;
		if(type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) ntype = zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC; else if(type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) ntype = zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC; else ntype = zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
		if(ntype == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
	}
	return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "isBullet", {get: nape.phys.Body.prototype.get_isBullet, set: nape.phys.Body.prototype.set_isBullet});
});nape.phys.Body.prototype.get_isBullet = function() {
	return this.zpp_inner.bulletEnabled;
};
nape.phys.Body.prototype.set_isBullet = function(isBullet) {
	this.zpp_inner.bulletEnabled = isBullet;
	return this.zpp_inner.bulletEnabled;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "disableCCD", {get: nape.phys.Body.prototype.get_disableCCD, set: nape.phys.Body.prototype.set_disableCCD});
});nape.phys.Body.prototype.get_disableCCD = function() {
	return this.zpp_inner.disableCCD;
};
nape.phys.Body.prototype.set_disableCCD = function(disableCCD) {
	this.zpp_inner.disableCCD = disableCCD;
	return this.zpp_inner.disableCCD;
};
nape.phys.Body.prototype.integrate = function(deltaTime) {
	if(deltaTime != deltaTime) throw "Cannot integrate by NaN time";
	this.zpp_inner.immutable_midstep("Body::space");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(deltaTime == 0) return this;
	var cur = this.zpp_inner;
	cur.sweepTime = 0;
	cur.sweep_angvel = cur.angvel;
	cur.sweepIntegrate(deltaTime);
	cur.invalidate_pos();
	cur.invalidate_rot();
	cur.sweepTime = 0;
	return this;
};
nape.phys.Body.prototype.isStatic = function() {
	return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
};
nape.phys.Body.prototype.isDynamic = function() {
	return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
};
nape.phys.Body.prototype.isKinematic = function() {
	return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "shapes", {get: nape.phys.Body.prototype.get_shapes});
});nape.phys.Body.prototype.get_shapes = function() {
	return this.zpp_inner.wrap_shapes;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "compound", {get: nape.phys.Body.prototype.get_compound, set: nape.phys.Body.prototype.set_compound});
});nape.phys.Body.prototype.get_compound = function() {
	if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
};
nape.phys.Body.prototype.set_compound = function(compound) {
	if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
		if(compound != null) compound.zpp_inner.wrap_bodies.add(this);
	}
	if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "space", {get: nape.phys.Body.prototype.get_space, set: nape.phys.Body.prototype.set_space});
});nape.phys.Body.prototype.get_space = function() {
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
nape.phys.Body.prototype.set_space = function(space) {
	if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set";
	this.zpp_inner.immutable_midstep("Body::space");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
		if(space != null) space.zpp_inner.wrap_bodies.add(this);
	}
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "arbiters", {get: nape.phys.Body.prototype.get_arbiters});
});nape.phys.Body.prototype.get_arbiters = function() {
	if(this.zpp_inner.wrap_arbiters == null) this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	return this.zpp_inner.wrap_arbiters;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "isSleeping", {get: nape.phys.Body.prototype.get_isSleeping});
});nape.phys.Body.prototype.get_isSleeping = function() {
	if(this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
	return this.zpp_inner.component.sleeping;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "constraints", {get: nape.phys.Body.prototype.get_constraints});
});nape.phys.Body.prototype.get_constraints = function() {
	if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
	return this.zpp_inner.wrap_constraints;
};
nape.phys.Body.prototype.copy = function() {
	if(this.zpp_inner.world) throw "Error: Space::world cannot be copied";
	return this.zpp_inner.copy();
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "position", {get: nape.phys.Body.prototype.get_position, set: nape.phys.Body.prototype.set_position});
});nape.phys.Body.prototype.get_position = function() {
	if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
	return this.zpp_inner.wrap_pos;
};
nape.phys.Body.prototype.set_position = function(position) {
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: Body::" + "position" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this))).set(position);
	if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
	return this.zpp_inner.wrap_pos;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "velocity", {get: nape.phys.Body.prototype.get_velocity, set: nape.phys.Body.prototype.set_velocity});
});nape.phys.Body.prototype.get_velocity = function() {
	if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
	return this.zpp_inner.wrap_vel;
};
nape.phys.Body.prototype.set_velocity = function(velocity) {
	if(velocity != null && velocity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(velocity == null) throw "Error: Body::" + "velocity" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
		$r = $this.zpp_inner.wrap_vel;
		return $r;
	}(this))).set(velocity);
	if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
	return this.zpp_inner.wrap_vel;
};
nape.phys.Body.prototype.setVelocityFromTarget = function(targetPosition,targetRotation,deltaTime) {
	if(targetPosition != null && targetPosition.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(targetPosition == null) throw "Cannot set velocity for null target position";
	if(deltaTime == 0) throw "deltaTime cannot be 0 for setVelocityFromTarget";
	var idt = 1 / deltaTime;
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
		$r = $this.zpp_inner.wrap_vel;
		return $r;
	}(this))).set(targetPosition.sub((function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this)),true).muleq(idt));
	this.set_angularVel((targetRotation - this.zpp_inner.rot) * idt);
	if(targetPosition.zpp_inner.weak) {
		targetPosition.dispose();
		true;
	} else false;
	return this;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "kinematicVel", {get: nape.phys.Body.prototype.get_kinematicVel, set: nape.phys.Body.prototype.set_kinematicVel});
});nape.phys.Body.prototype.get_kinematicVel = function() {
	if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
	return this.zpp_inner.wrap_kinvel;
};
nape.phys.Body.prototype.set_kinematicVel = function(kinematicVel) {
	if(kinematicVel != null && kinematicVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(kinematicVel == null) throw "Error: Body::" + "kinematicVel" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
		$r = $this.zpp_inner.wrap_kinvel;
		return $r;
	}(this))).set(kinematicVel);
	if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
	return this.zpp_inner.wrap_kinvel;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "surfaceVel", {get: nape.phys.Body.prototype.get_surfaceVel, set: nape.phys.Body.prototype.set_surfaceVel});
});nape.phys.Body.prototype.get_surfaceVel = function() {
	if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
	return this.zpp_inner.wrap_svel;
};
nape.phys.Body.prototype.set_surfaceVel = function(surfaceVel) {
	if(surfaceVel != null && surfaceVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(surfaceVel == null) throw "Error: Body::" + "surfaceVel" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
		$r = $this.zpp_inner.wrap_svel;
		return $r;
	}(this))).set(surfaceVel);
	if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
	return this.zpp_inner.wrap_svel;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "force", {get: nape.phys.Body.prototype.get_force, set: nape.phys.Body.prototype.set_force});
});nape.phys.Body.prototype.get_force = function() {
	if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
	return this.zpp_inner.wrap_force;
};
nape.phys.Body.prototype.set_force = function(force) {
	if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(force == null) throw "Error: Body::" + "force" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
		$r = $this.zpp_inner.wrap_force;
		return $r;
	}(this))).set(force);
	if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
	return this.zpp_inner.wrap_force;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "constraintVelocity", {get: nape.phys.Body.prototype.get_constraintVelocity});
});nape.phys.Body.prototype.get_constraintVelocity = function() {
	if(this.zpp_inner.wrapcvel == null) this.zpp_inner.setup_cvel();
	return this.zpp_inner.wrapcvel;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "rotation", {get: nape.phys.Body.prototype.get_rotation, set: nape.phys.Body.prototype.set_rotation});
});nape.phys.Body.prototype.get_rotation = function() {
	return this.zpp_inner.rot;
};
nape.phys.Body.prototype.set_rotation = function(rotation) {
	this.zpp_inner.immutable_midstep("Body::rotation");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) throw "Error: Static objects cannot be rotated once inside a Space";
	if(this.zpp_inner.rot != rotation) {
		if(rotation != rotation) throw "Error: Body::rotation cannot be NaN";
		this.zpp_inner.rot = rotation;
		this.zpp_inner.invalidate_rot();
		this.zpp_inner.wake();
	}
	return this.zpp_inner.rot;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "angularVel", {get: nape.phys.Body.prototype.get_angularVel, set: nape.phys.Body.prototype.set_angularVel});
});nape.phys.Body.prototype.get_angularVel = function() {
	return this.zpp_inner.angvel;
};
nape.phys.Body.prototype.set_angularVel = function(angularVel) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.angvel != angularVel) {
		if(angularVel != angularVel) throw "Error: Body::angularVel cannot be NaN";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: A static object cannot be given a velocity";
		this.zpp_inner.angvel = angularVel;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.angvel;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "kinAngVel", {get: nape.phys.Body.prototype.get_kinAngVel, set: nape.phys.Body.prototype.set_kinAngVel});
});nape.phys.Body.prototype.get_kinAngVel = function() {
	return this.zpp_inner.kinangvel;
};
nape.phys.Body.prototype.set_kinAngVel = function(kinAngVel) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.kinangvel != kinAngVel) {
		if(kinAngVel != kinAngVel) throw "Error: Body::kinAngVel cannot be NaN";
		this.zpp_inner.kinangvel = kinAngVel;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.kinangvel;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "torque", {get: nape.phys.Body.prototype.get_torque, set: nape.phys.Body.prototype.set_torque});
});nape.phys.Body.prototype.get_torque = function() {
	return this.zpp_inner.torque;
};
nape.phys.Body.prototype.set_torque = function(torque) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(!(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Non-dynamic body cannot have torque applied.";
	if(torque != torque) throw "Error: Body::torque cannot be NaN";
	if(this.zpp_inner.torque != torque) {
		this.zpp_inner.torque = torque;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.torque;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "bounds", {get: nape.phys.Body.prototype.get_bounds});
});nape.phys.Body.prototype.get_bounds = function() {
	if(this.zpp_inner.world) throw "Error: Space::world has no bounds";
	return this.zpp_inner.aabb.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "allowMovement", {get: nape.phys.Body.prototype.get_allowMovement, set: nape.phys.Body.prototype.set_allowMovement});
});nape.phys.Body.prototype.get_allowMovement = function() {
	return !this.zpp_inner.nomove;
};
nape.phys.Body.prototype.set_allowMovement = function(allowMovement) {
	this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null?"null":"" + allowMovement));
	if(!this.zpp_inner.nomove != allowMovement) {
		this.zpp_inner.nomove = !allowMovement;
		this.zpp_inner.invalidate_mass();
	}
	return !this.zpp_inner.nomove;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "allowRotation", {get: nape.phys.Body.prototype.get_allowRotation, set: nape.phys.Body.prototype.set_allowRotation});
});nape.phys.Body.prototype.get_allowRotation = function() {
	return !this.zpp_inner.norotate;
};
nape.phys.Body.prototype.set_allowRotation = function(allowRotation) {
	this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null?"null":"" + allowRotation));
	if(!this.zpp_inner.norotate != allowRotation) {
		this.zpp_inner.norotate = !allowRotation;
		this.zpp_inner.invalidate_inertia();
	}
	return !this.zpp_inner.norotate;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "massMode", {get: nape.phys.Body.prototype.get_massMode, set: nape.phys.Body.prototype.set_massMode});
});nape.phys.Body.prototype.get_massMode = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.massMode];
};
nape.phys.Body.prototype.set_massMode = function(massMode) {
	this.zpp_inner.immutable_midstep("Body::massMode");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(massMode == null) throw "Error: cannot use null massMode";
	if(massMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this))) this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT; else this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
	this.zpp_inner.invalidate_mass();
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.massMode];
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "constraintMass", {get: nape.phys.Body.prototype.get_constraintMass});
});nape.phys.Body.prototype.get_constraintMass = function() {
	if(!this.zpp_inner.world) this.zpp_inner.validate_mass();
	return this.zpp_inner.smass;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "mass", {get: nape.phys.Body.prototype.get_mass, set: nape.phys.Body.prototype.set_mass});
});nape.phys.Body.prototype.get_mass = function() {
	if(this.zpp_inner.world) throw "Error: Space::world has no mass";
	this.zpp_inner.validate_mass();
	if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
	return this.zpp_inner.cmass;
};
nape.phys.Body.prototype.set_mass = function(mass) {
	this.zpp_inner.immutable_midstep("Body::mass");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(mass != mass) throw "Error: Mass cannot be NaN";
	if(mass <= 0) throw "Error: Mass must be strictly positive";
	if(mass >= Math.POSITIVE_INFINITY) throw "Error: Mass cannot be infinite, use allowMovement = false instead";
	this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
	this.zpp_inner.cmass = mass;
	this.zpp_inner.invalidate_mass();
	if(this.zpp_inner.world) throw "Error: Space::world has no mass";
	this.zpp_inner.validate_mass();
	if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
	return this.zpp_inner.cmass;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "gravMassMode", {get: nape.phys.Body.prototype.get_gravMassMode, set: nape.phys.Body.prototype.set_gravMassMode});
});nape.phys.Body.prototype.get_gravMassMode = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))][this.zpp_inner.massMode];
};
nape.phys.Body.prototype.set_gravMassMode = function(gravMassMode) {
	this.zpp_inner.immutable_midstep("Body::gravMassMode");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(gravMassMode == null) throw "Error: Cannot use null gravMassMode";
	if(gravMassMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))) this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED; else if(gravMassMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this))) this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT; else this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
	this.zpp_inner.invalidate_gravMass();
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))][this.zpp_inner.massMode];
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "gravMass", {get: nape.phys.Body.prototype.get_gravMass, set: nape.phys.Body.prototype.set_gravMass});
});nape.phys.Body.prototype.get_gravMass = function() {
	if(this.zpp_inner.world) throw "Error: Space::world has no gravMass";
	this.zpp_inner.validate_gravMass();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
	}
	return this.zpp_inner.gravMass;
};
nape.phys.Body.prototype.set_gravMass = function(gravMass) {
	this.zpp_inner.immutable_midstep("Body::gravMass");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(gravMass != gravMass) throw "Error: gravMass cannot be NaN";
	this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
	this.zpp_inner.gravMass = gravMass;
	this.zpp_inner.invalidate_gravMass();
	if(this.zpp_inner.world) throw "Error: Space::world has no gravMass";
	this.zpp_inner.validate_gravMass();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
	}
	return this.zpp_inner.gravMass;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "gravMassScale", {get: nape.phys.Body.prototype.get_gravMassScale, set: nape.phys.Body.prototype.set_gravMassScale});
});nape.phys.Body.prototype.get_gravMassScale = function() {
	this.zpp_inner.validate_gravMassScale();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
	}
	return this.zpp_inner.gravMassScale;
};
nape.phys.Body.prototype.set_gravMassScale = function(gravMassScale) {
	this.zpp_inner.immutable_midstep("Body::gravMassScale");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(gravMassScale != gravMassScale) throw "Error: gravMassScale cannot be NaN";
	this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED;
	this.zpp_inner.gravMassScale = gravMassScale;
	this.zpp_inner.invalidate_gravMassScale();
	this.zpp_inner.validate_gravMassScale();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
	}
	return this.zpp_inner.gravMassScale;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "inertiaMode", {get: nape.phys.Body.prototype.get_inertiaMode, set: nape.phys.Body.prototype.set_inertiaMode});
});nape.phys.Body.prototype.get_inertiaMode = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.inertiaMode];
};
nape.phys.Body.prototype.set_inertiaMode = function(inertiaMode) {
	this.zpp_inner.immutable_midstep("Body::inertiaMode");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(inertiaMode == null) throw "Error: Cannot use null InertiaMode";
	if(inertiaMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))) this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED; else this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
	this.zpp_inner.invalidate_inertia();
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.inertiaMode];
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "constraintInertia", {get: nape.phys.Body.prototype.get_constraintInertia});
});nape.phys.Body.prototype.get_constraintInertia = function() {
	if(!this.zpp_inner.world) this.zpp_inner.validate_inertia();
	return this.zpp_inner.sinertia;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "inertia", {get: nape.phys.Body.prototype.get_inertia, set: nape.phys.Body.prototype.set_inertia});
});nape.phys.Body.prototype.get_inertia = function() {
	if(this.zpp_inner.world) throw "Error: Space::world has no inertia";
	this.zpp_inner.validate_inertia();
	if(this.zpp_inner.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
	return this.zpp_inner.cinertia;
};
nape.phys.Body.prototype.set_inertia = function(inertia) {
	this.zpp_inner.immutable_midstep("Body::inertia");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(inertia != inertia) throw "Error: Inertia cannot be NaN";
	if(inertia <= 0) throw "Error: Inertia must be strictly positive";
	if(inertia >= Math.POSITIVE_INFINITY) throw "Error: Inertia cannot be infinite, use allowRotation = false instead";
	this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED;
	this.zpp_inner.cinertia = inertia;
	this.zpp_inner.invalidate_inertia();
	if(this.zpp_inner.world) throw "Error: Space::world has no inertia";
	this.zpp_inner.validate_inertia();
	if(this.zpp_inner.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
	return this.zpp_inner.cinertia;
};
nape.phys.Body.prototype.connectedBodies = function(depth,output) {
	if(depth == null) depth = -1;
	return this.zpp_inner.connectedBodies(depth,output);
};
nape.phys.Body.prototype.interactingBodies = function(type,depth,output) {
	if(depth == null) depth = -1;
	var arbiter_type;
	if(type == null) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.COL | zpp_nape.dynamics.ZPP_Arbiter.SENSOR | zpp_nape.dynamics.ZPP_Arbiter.FLUID; else if(type == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
		return $r;
	}(this))) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.COL; else if(type == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
		return $r;
	}(this))) arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR; else arbiter_type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
};
nape.phys.Body.prototype.crushFactor = function() {
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) == null) throw "Error: Makes no sense to see how much an object not taking part in a simulation is being crushed";
	var msum = 0.0;
	var jsum = nape.geom.Vec2.get(null,null,null);
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var arb;
		_g.zpp_critical = false;
		arb = _g.zpp_inner.at(_g.zpp_i++);
		var imp3 = arb.totalImpulse(this);
		var imp = imp3.xy();
		jsum.addeq(imp);
		if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		msum += Math.sqrt((function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)));
		imp.dispose();
		imp3.dispose();
	}
	var _g1 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get($this.zpp_inner.constraints,true);
		$r = $this.zpp_inner.wrap_constraints;
		return $r;
	}(this))).iterator();
	while(_g1.hasNext()) {
		var con;
		_g1.zpp_critical = false;
		con = _g1.zpp_inner.at(_g1.zpp_i++);
		var imp31 = con.bodyImpulse(this);
		var imp1 = imp31.xy();
		jsum.addeq(imp1);
		if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		msum += Math.sqrt((function($this) {
			var $r;
			if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp1.zpp_inner.validate();
			$r = imp1.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp1.zpp_inner.validate();
			$r = imp1.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp1.zpp_inner.validate();
			$r = imp1.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			imp1.zpp_inner.validate();
			$r = imp1.zpp_inner.y;
			return $r;
		}(this)));
		imp1.dispose();
		imp31.dispose();
	}
	var ret;
	ret = (msum - (function($this) {
		var $r;
		if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this))) / ((function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no mass";
		$this.zpp_inner.validate_mass();
		if($this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && $this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
		$r = $this.zpp_inner.cmass;
		return $r;
	}(this)) * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
	jsum.dispose();
	return ret;
};
nape.phys.Body.prototype.localPointToWorld = function(point,weak) {
	if(weak == null) weak = false;
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot transform null Vec2";
	this.zpp_inner.validate_axis();
	var tempx = 0.0;
	var tempy = 0.0;
	tempx = this.zpp_inner.axisy * (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) - this.zpp_inner.axisx * (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this));
	tempy = (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisx + (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisy;
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return nape.geom.Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
};
nape.phys.Body.prototype.worldPointToLocal = function(point,weak) {
	if(weak == null) weak = false;
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot transform null Vec2";
	this.zpp_inner.validate_axis();
	var tempx = 0.0;
	var tempy = 0.0;
	var pointx = 0.0;
	var pointy = 0.0;
	pointx = (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)) - this.zpp_inner.posx;
	pointy = (function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)) - this.zpp_inner.posy;
	tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
	tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return nape.geom.Vec2.get(tempx,tempy,weak);
};
nape.phys.Body.prototype.localVectorToWorld = function(vector,weak) {
	if(weak == null) weak = false;
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot transform null Vec2";
	this.zpp_inner.validate_axis();
	var tempx = 0.0;
	var tempy = 0.0;
	tempx = this.zpp_inner.axisy * (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) - this.zpp_inner.axisx * (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this));
	tempy = (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisx + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisy;
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return nape.geom.Vec2.get(tempx,tempy,weak);
};
nape.phys.Body.prototype.worldVectorToLocal = function(vector,weak) {
	if(weak == null) weak = false;
	if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(vector == null) throw "Error: Cannot transform null Vec2";
	this.zpp_inner.validate_axis();
	var tempx = 0.0;
	var tempy = 0.0;
	tempx = (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisy + (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisx;
	tempy = (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisy - (function($this) {
		var $r;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		vector.zpp_inner.validate();
		$r = vector.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisx;
	if(vector.zpp_inner.weak) {
		vector.dispose();
		true;
	} else false;
	return nape.geom.Vec2.get(tempx,tempy,weak);
};
nape.phys.Body.prototype.applyImpulse = function(impulse,pos,sleepable) {
	if(sleepable == null) sleepable = false;
	if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(impulse == null) throw "Error: Cannot apply null impulse to Body";
	if(sleepable && (function($this) {
		var $r;
		if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
		$r = $this.zpp_inner.component.sleeping;
		return $r;
	}(this))) {
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
			true;
		} else false;
		if(pos != null) {
			if(pos.zpp_inner.weak) {
				pos.dispose();
				true;
			} else false;
		}
		return this;
	}
	this.zpp_inner.validate_mass();
	var t = this.zpp_inner.imass;
	this.zpp_inner.velx += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.vely += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		var rx = 0.0;
		var ry = 0.0;
		rx = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		ry = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += ((function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * rx - (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * ry) * this.zpp_inner.iinertia;
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(!sleepable) {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
	}
	if(impulse.zpp_inner.weak) {
		impulse.dispose();
		true;
	} else false;
	return this;
};
nape.phys.Body.prototype.applyAngularImpulse = function(impulse,sleepable) {
	if(sleepable == null) sleepable = false;
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(sleepable && (function($this) {
		var $r;
		if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
		$r = $this.zpp_inner.component.sleeping;
		return $r;
	}(this))) return this;
	this.zpp_inner.validate_inertia();
	this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
	if(!sleepable) {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
	}
	return this;
};
nape.phys.Body.prototype.translateShapes = function(translation) {
	this.zpp_inner.immutable_midstep("Body::translateShapes()");
	if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(translation == null) throw "Error: Cannot displace by null Vec2";
	var weak = translation.zpp_inner.weak;
	translation.zpp_inner.weak = false;
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.translate(translation);
		cx_ite = cx_ite.next;
	}
	translation.zpp_inner.weak = weak;
	if(translation.zpp_inner.weak) {
		translation.dispose();
		true;
	} else false;
	return this;
};
nape.phys.Body.prototype.rotateShapes = function(angle) {
	this.zpp_inner.immutable_midstep("Body::rotateShapes()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.rotate(angle);
		cx_ite = cx_ite.next;
	}
	return this;
};
nape.phys.Body.prototype.scaleShapes = function(scaleX,scaleY) {
	this.zpp_inner.immutable_midstep("Body::scaleShapes()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.scale(scaleX,scaleY);
		cx_ite = cx_ite.next;
	}
	return this;
};
nape.phys.Body.prototype.transformShapes = function(matrix) {
	this.zpp_inner.immutable_midstep("Body::transformShapes()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.transform(matrix);
		cx_ite = cx_ite.next;
	}
	return this;
};
nape.phys.Body.prototype.align = function() {
	this.zpp_inner.immutable_midstep("Body::align()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.shapes.head == null) throw "Error: Cannot align empty Body";
	this.zpp_inner.validate_localCOM();
	var dx = nape.geom.Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
	this.translateShapes(dx);
	var dx2 = this.localVectorToWorld(dx);
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this))).subeq(dx2);
	if(this.zpp_inner.pre_posx < Math.POSITIVE_INFINITY) {
		var t = 1.0;
		this.zpp_inner.pre_posx -= (function($this) {
			var $r;
			if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			dx2.zpp_inner.validate();
			$r = dx2.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.pre_posy -= (function($this) {
			var $r;
			if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			dx2.zpp_inner.validate();
			$r = dx2.zpp_inner.y;
			return $r;
		}(this)) * t;
	}
	dx.dispose();
	dx2.dispose();
	return this;
};
nape.phys.Body.prototype.rotate = function(centre,angle) {
	if(centre != null && centre.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(centre == null) throw "Error: Cannot rotate about a null Vec2";
	if(angle != angle) throw "Error: Cannot rotate by NaN radians";
	var weak = centre.zpp_inner.weak;
	centre.zpp_inner.weak = false;
	var del = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this))).sub(centre);
	del.rotate(angle);
	this.set_position(centre.add(del,true));
	del.dispose();
	var _g = this;
	_g.set_rotation(_g.zpp_inner.rot + angle);
	centre.zpp_inner.weak = weak;
	if(centre.zpp_inner.weak) {
		centre.dispose();
		true;
	} else false;
	return this;
};
nape.phys.Body.prototype.setShapeMaterials = function(material) {
	this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.set_material(material);
		cx_ite = cx_ite.next;
	}
	return this;
};
nape.phys.Body.prototype.setShapeFilters = function(filter) {
	this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.set_filter(filter);
		cx_ite = cx_ite.next;
	}
	return this;
};
nape.phys.Body.prototype.setShapeFluidProperties = function(fluidProperties) {
	this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.set_fluidProperties(fluidProperties);
		cx_ite = cx_ite.next;
	}
	return this;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "localCOM", {get: nape.phys.Body.prototype.get_localCOM});
});nape.phys.Body.prototype.get_localCOM = function() {
	if(this.zpp_inner.world) throw "Error: Space::world has no " + "localCOM";
	if(this.zpp_inner.wrap_localCOM == null) {
		this.zpp_inner.wrap_localCOM = nape.geom.Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy,null);
		this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
		this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
		this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
	}
	return this.zpp_inner.wrap_localCOM;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Body.prototype, "worldCOM", {get: nape.phys.Body.prototype.get_worldCOM});
});nape.phys.Body.prototype.get_worldCOM = function() {
	if(this.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
	if(this.zpp_inner.wrap_worldCOM == null) {
		this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
		this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
	}
	return this.zpp_inner.wrap_worldCOM;
};
nape.phys.Body.prototype.normalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.tangentImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().get_collisionArbiter().tangentImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.totalContactsImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().get_collisionArbiter().totalImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.rollingImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var ret = 0.0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		ret += arb.wrapper().get_collisionArbiter().rollingImpulse(this,freshOnly);
	}
	return ret;
};
nape.phys.Body.prototype.buoyancyImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().get_fluidArbiter().buoyancyImpulse(this);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.dragImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().get_fluidArbiter().dragImpulse(this);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.totalFluidImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().get_fluidArbiter().totalImpulse(this);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.constraintsImpulse = function() {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var cx_ite = this.zpp_inner.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		var imp = con.outer.bodyImpulse(this);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
		cx_ite = cx_ite.next;
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var _g = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var oarb;
		_g.zpp_critical = false;
		oarb = _g.zpp_inner.at(_g.zpp_i++);
		var arb = oarb.zpp_inner;
		if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().totalImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.x;
			return $r;
		}(this)) * t1;
		rety += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.y;
			return $r;
		}(this)) * t1;
		retz += (function($this) {
			var $r;
			if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			imp.zpp_inner.validate();
			$r = imp.zpp_inner.z;
			return $r;
		}(this)) * t;
		imp.dispose();
	}
	var cx_ite = this.zpp_inner.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.active) {
			var imp1 = con.outer.bodyImpulse(this);
			var t2 = 1;
			var t3 = t2;
			retx += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * t3;
			rety += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * t3;
			retz += (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.z;
				return $r;
			}(this)) * t2;
			imp1.dispose();
		}
		cx_ite = cx_ite.next;
	}
	return nape.geom.Vec3.get(retx,rety,retz);
};
nape.phys.Body.prototype.contains = function(point) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot check containment of null point";
	var wasWeak = point.zpp_inner.weak;
	point.zpp_inner.weak = false;
	var retvar;
	retvar = false;
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.outer.contains(point)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	point.zpp_inner.weak = wasWeak;
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return retvar;
};
nape.phys.Body.prototype.toString = function() {
	return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC?"dynamic":this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
};
nape.phys.Body.prototype.__class__ = nape.phys.Body;
nape.phys.BodyIterator = $hxClasses['nape.phys.BodyIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_BodyList.internal) throw "Error: Cannot instantiate " + "Body" + "Iterator derp!";
};
nape.phys.BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape.phys.BodyIterator.get = function(list) {
	var ret;
	if(nape.phys.BodyIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_BodyList.internal = true;
		var ret1 = new nape.phys.BodyIterator();
		zpp_nape.util.ZPP_BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.BodyIterator.prototype.zpp_inner = null;
nape.phys.BodyIterator.prototype.zpp_i = null;
nape.phys.BodyIterator.prototype.zpp_critical = null;
nape.phys.BodyIterator.prototype.zpp_next = null;
nape.phys.BodyIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.phys.BodyIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.phys.BodyIterator.prototype.__class__ = nape.phys.BodyIterator;
nape.phys.BodyList = $hxClasses['nape.phys.BodyList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_BodyList();
	this.zpp_inner.outer = this;
};
nape.phys.BodyList.__name__ = ["nape","phys","BodyList"];
nape.phys.BodyList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.BodyList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.BodyList.prototype, "length", {get: nape.phys.BodyList.prototype.get_length});
});nape.phys.BodyList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.phys.BodyList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.phys.BodyList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.phys.BodyList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.phys.BodyList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.phys.BodyList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.phys.BodyList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.phys.BodyList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.phys.BodyList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.phys.BodyList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.phys.BodyList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.phys.BodyList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.phys.BodyIterator.get(this);
};
nape.phys.BodyList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.phys.BodyList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.phys.BodyIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Body" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.phys.BodyList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.phys.BodyIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.phys.BodyList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.phys.BodyIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.phys.BodyList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.phys.BodyIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.phys.BodyList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.phys.BodyList.prototype.__class__ = nape.phys.BodyList;
nape.phys.BodyType = $hxClasses['nape.phys.BodyType'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "BodyType" + " derp!";
};
nape.phys.BodyType.__name__ = ["nape","phys","BodyType"];
nape.phys.BodyType.STATIC = null;
nape.phys.BodyType.get_STATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_STATIC;
};
nape.phys.BodyType.DYNAMIC = null;
nape.phys.BodyType.get_DYNAMIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
};
nape.phys.BodyType.KINEMATIC = null;
nape.phys.BodyType.get_KINEMATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
};
nape.phys.BodyType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this))) return "STATIC"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this))) return "DYNAMIC"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
		return $r;
	}(this))) return "KINEMATIC"; else return "";
};
nape.phys.BodyType.prototype.__class__ = nape.phys.BodyType;
nape.phys.Compound = $hxClasses['nape.phys.Compound'] = function() {
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	this.zpp_inner = new zpp_nape.phys.ZPP_Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND.zpp_inner);
};
nape.phys.Compound.__name__ = ["nape","phys","Compound"];
nape.phys.Compound.__super__ = nape.phys.Interactor;
for(var k in nape.phys.Interactor.prototype ) nape.phys.Compound.prototype[k] = nape.phys.Interactor.prototype[k];
nape.phys.Compound.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.Compound.prototype, "bodies", {get: nape.phys.Compound.prototype.get_bodies});
});nape.phys.Compound.prototype.get_bodies = function() {
	return this.zpp_inner.wrap_bodies;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Compound.prototype, "constraints", {get: nape.phys.Compound.prototype.get_constraints});
});nape.phys.Compound.prototype.get_constraints = function() {
	return this.zpp_inner.wrap_constraints;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Compound.prototype, "compounds", {get: nape.phys.Compound.prototype.get_compounds});
});nape.phys.Compound.prototype.get_compounds = function() {
	return this.zpp_inner.wrap_compounds;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Compound.prototype, "compound", {get: nape.phys.Compound.prototype.get_compound, set: nape.phys.Compound.prototype.set_compound});
});nape.phys.Compound.prototype.get_compound = function() {
	if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
};
nape.phys.Compound.prototype.set_compound = function(compound) {
	this.zpp_inner.immutable_midstep("Compound::compound");
	if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
		if(compound != null) compound.zpp_inner.wrap_compounds.add(this);
	}
	if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Compound.prototype, "space", {get: nape.phys.Compound.prototype.get_space, set: nape.phys.Compound.prototype.set_space});
});nape.phys.Compound.prototype.get_space = function() {
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
nape.phys.Compound.prototype.set_space = function(space) {
	if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";
	this.zpp_inner.immutable_midstep("Compound::space");
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
		if(space != null) space.zpp_inner.wrap_compounds.add(this);
	}
	if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
};
nape.phys.Compound.prototype.toString = function() {
	return "Compound" + this.zpp_inner_i.id;
};
nape.phys.Compound.prototype.copy = function() {
	return this.zpp_inner.copy();
};
nape.phys.Compound.prototype.breakApart = function() {
	this.zpp_inner.breakApart();
};
nape.phys.Compound.prototype.visitBodies = function(lambda) {
	if(lambda == null) throw "Error: lambda cannot be null for Compound::visitBodies";
	var _g = this.zpp_inner.wrap_bodies.iterator();
	while(_g.hasNext()) {
		var b;
		_g.zpp_critical = false;
		b = _g.zpp_inner.at(_g.zpp_i++);
		lambda(b);
	}
	var _g1 = this.zpp_inner.wrap_compounds.iterator();
	while(_g1.hasNext()) {
		var c;
		_g1.zpp_critical = false;
		c = _g1.zpp_inner.at(_g1.zpp_i++);
		c.visitBodies(lambda);
	}
};
nape.phys.Compound.prototype.visitConstraints = function(lambda) {
	if(lambda == null) throw "Error: lambda cannot be null for Compound::visitConstraints";
	var _g = this.zpp_inner.wrap_constraints.iterator();
	while(_g.hasNext()) {
		var c;
		_g.zpp_critical = false;
		c = _g.zpp_inner.at(_g.zpp_i++);
		lambda(c);
	}
	var _g1 = this.zpp_inner.wrap_compounds.iterator();
	while(_g1.hasNext()) {
		var c1;
		_g1.zpp_critical = false;
		c1 = _g1.zpp_inner.at(_g1.zpp_i++);
		c1.visitConstraints(lambda);
	}
};
nape.phys.Compound.prototype.visitCompounds = function(lambda) {
	if(lambda == null) throw "Error: lambda cannot be null for Compound::visitConstraints";
	var _g = this.zpp_inner.wrap_compounds.iterator();
	while(_g.hasNext()) {
		var c;
		_g.zpp_critical = false;
		c = _g.zpp_inner.at(_g.zpp_i++);
		lambda(c);
		c.visitCompounds(lambda);
	}
};
nape.phys.Compound.prototype.COM = function(weak) {
	if(weak == null) weak = false;
	var ret = nape.geom.Vec2.get(0,0,weak);
	var total = 0.0;
	this.visitBodies(function(b) {
		if(!b.zpp_inner.wrap_shapes.empty()) {
			ret.addeq(((function($this) {
				var $r;
				if(b.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
				if(b.zpp_inner.wrap_worldCOM == null) {
					b.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(b.zpp_inner.worldCOMx,b.zpp_inner.worldCOMy,null);
					b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
					b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
					b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
				}
				$r = b.zpp_inner.wrap_worldCOM;
				return $r;
			}(this))).mul((function($this) {
				var $r;
				if(b.zpp_inner.world) throw "Error: Space::world has no mass";
				b.zpp_inner.validate_mass();
				if(b.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
				$r = b.zpp_inner.cmass;
				return $r;
			}(this)),true));
			if(b.zpp_inner.world) throw "Error: Space::world has no mass";
			b.zpp_inner.validate_mass();
			if(b.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
			total += b.zpp_inner.cmass;
		}
	});
	if(total == 0.0) throw "Error: COM of an empty Compound is undefined silly";
	ret.muleq(1 / total);
	return ret;
};
nape.phys.Compound.prototype.translate = function(translation) {
	if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(translation == null) throw "Error: Cannot translate by null Vec2";
	var weak = translation.zpp_inner.weak;
	translation.zpp_inner.weak = false;
	this.visitBodies(function(b) {
		((function($this) {
			var $r;
			if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
			$r = b.zpp_inner.wrap_pos;
			return $r;
		}(this))).addeq(translation);
	});
	translation.zpp_inner.weak = weak;
	if(translation.zpp_inner.weak) {
		translation.dispose();
		true;
	} else false;
	return this;
};
nape.phys.Compound.prototype.rotate = function(centre,angle) {
	if(centre != null && centre.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(centre == null) throw "Error: Cannot rotate about a null Vec2";
	if(angle != angle) throw "Error: Cannot rotate by NaN radians";
	var weak = centre.zpp_inner.weak;
	centre.zpp_inner.weak = false;
	this.visitBodies(function(b) {
		b.rotate(centre,angle);
	});
	centre.zpp_inner.weak = weak;
	if(centre.zpp_inner.weak) {
		centre.dispose();
		true;
	} else false;
	return this;
};
nape.phys.Compound.prototype.__class__ = nape.phys.Compound;
nape.phys.CompoundIterator = $hxClasses['nape.phys.CompoundIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_CompoundList.internal) throw "Error: Cannot instantiate " + "Compound" + "Iterator derp!";
};
nape.phys.CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape.phys.CompoundIterator.get = function(list) {
	var ret;
	if(nape.phys.CompoundIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_CompoundList.internal = true;
		var ret1 = new nape.phys.CompoundIterator();
		zpp_nape.util.ZPP_CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.CompoundIterator.zpp_pool;
		nape.phys.CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.CompoundIterator.prototype.zpp_inner = null;
nape.phys.CompoundIterator.prototype.zpp_i = null;
nape.phys.CompoundIterator.prototype.zpp_critical = null;
nape.phys.CompoundIterator.prototype.zpp_next = null;
nape.phys.CompoundIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.phys.CompoundIterator.zpp_pool;
		nape.phys.CompoundIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.phys.CompoundIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.phys.CompoundIterator.prototype.__class__ = nape.phys.CompoundIterator;
nape.phys.CompoundList = $hxClasses['nape.phys.CompoundList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CompoundList();
	this.zpp_inner.outer = this;
};
nape.phys.CompoundList.__name__ = ["nape","phys","CompoundList"];
nape.phys.CompoundList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.CompoundList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.CompoundList.prototype, "length", {get: nape.phys.CompoundList.prototype.get_length});
});nape.phys.CompoundList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.phys.CompoundList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.phys.CompoundList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.phys.CompoundList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.phys.CompoundList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.phys.CompoundList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.phys.CompoundList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.phys.CompoundList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.phys.CompoundList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.phys.CompoundList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.phys.CompoundList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.phys.CompoundList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.phys.CompoundIterator.get(this);
};
nape.phys.CompoundList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.phys.CompoundList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.phys.CompoundIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Compound" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.phys.CompoundList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.phys.CompoundIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.phys.CompoundList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.phys.CompoundIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.phys.CompoundList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.phys.CompoundIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.phys.CompoundIterator.zpp_pool;
		nape.phys.CompoundIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.phys.CompoundList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.phys.CompoundList.prototype.__class__ = nape.phys.CompoundList;
nape.phys.FluidProperties = $hxClasses['nape.phys.FluidProperties'] = function(density,viscosity) {
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_FluidProperties(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * 1000;
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
		if(viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity;
};
nape.phys.FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape.phys.FluidProperties.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.FluidProperties.prototype, "userData", {get: nape.phys.FluidProperties.prototype.get_userData});
});nape.phys.FluidProperties.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.FluidProperties.prototype, "shapes", {get: nape.phys.FluidProperties.prototype.get_shapes});
});nape.phys.FluidProperties.prototype.get_shapes = function() {
	if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
	return this.zpp_inner.wrap_shapes;
};
nape.phys.FluidProperties.prototype.copy = function() {
	var ret = new nape.phys.FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
	if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
	ret.set_gravity(this.zpp_inner.wrap_gravity);
	return ret;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.FluidProperties.prototype, "density", {get: nape.phys.FluidProperties.prototype.get_density, set: nape.phys.FluidProperties.prototype.set_density});
});nape.phys.FluidProperties.prototype.get_density = function() {
	return this.zpp_inner.density * 1000;
};
nape.phys.FluidProperties.prototype.set_density = function(density) {
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.density * 1000;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.FluidProperties.prototype, "viscosity", {get: nape.phys.FluidProperties.prototype.get_viscosity, set: nape.phys.FluidProperties.prototype.set_viscosity});
});nape.phys.FluidProperties.prototype.get_viscosity = function() {
	return this.zpp_inner.viscosity;
};
nape.phys.FluidProperties.prototype.set_viscosity = function(viscosity) {
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
		if(viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.viscosity;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.FluidProperties.prototype, "gravity", {get: nape.phys.FluidProperties.prototype.get_gravity, set: nape.phys.FluidProperties.prototype.set_gravity});
});nape.phys.FluidProperties.prototype.get_gravity = function() {
	return this.zpp_inner.wrap_gravity;
};
nape.phys.FluidProperties.prototype.set_gravity = function(gravity) {
	if(gravity == null) {
		if(this.zpp_inner.wrap_gravity != null) {
			this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
			this.zpp_inner.wrap_gravity.dispose();
			this.zpp_inner.wrap_gravity = null;
		}
	} else {
		if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		this.zpp_inner.wrap_gravity.set(gravity);
	}
	return this.zpp_inner.wrap_gravity;
};
nape.phys.FluidProperties.prototype.toString = function() {
	return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
};
nape.phys.FluidProperties.prototype.__class__ = nape.phys.FluidProperties;
nape.phys.GravMassMode = $hxClasses['nape.phys.GravMassMode'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "GravMassMode" + " derp!";
};
nape.phys.GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape.phys.GravMassMode.DEFAULT = null;
nape.phys.GravMassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
};
nape.phys.GravMassMode.FIXED = null;
nape.phys.GravMassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
};
nape.phys.GravMassMode.SCALED = null;
nape.phys.GravMassMode.get_SCALED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
};
nape.phys.GravMassMode.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this))) return "DEFAULT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
		return $r;
	}(this))) return "FIXED"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))) return "SCALED"; else return "";
};
nape.phys.GravMassMode.prototype.__class__ = nape.phys.GravMassMode;
nape.phys.InertiaMode = $hxClasses['nape.phys.InertiaMode'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InertiaMode" + " derp!";
};
nape.phys.InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape.phys.InertiaMode.DEFAULT = null;
nape.phys.InertiaMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
};
nape.phys.InertiaMode.FIXED = null;
nape.phys.InertiaMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
};
nape.phys.InertiaMode.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
		return $r;
	}(this))) return "DEFAULT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))) return "FIXED"; else return "";
};
nape.phys.InertiaMode.prototype.__class__ = nape.phys.InertiaMode;
nape.phys.InteractorIterator = $hxClasses['nape.phys.InteractorIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_InteractorList.internal) throw "Error: Cannot instantiate " + "Interactor" + "Iterator derp!";
};
nape.phys.InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape.phys.InteractorIterator.get = function(list) {
	var ret;
	if(nape.phys.InteractorIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_InteractorList.internal = true;
		var ret1 = new nape.phys.InteractorIterator();
		zpp_nape.util.ZPP_InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape.phys.InteractorIterator.zpp_pool;
		nape.phys.InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.phys.InteractorIterator.prototype.zpp_inner = null;
nape.phys.InteractorIterator.prototype.zpp_i = null;
nape.phys.InteractorIterator.prototype.zpp_critical = null;
nape.phys.InteractorIterator.prototype.zpp_next = null;
nape.phys.InteractorIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.phys.InteractorIterator.zpp_pool;
		nape.phys.InteractorIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.phys.InteractorIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.phys.InteractorIterator.prototype.__class__ = nape.phys.InteractorIterator;
nape.phys.InteractorList = $hxClasses['nape.phys.InteractorList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractorList();
	this.zpp_inner.outer = this;
};
nape.phys.InteractorList.__name__ = ["nape","phys","InteractorList"];
nape.phys.InteractorList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.phys.InteractorList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.InteractorList.prototype, "length", {get: nape.phys.InteractorList.prototype.get_length});
});nape.phys.InteractorList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.phys.InteractorList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner_i);
};
nape.phys.InteractorList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer_i;
};
nape.phys.InteractorList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner_i); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.phys.InteractorList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
		} else this.zpp_inner.inner.add(obj.zpp_inner_i);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.phys.InteractorList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer_i;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer_i;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer_i;
	return retx2;
};
nape.phys.InteractorList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer_i;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer_i;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer_i;
	return retx2;
};
nape.phys.InteractorList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.phys.InteractorList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner_i) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner_i);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.phys.InteractorList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.phys.InteractorList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.phys.InteractorList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.phys.InteractorIterator.get(this);
};
nape.phys.InteractorList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.phys.InteractorList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.phys.InteractorIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Interactor" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.phys.InteractorList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.phys.InteractorIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.phys.InteractorList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.phys.InteractorIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.phys.InteractorList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.phys.InteractorIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.phys.InteractorIterator.zpp_pool;
		nape.phys.InteractorIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.phys.InteractorList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.phys.InteractorList.prototype.__class__ = nape.phys.InteractorList;
nape.phys.MassMode = $hxClasses['nape.phys.MassMode'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "MassMode" + " derp!";
};
nape.phys.MassMode.__name__ = ["nape","phys","MassMode"];
nape.phys.MassMode.DEFAULT = null;
nape.phys.MassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
};
nape.phys.MassMode.FIXED = null;
nape.phys.MassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_FIXED;
};
nape.phys.MassMode.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this))) return "DEFAULT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
		return $r;
	}(this))) return "FIXED"; else return "";
};
nape.phys.MassMode.prototype.__class__ = nape.phys.MassMode;
nape.phys.Material = $hxClasses['nape.phys.Material'] = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) rollingFriction = 0.001;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_Material(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.elasticity;
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
		if(dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " cannot be negative";
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.dynamicFriction;
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
		if(staticFriction < 0) throw "Error: Material::" + "staticFriction" + " cannot be negative";
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.staticFriction;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
		if(density < 0) throw "Error: Material::density must be positive";
		if(density < 0) throw "Error: Material::" + "density" + " cannot be negative";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
	}
	this.zpp_inner.density * 1000;
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
		if(rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " cannot be negative";
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.rollingFriction;
};
nape.phys.Material.__name__ = ["nape","phys","Material"];
nape.phys.Material.wood = function() {
	return new nape.phys.Material(0.4,0.2,0.38,0.7,0.005);
};
nape.phys.Material.steel = function() {
	return new nape.phys.Material(0.2,0.57,0.74,7.8,0.001);
};
nape.phys.Material.ice = function() {
	return new nape.phys.Material(0.3,0.03,0.1,0.9,0.0001);
};
nape.phys.Material.rubber = function() {
	return new nape.phys.Material(0.8,1.0,1.4,1.5,0.01);
};
nape.phys.Material.glass = function() {
	return new nape.phys.Material(0.4,0.4,0.94,2.6,0.002);
};
nape.phys.Material.sand = function() {
	return new nape.phys.Material(-1.0,0.45,0.6,1.6,16.0);
};
nape.phys.Material.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "userData", {get: nape.phys.Material.prototype.get_userData});
});nape.phys.Material.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "shapes", {get: nape.phys.Material.prototype.get_shapes});
});nape.phys.Material.prototype.get_shapes = function() {
	if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
	return this.zpp_inner.wrap_shapes;
};
nape.phys.Material.prototype.copy = function() {
	var ret = new nape.phys.Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
	if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
	return ret;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "elasticity", {get: nape.phys.Material.prototype.get_elasticity, set: nape.phys.Material.prototype.set_elasticity});
});nape.phys.Material.prototype.get_elasticity = function() {
	return this.zpp_inner.elasticity;
};
nape.phys.Material.prototype.set_elasticity = function(elasticity) {
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.elasticity;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "dynamicFriction", {get: nape.phys.Material.prototype.get_dynamicFriction, set: nape.phys.Material.prototype.set_dynamicFriction});
});nape.phys.Material.prototype.get_dynamicFriction = function() {
	return this.zpp_inner.dynamicFriction;
};
nape.phys.Material.prototype.set_dynamicFriction = function(dynamicFriction) {
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
		if(dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " cannot be negative";
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.dynamicFriction;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "staticFriction", {get: nape.phys.Material.prototype.get_staticFriction, set: nape.phys.Material.prototype.set_staticFriction});
});nape.phys.Material.prototype.get_staticFriction = function() {
	return this.zpp_inner.staticFriction;
};
nape.phys.Material.prototype.set_staticFriction = function(staticFriction) {
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
		if(staticFriction < 0) throw "Error: Material::" + "staticFriction" + " cannot be negative";
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.staticFriction;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "density", {get: nape.phys.Material.prototype.get_density, set: nape.phys.Material.prototype.set_density});
});nape.phys.Material.prototype.get_density = function() {
	return this.zpp_inner.density * 1000;
};
nape.phys.Material.prototype.set_density = function(density) {
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
		if(density < 0) throw "Error: Material::density must be positive";
		if(density < 0) throw "Error: Material::" + "density" + " cannot be negative";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
	}
	return this.zpp_inner.density * 1000;
};
rgaInits.push(function() {
Object.defineProperty(nape.phys.Material.prototype, "rollingFriction", {get: nape.phys.Material.prototype.get_rollingFriction, set: nape.phys.Material.prototype.set_rollingFriction});
});nape.phys.Material.prototype.get_rollingFriction = function() {
	return this.zpp_inner.rollingFriction;
};
nape.phys.Material.prototype.set_rollingFriction = function(rollingFriction) {
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
		if(rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " cannot be negative";
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.rollingFriction;
};
nape.phys.Material.prototype.toString = function() {
	return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
};
nape.phys.Material.prototype.__class__ = nape.phys.Material;
if(!nape.shape) nape.shape = {};
nape.shape.Shape = $hxClasses['nape.shape.Shape'] = function() {
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	throw "Error: Shape cannot be instantiated derp!";
};
nape.shape.Shape.__name__ = ["nape","shape","Shape"];
nape.shape.Shape.__super__ = nape.phys.Interactor;
for(var k in nape.phys.Interactor.prototype ) nape.shape.Shape.prototype[k] = nape.phys.Interactor.prototype[k];
nape.shape.Shape.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "type", {get: nape.shape.Shape.prototype.get_type});
});nape.shape.Shape.prototype.get_type = function() {
	return zpp_nape.shape.ZPP_Shape.types[this.zpp_inner.type];
};
nape.shape.Shape.prototype.isCircle = function() {
	return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
};
nape.shape.Shape.prototype.isPolygon = function() {
	return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "body", {get: nape.shape.Shape.prototype.get_body, set: nape.shape.Shape.prototype.set_body});
});nape.shape.Shape.prototype.get_body = function() {
	if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
};
nape.shape.Shape.prototype.set_body = function(body) {
	this.zpp_inner.immutable_midstep("Shape::body");
	if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
		if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
		if(body != null) body.zpp_inner.wrap_shapes.add(this);
	}
	if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "castCircle", {get: nape.shape.Shape.prototype.get_castCircle});
});nape.shape.Shape.prototype.get_castCircle = function() {
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) return this.zpp_inner.circle.outer_zn; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "castPolygon", {get: nape.shape.Shape.prototype.get_castPolygon});
});nape.shape.Shape.prototype.get_castPolygon = function() {
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) return this.zpp_inner.polygon.outer_zn; else return null;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "worldCOM", {get: nape.shape.Shape.prototype.get_worldCOM});
});nape.shape.Shape.prototype.get_worldCOM = function() {
	if(this.zpp_inner.wrap_worldCOM == null) {
		this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
		this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
	}
	return this.zpp_inner.wrap_worldCOM;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "localCOM", {get: nape.shape.Shape.prototype.get_localCOM, set: nape.shape.Shape.prototype.set_localCOM});
});nape.shape.Shape.prototype.get_localCOM = function() {
	if(this.zpp_inner.wrap_localCOM == null) {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
	}
	return this.zpp_inner.wrap_localCOM;
};
nape.shape.Shape.prototype.set_localCOM = function(localCOM) {
	this.zpp_inner.immutable_midstep("Body::localCOM");
	if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(localCOM == null) throw "Error: Shape::localCOM cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_localCOM == null) {
			if($this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
		}
		$r = $this.zpp_inner.wrap_localCOM;
		return $r;
	}(this))).set(localCOM);
	if(this.zpp_inner.wrap_localCOM == null) {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
	}
	return this.zpp_inner.wrap_localCOM;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "area", {get: nape.shape.Shape.prototype.get_area});
});nape.shape.Shape.prototype.get_area = function() {
	this.zpp_inner.validate_area_inertia();
	return this.zpp_inner.area;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "inertia", {get: nape.shape.Shape.prototype.get_inertia});
});nape.shape.Shape.prototype.get_inertia = function() {
	this.zpp_inner.validate_area_inertia();
	return this.zpp_inner.inertia;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "angDrag", {get: nape.shape.Shape.prototype.get_angDrag});
});nape.shape.Shape.prototype.get_angDrag = function() {
	this.zpp_inner.validate_angDrag();
	return this.zpp_inner.angDrag;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "material", {get: nape.shape.Shape.prototype.get_material, set: nape.shape.Shape.prototype.set_material});
});nape.shape.Shape.prototype.get_material = function() {
	return this.zpp_inner.material.wrapper();
};
nape.shape.Shape.prototype.set_material = function(material) {
	this.zpp_inner.immutable_midstep("Shape::material");
	if(material == null) throw "Error: Cannot assign null as Shape material";
	this.zpp_inner.setMaterial(material.zpp_inner);
	return this.zpp_inner.material.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "filter", {get: nape.shape.Shape.prototype.get_filter, set: nape.shape.Shape.prototype.set_filter});
});nape.shape.Shape.prototype.get_filter = function() {
	return this.zpp_inner.filter.wrapper();
};
nape.shape.Shape.prototype.set_filter = function(filter) {
	this.zpp_inner.immutable_midstep("Shape::filter");
	if(filter == null) throw "Error: Cannot assign null as Shape filter";
	this.zpp_inner.setFilter(filter.zpp_inner);
	return this.zpp_inner.filter.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "fluidProperties", {get: nape.shape.Shape.prototype.get_fluidProperties, set: nape.shape.Shape.prototype.set_fluidProperties});
});nape.shape.Shape.prototype.get_fluidProperties = function() {
	this.zpp_inner.immutable_midstep("Shape::fluidProperties");
	if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
	return this.zpp_inner.fluidProperties.wrapper();
};
nape.shape.Shape.prototype.set_fluidProperties = function(fluidProperties) {
	if(fluidProperties == null) throw "Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false";
	this.zpp_inner.setFluid(fluidProperties.zpp_inner);
	this.zpp_inner.immutable_midstep("Shape::fluidProperties");
	if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
	return this.zpp_inner.fluidProperties.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "fluidEnabled", {get: nape.shape.Shape.prototype.get_fluidEnabled, set: nape.shape.Shape.prototype.set_fluidEnabled});
});nape.shape.Shape.prototype.get_fluidEnabled = function() {
	return this.zpp_inner.fluidEnabled;
};
nape.shape.Shape.prototype.set_fluidEnabled = function(fluidEnabled) {
	this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
	this.zpp_inner.fluidEnabled = fluidEnabled;
	if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.set_fluidProperties(new nape.phys.FluidProperties());
	this.zpp_inner.wake();
	return this.zpp_inner.fluidEnabled;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "sensorEnabled", {get: nape.shape.Shape.prototype.get_sensorEnabled, set: nape.shape.Shape.prototype.set_sensorEnabled});
});nape.shape.Shape.prototype.get_sensorEnabled = function() {
	return this.zpp_inner.sensorEnabled;
};
nape.shape.Shape.prototype.set_sensorEnabled = function(sensorEnabled) {
	this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
	this.zpp_inner.sensorEnabled = sensorEnabled;
	this.zpp_inner.wake();
	return this.zpp_inner.sensorEnabled;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Shape.prototype, "bounds", {get: nape.shape.Shape.prototype.get_bounds});
});nape.shape.Shape.prototype.get_bounds = function() {
	return this.zpp_inner.aabb.wrapper();
};
nape.shape.Shape.prototype.translate = function(translation) {
	this.zpp_inner.immutable_midstep("Shape::translate()");
	if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(translation == null) throw "Error: Cannot displace Shape by null Vec2";
	if(translation.lsq() > 0) {
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__translate((function($this) {
			var $r;
			if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			translation.zpp_inner.validate();
			$r = translation.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			translation.zpp_inner.validate();
			$r = translation.zpp_inner.y;
			return $r;
		}(this))); else this.zpp_inner.polygon.__translate((function($this) {
			var $r;
			if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			translation.zpp_inner.validate();
			$r = translation.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			translation.zpp_inner.validate();
			$r = translation.zpp_inner.y;
			return $r;
		}(this)));
	}
	if(translation.zpp_inner.weak) {
		translation.dispose();
		true;
	} else false;
	return this;
};
nape.shape.Shape.prototype.scale = function(scalex,scaley) {
	this.zpp_inner.immutable_midstep("Shape::scale()");
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(scalex != scalex || scaley != scaley) throw "Error: Cannot scale Shape by NaN";
	if(scalex == 0 || scaley == 0) throw "Error: Cannot Scale shape by a factor of 0";
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var d = scalex * scalex - scaley * scaley;
		if(d * d < nape.Config.epsilon * nape.Config.epsilon) this.zpp_inner.circle.__scale(scalex,scaley); else throw "Error: Cannot perform a non equal scaling on a Circle";
	} else this.zpp_inner.polygon.__scale(scalex,scaley);
	return this;
};
nape.shape.Shape.prototype.rotate = function(angle) {
	this.zpp_inner.immutable_midstep("Shape::rotate()");
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(angle != angle) throw "Error: Cannot rotate Shape by NaN";
	var dr = angle % (2 * Math.PI);
	if(dr != 0.0) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
	}
	return this;
};
nape.shape.Shape.prototype.transform = function(matrix) {
	this.zpp_inner.immutable_midstep("Shape::transform()");
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(matrix == null) throw "Error: Cannot transform Shape by null matrix";
	if(matrix.singular()) throw "Error: Cannot transform Shape by a singular matrix";
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else throw "Error: Cannot transform Circle by a non equiorthogonal matrix";
	} else this.zpp_inner.polygon.__transform(matrix);
	return this;
};
nape.shape.Shape.prototype.contains = function(point) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Cannot check null point for containment";
	if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) == null) throw "Error: Shape is not well defined without a Body";
	zpp_nape.geom.ZPP_Geom.validateShape(this.zpp_inner);
	point.zpp_inner.validate();
	var ret = zpp_nape.geom.ZPP_Collide.shapeContains(this.zpp_inner,point.zpp_inner);
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
};
nape.shape.Shape.prototype.copy = function() {
	return this.zpp_inner.copy();
};
nape.shape.Shape.prototype.toString = function() {
	var ret;
	if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = "Circle"; else ret = "Polygon";
	return ret + "#" + this.zpp_inner_i.id;
};
nape.shape.Shape.prototype.__class__ = nape.shape.Shape;
nape.shape.Circle = $hxClasses['nape.shape.Circle'] = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw "Error: Circle::radius cannot be NaN";
		if(radius < nape.Config.epsilon) throw "Error: Circle::radius (" + radius + ") must be > Config.epsilon";
		if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
nape.shape.Circle.__name__ = ["nape","shape","Circle"];
nape.shape.Circle.__super__ = nape.shape.Shape;
for(var k in nape.shape.Shape.prototype ) nape.shape.Circle.prototype[k] = nape.shape.Shape.prototype[k];
nape.shape.Circle.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.shape.Circle.prototype, "radius", {get: nape.shape.Circle.prototype.get_radius, set: nape.shape.Circle.prototype.set_radius});
});nape.shape.Circle.prototype.get_radius = function() {
	return this.zpp_inner_zn.radius;
};
nape.shape.Circle.prototype.set_radius = function(radius) {
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw "Error: Circle::radius cannot be NaN";
		if(radius < nape.Config.epsilon) throw "Error: Circle::radius (" + radius + ") must be > Config.epsilon";
		if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	return this.zpp_inner_zn.radius;
};
nape.shape.Circle.prototype.__class__ = nape.shape.Circle;
nape.shape.Edge = $hxClasses['nape.shape.Edge'] = function() {
	this.zpp_inner = null;
	if(!zpp_nape.shape.ZPP_Edge.internal) throw "Error: Cannot instantiate an Edge derp!";
};
nape.shape.Edge.__name__ = ["nape","shape","Edge"];
nape.shape.Edge.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "polygon", {get: nape.shape.Edge.prototype.get_polygon});
});nape.shape.Edge.prototype.get_polygon = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	return this.zpp_inner.polygon.outer_zn;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "localNormal", {get: nape.shape.Edge.prototype.get_localNormal});
});nape.shape.Edge.prototype.get_localNormal = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	if(this.zpp_inner.wrap_lnorm == null) this.zpp_inner.getlnorm();
	return this.zpp_inner.wrap_lnorm;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "worldNormal", {get: nape.shape.Edge.prototype.get_worldNormal});
});nape.shape.Edge.prototype.get_worldNormal = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	if(this.zpp_inner.wrap_gnorm == null) this.zpp_inner.getgnorm();
	return this.zpp_inner.wrap_gnorm;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "length", {get: nape.shape.Edge.prototype.get_length});
});nape.shape.Edge.prototype.get_length = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	this.zpp_inner.polygon.validate_laxi();
	return this.zpp_inner.length;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "localProjection", {get: nape.shape.Edge.prototype.get_localProjection});
});nape.shape.Edge.prototype.get_localProjection = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	this.zpp_inner.polygon.validate_laxi();
	return this.zpp_inner.lprojection;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "worldProjection", {get: nape.shape.Edge.prototype.get_worldProjection});
});nape.shape.Edge.prototype.get_worldProjection = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	if(this.zpp_inner.polygon.body == null) throw "Error: Edge world projection only makes sense for Polygons contained within a rigid body";
	this.zpp_inner.polygon.validate_gaxi();
	return this.zpp_inner.gprojection;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "localVertex1", {get: nape.shape.Edge.prototype.get_localVertex1});
});nape.shape.Edge.prototype.get_localVertex1 = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	this.zpp_inner.polygon.validate_laxi();
	return this.zpp_inner.lp0.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "localVertex2", {get: nape.shape.Edge.prototype.get_localVertex2});
});nape.shape.Edge.prototype.get_localVertex2 = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	this.zpp_inner.polygon.validate_laxi();
	return this.zpp_inner.lp1.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "worldVertex1", {get: nape.shape.Edge.prototype.get_worldVertex1});
});nape.shape.Edge.prototype.get_worldVertex1 = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	this.zpp_inner.polygon.validate_gaxi();
	return this.zpp_inner.gp0.wrapper();
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Edge.prototype, "worldVertex2", {get: nape.shape.Edge.prototype.get_worldVertex2});
});nape.shape.Edge.prototype.get_worldVertex2 = function() {
	if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
	this.zpp_inner.polygon.validate_gaxi();
	return this.zpp_inner.gp1.wrapper();
};
nape.shape.Edge.prototype.toString = function() {
	if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
		this.zpp_inner.polygon.validate_laxi();
		return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
	} else {
		this.zpp_inner.polygon.validate_gaxi();
		return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
	}
};
nape.shape.Edge.prototype.__class__ = nape.shape.Edge;
nape.shape.EdgeIterator = $hxClasses['nape.shape.EdgeIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_EdgeList.internal) throw "Error: Cannot instantiate " + "Edge" + "Iterator derp!";
};
nape.shape.EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape.shape.EdgeIterator.get = function(list) {
	var ret;
	if(nape.shape.EdgeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_EdgeList.internal = true;
		var ret1 = new nape.shape.EdgeIterator();
		zpp_nape.util.ZPP_EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.shape.EdgeIterator.prototype.zpp_inner = null;
nape.shape.EdgeIterator.prototype.zpp_i = null;
nape.shape.EdgeIterator.prototype.zpp_critical = null;
nape.shape.EdgeIterator.prototype.zpp_next = null;
nape.shape.EdgeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.shape.EdgeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.shape.EdgeIterator.prototype.__class__ = nape.shape.EdgeIterator;
nape.shape.EdgeList = $hxClasses['nape.shape.EdgeList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_EdgeList();
	this.zpp_inner.outer = this;
};
nape.shape.EdgeList.__name__ = ["nape","shape","EdgeList"];
nape.shape.EdgeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.shape.EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.shape.EdgeList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.shape.EdgeList.prototype, "length", {get: nape.shape.EdgeList.prototype.get_length});
});nape.shape.EdgeList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.shape.EdgeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.shape.EdgeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) if(index == this.get_length() - 1) index = index; else index = this.get_length() - 2 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.wrapper();
};
nape.shape.EdgeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.shape.EdgeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.shape.EdgeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.shape.EdgeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
nape.shape.EdgeList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.shape.EdgeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.shape.EdgeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.shape.EdgeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.shape.EdgeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.shape.EdgeIterator.get(this);
};
nape.shape.EdgeList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.shape.EdgeList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.shape.EdgeIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Edge" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.shape.EdgeList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.shape.EdgeIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.shape.EdgeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.shape.EdgeIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.shape.EdgeList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.shape.EdgeIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.shape.EdgeList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.shape.EdgeList.prototype.__class__ = nape.shape.EdgeList;
nape.shape.Polygon = $hxClasses['nape.shape.Polygon'] = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	if(localVerts == null) throw "Error: localVerts cannot be null";
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) throw "Error: Array<Vec2> contains null objects";
			if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
			var x = vite;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(_g1.hasNext()) {
			var x1;
			_g1.zpp_critical = false;
			x1 = _g1.zpp_inner.at(_g1.zpp_i++);
			if(x1 == null) throw "Error: Vec2List contains null objects";
			if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x1.zpp_inner.validate();
					$r = x1.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x1 != null && x1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x1.zpp_inner.validate();
					$r = x1.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.GeomPoly)) {
		var lv2 = localVerts;
		if(lv2 != null && lv2.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			do {
				var x2 = nape.geom.Vec2.get(vite1.x,vite1.y,null);
				vite1 = vite1.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push((function($this) {
					var $r;
					if(x2 != null && x2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					$r = nape.geom.Vec2.get((function($this) {
						var $r;
						if(x2 != null && x2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x2.zpp_inner.validate();
						$r = x2.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(x2 != null && x2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x2.zpp_inner.validate();
						$r = x2.zpp_inner.y;
						return $r;
					}($this)),false);
					return $r;
				}(this)));
				x2.dispose();
			} while(vite1 != verts);
		}
	} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv3.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x3 = cur1.elt;
			if(x3.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x3.outer.zpp_inner.weak) {
					x3.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
nape.shape.Polygon.__name__ = ["nape","shape","Polygon"];
nape.shape.Polygon.__super__ = nape.shape.Shape;
for(var k in nape.shape.Shape.prototype ) nape.shape.Polygon.prototype[k] = nape.shape.Shape.prototype[k];
nape.shape.Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	if(x != x || y != y || width != width || height != height) throw "Error: Polygon.rect cannot accept NaN arguments";
	return [nape.geom.Vec2.get(x,y,weak),nape.geom.Vec2.get(x + width,y,weak),nape.geom.Vec2.get(x + width,y + height,weak),nape.geom.Vec2.get(x,y + height,weak)];
};
nape.shape.Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	if(width != width || height != height) throw "Error: Polygon.box cannot accept NaN arguments";
	return nape.shape.Polygon.rect(-width / 2,-height / 2,width,height,weak);
};
nape.shape.Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	if(xRadius != xRadius || yRadius != yRadius || angleOffset != angleOffset) throw "Error: Polygon.regular cannot accept NaN arguments";
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape.geom.Vec2.get(Math.cos(ang) * xRadius,Math.sin(ang) * yRadius,weak);
		ret.push(x);
	}
	return ret;
};
nape.shape.Polygon.prototype.zpp_inner_zn = null;
rgaInits.push(function() {
Object.defineProperty(nape.shape.Polygon.prototype, "localVerts", {get: nape.shape.Polygon.prototype.get_localVerts});
});nape.shape.Polygon.prototype.get_localVerts = function() {
	if(this.zpp_inner_zn.wrap_lverts == null) this.zpp_inner_zn.getlverts();
	return this.zpp_inner_zn.wrap_lverts;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Polygon.prototype, "worldVerts", {get: nape.shape.Polygon.prototype.get_worldVerts});
});nape.shape.Polygon.prototype.get_worldVerts = function() {
	if(this.zpp_inner_zn.wrap_gverts == null) this.zpp_inner_zn.getgverts();
	return this.zpp_inner_zn.wrap_gverts;
};
rgaInits.push(function() {
Object.defineProperty(nape.shape.Polygon.prototype, "edges", {get: nape.shape.Polygon.prototype.get_edges});
});nape.shape.Polygon.prototype.get_edges = function() {
	if(this.zpp_inner_zn.wrap_edges == null) this.zpp_inner_zn.getedges();
	return this.zpp_inner_zn.wrap_edges;
};
nape.shape.Polygon.prototype.validity = function() {
	return this.zpp_inner_zn.valid();
};
nape.shape.Polygon.prototype.__class__ = nape.shape.Polygon;
nape.shape.ShapeIterator = $hxClasses['nape.shape.ShapeIterator'] = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ShapeList.internal) throw "Error: Cannot instantiate " + "Shape" + "Iterator derp!";
};
nape.shape.ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape.shape.ShapeIterator.get = function(list) {
	var ret;
	if(nape.shape.ShapeIterator.zpp_pool == null) {
		zpp_nape.util.ZPP_ShapeList.internal = true;
		var ret1 = new nape.shape.ShapeIterator();
		zpp_nape.util.ZPP_ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape.shape.ShapeIterator.prototype.zpp_inner = null;
nape.shape.ShapeIterator.prototype.zpp_i = null;
nape.shape.ShapeIterator.prototype.zpp_critical = null;
nape.shape.ShapeIterator.prototype.zpp_next = null;
nape.shape.ShapeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.get_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
nape.shape.ShapeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
nape.shape.ShapeIterator.prototype.__class__ = nape.shape.ShapeIterator;
nape.shape.ShapeList = $hxClasses['nape.shape.ShapeList'] = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ShapeList();
	this.zpp_inner.outer = this;
};
nape.shape.ShapeList.__name__ = ["nape","shape","ShapeList"];
nape.shape.ShapeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.shape.ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape.shape.ShapeList.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.shape.ShapeList.prototype, "length", {get: nape.shape.ShapeList.prototype.get_length});
});nape.shape.ShapeList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
nape.shape.ShapeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
nape.shape.ShapeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
};
nape.shape.ShapeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.shape.ShapeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
nape.shape.ShapeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.shape.ShapeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite;
		if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
		if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.outer;
	return retx2;
};
nape.shape.ShapeList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
};
nape.shape.ShapeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
nape.shape.ShapeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
};
nape.shape.ShapeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
nape.shape.ShapeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return nape.shape.ShapeIterator.get(this);
};
nape.shape.ShapeList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.shape.ShapeList();
	var _g;
	this.zpp_inner.valmod();
	_g = nape.shape.ShapeIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Shape" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
};
nape.shape.ShapeList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var _g;
	xs.zpp_inner.valmod();
	_g = nape.shape.ShapeIterator.get(xs);
	while(_g.hasNext()) {
		var x;
		_g.zpp_critical = false;
		x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
		}
	}
};
nape.shape.ShapeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g;
	this.zpp_inner.valmod();
	_g = nape.shape.ShapeIterator.get(this);
	while(_g.hasNext()) {
		var i;
		_g.zpp_critical = false;
		i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) ret += ",";
		if(i == null) ret += "NULL"; else ret += i.toString();
		fst = false;
	}
	return ret + "]";
};
nape.shape.ShapeList.prototype.foreach = function(lambda) {
	if(lambda == null) throw "Error: Cannot execute null on list elements";
	var it;
	this.zpp_inner.valmod();
	it = nape.shape.ShapeIterator.get(this);
	while(it.hasNext()) try {
		lambda((function($this) {
			var $r;
			it.zpp_critical = false;
			$r = it.zpp_inner.at(it.zpp_i++);
			return $r;
		}(this)));
	} catch( e ) {
		it.zpp_next = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = it;
		it.zpp_inner = null;
		break;
	}
	return this;
};
nape.shape.ShapeList.prototype.filter = function(lambda) {
	if(lambda == null) throw "Error: Cannot select elements of list with null";
	var i = 0;
	while(i < this.get_length()) {
		var x = this.at(i);
		try {
			if(lambda(x)) i++; else this.remove(x);
		} catch( e ) {
			break;
		}
	}
	return this;
};
nape.shape.ShapeList.prototype.__class__ = nape.shape.ShapeList;
nape.shape.ShapeType = $hxClasses['nape.shape.ShapeType'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ShapeType" + " derp!";
};
nape.shape.ShapeType.__name__ = ["nape","shape","ShapeType"];
nape.shape.ShapeType.CIRCLE = null;
nape.shape.ShapeType.get_CIRCLE = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
};
nape.shape.ShapeType.POLYGON = null;
nape.shape.ShapeType.get_POLYGON = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
};
nape.shape.ShapeType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
		return $r;
	}(this))) return "CIRCLE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
		return $r;
	}(this))) return "POLYGON"; else return "";
};
nape.shape.ShapeType.prototype.__class__ = nape.shape.ShapeType;
nape.shape.ValidationResult = $hxClasses['nape.shape.ValidationResult'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ValidationResult" + " derp!";
};
nape.shape.ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape.shape.ValidationResult.VALID = null;
nape.shape.ValidationResult.get_VALID = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
};
nape.shape.ValidationResult.DEGENERATE = null;
nape.shape.ValidationResult.get_DEGENERATE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
};
nape.shape.ValidationResult.CONCAVE = null;
nape.shape.ValidationResult.get_CONCAVE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
};
nape.shape.ValidationResult.SELF_INTERSECTING = null;
nape.shape.ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
};
nape.shape.ValidationResult.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
		return $r;
	}(this))) return "VALID"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
		return $r;
	}(this))) return "DEGENERATE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
		return $r;
	}(this))) return "CONCAVE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
		return $r;
	}(this))) return "SELF_INTERSECTING"; else return "";
};
nape.shape.ValidationResult.prototype.__class__ = nape.shape.ValidationResult;
if(!nape.space) nape.space = {};
nape.space.Broadphase = $hxClasses['nape.space.Broadphase'] = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Broadphase" + " derp!";
};
nape.space.Broadphase.__name__ = ["nape","space","Broadphase"];
nape.space.Broadphase.DYNAMIC_AABB_TREE = null;
nape.space.Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
};
nape.space.Broadphase.SWEEP_AND_PRUNE = null;
nape.space.Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
};
nape.space.Broadphase.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) return "SWEEP_AND_PRUNE"; else return "";
};
nape.space.Broadphase.prototype.__class__ = nape.space.Broadphase;
nape.space.Space = $hxClasses['nape.space.Space'] = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.space.ZPP_Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
};
nape.space.Space.__name__ = ["nape","space","Space"];
nape.space.Space.prototype.zpp_inner = null;
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "userData", {get: nape.space.Space.prototype.get_userData});
});nape.space.Space.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
	return this.zpp_inner.userData;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "gravity", {get: nape.space.Space.prototype.get_gravity, set: nape.space.Space.prototype.set_gravity});
});nape.space.Space.prototype.get_gravity = function() {
	if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
	return this.zpp_inner.wrap_gravity;
};
nape.space.Space.prototype.set_gravity = function(gravity) {
	if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(gravity == null) throw "Error: Space::gravity cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
		$r = $this.zpp_inner.wrap_gravity;
		return $r;
	}(this))).set(gravity);
	if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
	return this.zpp_inner.wrap_gravity;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "broadphase", {get: nape.space.Space.prototype.get_broadphase});
});nape.space.Space.prototype.get_broadphase = function() {
	if(this.zpp_inner.bphase.is_sweep) {
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
	} else {
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
	}
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "sortContacts", {get: nape.space.Space.prototype.get_sortContacts, set: nape.space.Space.prototype.set_sortContacts});
});nape.space.Space.prototype.get_sortContacts = function() {
	return this.zpp_inner.sortcontacts;
};
nape.space.Space.prototype.set_sortContacts = function(sortContacts) {
	this.zpp_inner.sortcontacts = sortContacts;
	return this.zpp_inner.sortcontacts;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "worldAngularDrag", {get: nape.space.Space.prototype.get_worldAngularDrag, set: nape.space.Space.prototype.set_worldAngularDrag});
});nape.space.Space.prototype.get_worldAngularDrag = function() {
	return this.zpp_inner.global_ang_drag;
};
nape.space.Space.prototype.set_worldAngularDrag = function(worldAngularDrag) {
	var d = worldAngularDrag;
	if(d != d) throw "Error: Space::worldAngularDrag cannot be NaN";
	this.zpp_inner.global_ang_drag = d;
	return this.zpp_inner.global_ang_drag;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "worldLinearDrag", {get: nape.space.Space.prototype.get_worldLinearDrag, set: nape.space.Space.prototype.set_worldLinearDrag});
});nape.space.Space.prototype.get_worldLinearDrag = function() {
	return this.zpp_inner.global_lin_drag;
};
nape.space.Space.prototype.set_worldLinearDrag = function(worldLinearDrag) {
	var d = worldLinearDrag;
	if(d != d) throw "Error: Space::worldLinearDrag cannot be NaN";
	this.zpp_inner.global_lin_drag = d;
	return this.zpp_inner.global_lin_drag;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "compounds", {get: nape.space.Space.prototype.get_compounds});
});nape.space.Space.prototype.get_compounds = function() {
	return this.zpp_inner.wrap_compounds;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "bodies", {get: nape.space.Space.prototype.get_bodies});
});nape.space.Space.prototype.get_bodies = function() {
	return this.zpp_inner.wrap_bodies;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "liveBodies", {get: nape.space.Space.prototype.get_liveBodies});
});nape.space.Space.prototype.get_liveBodies = function() {
	return this.zpp_inner.wrap_live;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "constraints", {get: nape.space.Space.prototype.get_constraints});
});nape.space.Space.prototype.get_constraints = function() {
	return this.zpp_inner.wrap_constraints;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "liveConstraints", {get: nape.space.Space.prototype.get_liveConstraints});
});nape.space.Space.prototype.get_liveConstraints = function() {
	return this.zpp_inner.wrap_livecon;
};
nape.space.Space.prototype.visitBodies = function(lambda) {
	if(lambda == null) throw "Error: lambda cannot be null for Space::visitBodies";
	var _g = this.zpp_inner.wrap_bodies.iterator();
	while(_g.hasNext()) {
		var b;
		_g.zpp_critical = false;
		b = _g.zpp_inner.at(_g.zpp_i++);
		lambda(b);
	}
	var _g1 = this.zpp_inner.wrap_compounds.iterator();
	while(_g1.hasNext()) {
		var c;
		_g1.zpp_critical = false;
		c = _g1.zpp_inner.at(_g1.zpp_i++);
		c.visitBodies(lambda);
	}
};
nape.space.Space.prototype.visitConstraints = function(lambda) {
	if(lambda == null) throw "Error: lambda cannot be null for Space::visitConstraints";
	var _g = this.zpp_inner.wrap_constraints.iterator();
	while(_g.hasNext()) {
		var c;
		_g.zpp_critical = false;
		c = _g.zpp_inner.at(_g.zpp_i++);
		lambda(c);
	}
	var _g1 = this.zpp_inner.wrap_compounds.iterator();
	while(_g1.hasNext()) {
		var c1;
		_g1.zpp_critical = false;
		c1 = _g1.zpp_inner.at(_g1.zpp_i++);
		c1.visitConstraints(lambda);
	}
};
nape.space.Space.prototype.visitCompounds = function(lambda) {
	if(lambda == null) throw "Error: lambda cannot be null for Space::visitCompounds";
	var _g = this.zpp_inner.wrap_compounds.iterator();
	while(_g.hasNext()) {
		var c;
		_g.zpp_critical = false;
		c = _g.zpp_inner.at(_g.zpp_i++);
		lambda(c);
		c.visitCompounds(lambda);
	}
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "world", {get: nape.space.Space.prototype.get_world});
});nape.space.Space.prototype.get_world = function() {
	return this.zpp_inner.__static;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "arbiters", {get: nape.space.Space.prototype.get_arbiters});
});nape.space.Space.prototype.get_arbiters = function() {
	if(this.zpp_inner.wrap_arbiters == null) {
		var ret = new zpp_nape.dynamics.ZPP_SpaceArbiterList();
		ret.space = this.zpp_inner;
		this.zpp_inner.wrap_arbiters = ret;
	}
	return this.zpp_inner.wrap_arbiters;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "listeners", {get: nape.space.Space.prototype.get_listeners});
});nape.space.Space.prototype.get_listeners = function() {
	return this.zpp_inner.wrap_listeners;
};
nape.space.Space.prototype.clear = function() {
	if(this.zpp_inner.midstep) throw "Error: Space::clear() cannot be called during space step()";
	this.zpp_inner.clear();
};
nape.space.Space.prototype.step = function(deltaTime,velocityIterations,positionIterations) {
	if(positionIterations == null) positionIterations = 10;
	if(velocityIterations == null) velocityIterations = 10;
	if(deltaTime != deltaTime) throw "Error: deltaTime cannot be NaN";
	if(deltaTime <= 0) throw "Error: deltaTime must be strictly positive";
	if(velocityIterations <= 0) throw "Error: must use atleast one velocity iteration";
	if(positionIterations <= 0) throw "Error: must use atleast one position iteration";
	this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "timeStamp", {get: nape.space.Space.prototype.get_timeStamp});
});nape.space.Space.prototype.get_timeStamp = function() {
	return this.zpp_inner.stamp;
};
rgaInits.push(function() {
Object.defineProperty(nape.space.Space.prototype, "elapsedTime", {get: nape.space.Space.prototype.get_elapsedTime});
});nape.space.Space.prototype.get_elapsedTime = function() {
	return this.zpp_inner.time;
};
nape.space.Space.prototype.interactionType = function(shape1,shape2) {
	if(shape1 == null || shape2 == null) throw "Error: Cannot evaluate interaction type for null shapes";
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Cannot evaluate interaction type for shapes not part of a Body";
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return null;
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) return null;
	var s1 = shape1.zpp_inner;
	var s2 = shape2.zpp_inner;
	var _g = this.zpp_inner.interactionType(s1,s2,s1.body,s2.body);
	switch(_g) {
	case 0:
		if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
	case 1:
		if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
	case 2:
		if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
	default:
		return null;
	}
};
nape.space.Space.prototype.shapesUnderPoint = function(point,filter,output) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot evaluate shapes under a null point :)";
	var ret = this.zpp_inner.shapesUnderPoint((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)),filter == null?null:filter.zpp_inner,output);
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
};
nape.space.Space.prototype.bodiesUnderPoint = function(point,filter,output) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot evaluate objects under a null point :)";
	var ret = this.zpp_inner.bodiesUnderPoint((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)),filter == null?null:filter.zpp_inner,output);
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
};
nape.space.Space.prototype.shapesInAABB = function(aabb,containment,strict,filter,output) {
	if(strict == null) strict = true;
	if(containment == null) containment = false;
	if(aabb == null) throw "Error: Cannot evaluate shapes in a null AABB :)";
	if((function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.width();
		return $r;
	}(this)) == 0 || (function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.height();
		return $r;
	}(this)) == 0) throw "Error: Cannot evaluate shapes in degenerate AABB :/";
	return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
};
nape.space.Space.prototype.bodiesInAABB = function(aabb,containment,strict,filter,output) {
	if(strict == null) strict = true;
	if(containment == null) containment = false;
	if(aabb == null) throw "Error: Cannot evaluate objects in a null AABB :)";
	if((function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.width();
		return $r;
	}(this)) == 0 || (function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.height();
		return $r;
	}(this)) == 0) throw "Error: Cannot evaluate objects in degenerate AABB :/";
	return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
};
nape.space.Space.prototype.shapesInCircle = function(position,radius,containment,filter,output) {
	if(containment == null) containment = false;
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: Cannot evaluate shapes at null circle :)";
	if(radius != radius) throw "Error: Circle radius cannot be NaN";
	if(radius <= 0) throw "Error: Circle radius must be strictly positive";
	var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
	if(position.zpp_inner.weak) {
		position.dispose();
		true;
	} else false;
	return ret;
};
nape.space.Space.prototype.bodiesInCircle = function(position,radius,containment,filter,output) {
	if(containment == null) containment = false;
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: Cannot evaluate objects at null circle :)";
	if(radius != radius) throw "Error: Circle radius cannot be NaN";
	if(radius <= 0) throw "Error: Circle radius must be strictly positive";
	var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
	if(position.zpp_inner.weak) {
		position.dispose();
		true;
	} else false;
	return ret;
};
nape.space.Space.prototype.shapesInShape = function(shape,containment,filter,output) {
	if(containment == null) containment = false;
	if(shape == null) throw "Error: Cannot evaluate shapes in a null shapes :)";
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
	if(shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var res = shape.zpp_inner.polygon.valid();
		if(res != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) throw "Error: Polygon query shape is invalid : " + res.toString();
	}
	return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
};
nape.space.Space.prototype.bodiesInShape = function(shape,containment,filter,output) {
	if(containment == null) containment = false;
	if(shape == null) throw "Error: Cannot evaluate bodies in a null shapes :)";
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
	if(shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var res = shape.zpp_inner.polygon.valid();
		if(res != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) throw "Error: Polygon query shape is invalid : " + res.toString();
	}
	return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
};
nape.space.Space.prototype.shapesInBody = function(body,filter,output) {
	if(body == null) throw "Error: Cannot evaluate shapes in null body";
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	var _g = body.zpp_inner.wrap_shapes.iterator();
	while(_g.hasNext()) {
		var shape;
		_g.zpp_critical = false;
		shape = _g.zpp_inner.at(_g.zpp_i++);
		var cur = this.shapesInShape(shape,false,filter,ret);
	}
	return ret;
};
nape.space.Space.prototype.bodiesInBody = function(body,filter,output) {
	if(body == null) throw "Error: Cannot evaluate shapes in null body";
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	var _g = body.zpp_inner.wrap_shapes.iterator();
	while(_g.hasNext()) {
		var shape;
		_g.zpp_critical = false;
		shape = _g.zpp_inner.at(_g.zpp_i++);
		var cur = this.bodiesInShape(shape,false,filter,ret);
	}
	return ret;
};
nape.space.Space.prototype.convexCast = function(shape,deltaTime,liveSweep,filter) {
	if(liveSweep == null) liveSweep = false;
	if(shape == null) throw "Error: Cannot cast null shape :)";
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Shape must belong to a body to be cast.";
	if(deltaTime < 0 || deltaTime != deltaTime) throw "Error: deltaTime must be positive";
	return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
};
nape.space.Space.prototype.convexMultiCast = function(shape,deltaTime,liveSweep,filter,output) {
	if(liveSweep == null) liveSweep = false;
	if(shape == null) throw "Error: Cannot cast null shape :)";
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Shape must belong to a body to be cast.";
	if(deltaTime < 0 || deltaTime != deltaTime) throw "Error: deltaTime must be positive";
	return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
};
nape.space.Space.prototype.rayCast = function(ray,inner,filter) {
	if(inner == null) inner = false;
	if(ray == null) throw "Error: Cannot cast null ray :)";
	return this.zpp_inner.rayCast(ray,inner,filter);
};
nape.space.Space.prototype.rayMultiCast = function(ray,inner,filter,output) {
	if(inner == null) inner = false;
	if(ray == null) throw "Error: Cannot cast null ray :)";
	return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
};
nape.space.Space.prototype.__class__ = nape.space.Space;
if(!nape.util) nape.util = {};
nape.util.Debug = $hxClasses['nape.util.Debug'] = function() { };
nape.util.Debug.__name__ = ["nape","util","Debug"];
nape.util.Debug.version = function() {
	return "Nape 2.0.16";
};
nape.util.Debug.clearObjectPools = function() {
	while(nape.constraint.ConstraintIterator.zpp_pool != null) {
		var nxt = nape.constraint.ConstraintIterator.zpp_pool.zpp_next;
		nape.constraint.ConstraintIterator.zpp_pool.zpp_next = null;
		nape.constraint.ConstraintIterator.zpp_pool = nxt;
	}
	while(nape.phys.InteractorIterator.zpp_pool != null) {
		var nxt1 = nape.phys.InteractorIterator.zpp_pool.zpp_next;
		nape.phys.InteractorIterator.zpp_pool.zpp_next = null;
		nape.phys.InteractorIterator.zpp_pool = nxt1;
	}
	while(nape.phys.BodyIterator.zpp_pool != null) {
		var nxt2 = nape.phys.BodyIterator.zpp_pool.zpp_next;
		nape.phys.BodyIterator.zpp_pool.zpp_next = null;
		nape.phys.BodyIterator.zpp_pool = nxt2;
	}
	while(nape.phys.CompoundIterator.zpp_pool != null) {
		var nxt3 = nape.phys.CompoundIterator.zpp_pool.zpp_next;
		nape.phys.CompoundIterator.zpp_pool.zpp_next = null;
		nape.phys.CompoundIterator.zpp_pool = nxt3;
	}
	while(nape.callbacks.ListenerIterator.zpp_pool != null) {
		var nxt4 = nape.callbacks.ListenerIterator.zpp_pool.zpp_next;
		nape.callbacks.ListenerIterator.zpp_pool.zpp_next = null;
		nape.callbacks.ListenerIterator.zpp_pool = nxt4;
	}
	while(nape.callbacks.CbTypeIterator.zpp_pool != null) {
		var nxt5 = nape.callbacks.CbTypeIterator.zpp_pool.zpp_next;
		nape.callbacks.CbTypeIterator.zpp_pool.zpp_next = null;
		nape.callbacks.CbTypeIterator.zpp_pool = nxt5;
	}
	while(nape.geom.ConvexResultIterator.zpp_pool != null) {
		var nxt6 = nape.geom.ConvexResultIterator.zpp_pool.zpp_next;
		nape.geom.ConvexResultIterator.zpp_pool.zpp_next = null;
		nape.geom.ConvexResultIterator.zpp_pool = nxt6;
	}
	while(nape.geom.GeomPolyIterator.zpp_pool != null) {
		var nxt7 = nape.geom.GeomPolyIterator.zpp_pool.zpp_next;
		nape.geom.GeomPolyIterator.zpp_pool.zpp_next = null;
		nape.geom.GeomPolyIterator.zpp_pool = nxt7;
	}
	while(nape.geom.Vec2Iterator.zpp_pool != null) {
		var nxt8 = nape.geom.Vec2Iterator.zpp_pool.zpp_next;
		nape.geom.Vec2Iterator.zpp_pool.zpp_next = null;
		nape.geom.Vec2Iterator.zpp_pool = nxt8;
	}
	while(nape.geom.RayResultIterator.zpp_pool != null) {
		var nxt9 = nape.geom.RayResultIterator.zpp_pool.zpp_next;
		nape.geom.RayResultIterator.zpp_pool.zpp_next = null;
		nape.geom.RayResultIterator.zpp_pool = nxt9;
	}
	while(nape.shape.ShapeIterator.zpp_pool != null) {
		var nxt10 = nape.shape.ShapeIterator.zpp_pool.zpp_next;
		nape.shape.ShapeIterator.zpp_pool.zpp_next = null;
		nape.shape.ShapeIterator.zpp_pool = nxt10;
	}
	while(nape.shape.EdgeIterator.zpp_pool != null) {
		var nxt11 = nape.shape.EdgeIterator.zpp_pool.zpp_next;
		nape.shape.EdgeIterator.zpp_pool.zpp_next = null;
		nape.shape.EdgeIterator.zpp_pool = nxt11;
	}
	while(nape.dynamics.ContactIterator.zpp_pool != null) {
		var nxt12 = nape.dynamics.ContactIterator.zpp_pool.zpp_next;
		nape.dynamics.ContactIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ContactIterator.zpp_pool = nxt12;
	}
	while(nape.dynamics.ArbiterIterator.zpp_pool != null) {
		var nxt13 = nape.dynamics.ArbiterIterator.zpp_pool.zpp_next;
		nape.dynamics.ArbiterIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ArbiterIterator.zpp_pool = nxt13;
	}
	while(nape.dynamics.InteractionGroupIterator.zpp_pool != null) {
		var nxt14 = nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next;
		nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next = null;
		nape.dynamics.InteractionGroupIterator.zpp_pool = nxt14;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool != null) {
		var nxt15 = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = nxt15;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool != null) {
		var nxt16 = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = nxt16;
	}
	while(zpp_nape.phys.ZPP_Material.zpp_pool != null) {
		var nxt17 = zpp_nape.phys.ZPP_Material.zpp_pool.next;
		zpp_nape.phys.ZPP_Material.zpp_pool.next = null;
		zpp_nape.phys.ZPP_Material.zpp_pool = nxt17;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool != null) {
		var nxt18 = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = nxt18;
	}
	while(zpp_nape.phys.ZPP_FluidProperties.zpp_pool != null) {
		var nxt19 = zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next = null;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = nxt19;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool != null) {
		var nxt20 = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = nxt20;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool != null) {
		var nxt21 = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = nxt21;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool != null) {
		var nxt22 = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = nxt22;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool != null) {
		var nxt23 = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = nxt23;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool != null) {
		var nxt24 = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = nxt24;
	}
	while(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool != null) {
		var nxt25 = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = nxt25;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool != null) {
		var nxt26 = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = nxt26;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool != null) {
		var nxt27 = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = nxt27;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool != null) {
		var nxt28 = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = nxt28;
	}
	while(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool != null) {
		var nxt29 = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = nxt29;
	}
	while(zpp_nape.callbacks.ZPP_Callback.zpp_pool != null) {
		var nxt30 = zpp_nape.callbacks.ZPP_Callback.zpp_pool.next;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = nxt30;
	}
	while(zpp_nape.callbacks.ZPP_CbSet.zpp_pool != null) {
		var nxt31 = zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = nxt31;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool != null) {
		var nxt32 = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = nxt32;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool != null) {
		var nxt33 = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = nxt33;
	}
	while(zpp_nape.geom.ZPP_GeomVert.zpp_pool != null) {
		var nxt34 = zpp_nape.geom.ZPP_GeomVert.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = nxt34;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool != null) {
		var nxt35 = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = nxt35;
	}
	while(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool != null) {
		var nxt36 = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = nxt36;
	}
	while(zpp_nape.geom.ZPP_Mat23.zpp_pool != null) {
		var nxt37 = zpp_nape.geom.ZPP_Mat23.zpp_pool.next;
		zpp_nape.geom.ZPP_Mat23.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = nxt37;
	}
	while(zpp_nape.geom.ZPP_CutVert.zpp_pool != null) {
		var nxt38 = zpp_nape.geom.ZPP_CutVert.zpp_pool.next;
		zpp_nape.geom.ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = nxt38;
	}
	while(zpp_nape.geom.ZPP_CutInt.zpp_pool != null) {
		var nxt39 = zpp_nape.geom.ZPP_CutInt.zpp_pool.next;
		zpp_nape.geom.ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = nxt39;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool != null) {
		var nxt40 = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = nxt40;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool != null) {
		var nxt41 = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = nxt41;
	}
	while(zpp_nape.geom.ZPP_Vec2.zpp_pool != null) {
		var nxt42 = zpp_nape.geom.ZPP_Vec2.zpp_pool.next;
		zpp_nape.geom.ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = nxt42;
	}
	while(zpp_nape.geom.ZPP_PartitionPair.zpp_pool != null) {
		var nxt43 = zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = nxt43;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool != null) {
		var nxt44 = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = nxt44;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt45 = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = nxt45;
	}
	while(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool != null) {
		var nxt46 = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = nxt46;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt47 = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = nxt47;
	}
	while(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt48 = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = nxt48;
	}
	while(zpp_nape.geom.ZPP_SimplifyV.zpp_pool != null) {
		var nxt49 = zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = nxt49;
	}
	while(zpp_nape.geom.ZPP_SimplifyP.zpp_pool != null) {
		var nxt50 = zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = nxt50;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt51 = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = nxt51;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool != null) {
		var nxt52 = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = nxt52;
	}
	while(zpp_nape.geom.ZPP_AABB.zpp_pool != null) {
		var nxt53 = zpp_nape.geom.ZPP_AABB.zpp_pool.next;
		zpp_nape.geom.ZPP_AABB.zpp_pool.next = null;
		zpp_nape.geom.ZPP_AABB.zpp_pool = nxt53;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool != null) {
		var nxt54 = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = nxt54;
	}
	while(zpp_nape.geom.ZPP_ToiEvent.zpp_pool != null) {
		var nxt55 = zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = nxt55;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool != null) {
		var nxt56 = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = nxt56;
	}
	while(zpp_nape.geom.ZPP_SimpleVert.zpp_pool != null) {
		var nxt57 = zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = nxt57;
	}
	while(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool != null) {
		var nxt58 = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = nxt58;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool != null) {
		var nxt59 = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = nxt59;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt60 = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = nxt60;
	}
	while(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool != null) {
		var nxt61 = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = nxt61;
	}
	while(zpp_nape.util.Hashable2_Boolfalse.zpp_pool != null) {
		var nxt62 = zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next = null;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = nxt62;
	}
	while(zpp_nape.geom.ZPP_MarchSpan.zpp_pool != null) {
		var nxt63 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = nxt63;
	}
	while(zpp_nape.geom.ZPP_MarchPair.zpp_pool != null) {
		var nxt64 = zpp_nape.geom.ZPP_MarchPair.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool = nxt64;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool != null) {
		var nxt65 = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = nxt65;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt66 = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = nxt66;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool != null) {
		var nxt67 = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = nxt67;
	}
	while(zpp_nape.shape.ZPP_Edge.zpp_pool != null) {
		var nxt68 = zpp_nape.shape.ZPP_Edge.zpp_pool.next;
		zpp_nape.shape.ZPP_Edge.zpp_pool.next = null;
		zpp_nape.shape.ZPP_Edge.zpp_pool = nxt68;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool != null) {
		var nxt69 = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = nxt69;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool != null) {
		var nxt70 = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = nxt70;
	}
	while(zpp_nape.space.ZPP_SweepData.zpp_pool != null) {
		var nxt71 = zpp_nape.space.ZPP_SweepData.zpp_pool.next;
		zpp_nape.space.ZPP_SweepData.zpp_pool.next = null;
		zpp_nape.space.ZPP_SweepData.zpp_pool = nxt71;
	}
	while(zpp_nape.space.ZPP_AABBNode.zpp_pool != null) {
		var nxt72 = zpp_nape.space.ZPP_AABBNode.zpp_pool.next;
		zpp_nape.space.ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = nxt72;
	}
	while(zpp_nape.space.ZPP_AABBPair.zpp_pool != null) {
		var nxt73 = zpp_nape.space.ZPP_AABBPair.zpp_pool.next;
		zpp_nape.space.ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = nxt73;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool != null) {
		var nxt74 = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = nxt74;
	}
	while(zpp_nape.dynamics.ZPP_Contact.zpp_pool != null) {
		var nxt75 = zpp_nape.dynamics.ZPP_Contact.zpp_pool.next;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = nxt75;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool != null) {
		var nxt76 = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = nxt76;
	}
	while(zpp_nape.space.ZPP_Island.zpp_pool != null) {
		var nxt77 = zpp_nape.space.ZPP_Island.zpp_pool.next;
		zpp_nape.space.ZPP_Island.zpp_pool.next = null;
		zpp_nape.space.ZPP_Island.zpp_pool = nxt77;
	}
	while(zpp_nape.space.ZPP_Component.zpp_pool != null) {
		var nxt78 = zpp_nape.space.ZPP_Component.zpp_pool.next;
		zpp_nape.space.ZPP_Component.zpp_pool.next = null;
		zpp_nape.space.ZPP_Component.zpp_pool = nxt78;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool != null) {
		var nxt79 = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = nxt79;
	}
	while(zpp_nape.space.ZPP_CallbackSet.zpp_pool != null) {
		var nxt80 = zpp_nape.space.ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = nxt80;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool != null) {
		var nxt81 = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = nxt81;
	}
	while(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool != null) {
		var nxt82 = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = nxt82;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool != null) {
		var nxt83 = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = nxt83;
	}
	while(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool != null) {
		var nxt84 = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = nxt84;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool != null) {
		var nxt85 = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = nxt85;
	}
	while(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool != null) {
		var nxt86 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = nxt86;
	}
	while(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool != null) {
		var nxt87 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = nxt87;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool != null) {
		var nxt88 = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = nxt88;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool != null) {
		var nxt89 = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = nxt89;
	}
	while(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool != null) {
		var nxt90 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = nxt90;
	}
	while(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool != null) {
		var nxt91 = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = nxt91;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool != null) {
		var nxt92 = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = nxt92;
	}
	while(zpp_nape.util.ZNPNode_RayResult.zpp_pool != null) {
		var nxt93 = zpp_nape.util.ZNPNode_RayResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = nxt93;
	}
	while(zpp_nape.util.ZPP_PubPool.poolGeomPoly != null) {
		var nxt94 = zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = nxt94;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec2 != null) {
		var nxt95 = zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec2 = nxt95;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec3 != null) {
		var nxt96 = zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec3 = nxt96;
	}
};
nape.util.Debug.prototype.__class__ = nape.util.Debug;
if(typeof sandbox=='undefined') sandbox = {};
sandbox.Main = $hxClasses['sandbox.Main'] = function() { };
sandbox.Main.__name__ = ["sandbox","Main"];
sandbox.Main.main = function() {
};
sandbox.Main.prototype.__class__ = sandbox.Main;
if(typeof zpp_nape=='undefined') zpp_nape = {};
zpp_nape.ZPP_Const = $hxClasses['zpp_nape.ZPP_Const'] = function() { };
zpp_nape.ZPP_Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_nape.ZPP_Const.POSINF = function() {
	return Math.POSITIVE_INFINITY;
};
zpp_nape.ZPP_Const.NEGINF = function() {
	return Math.NEGATIVE_INFINITY;
};
zpp_nape.ZPP_Const.prototype.__class__ = zpp_nape.ZPP_Const;
zpp_nape.ZPP_ID = $hxClasses['zpp_nape.ZPP_ID'] = function() { };
zpp_nape.ZPP_ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_nape.ZPP_ID.Constraint = function() {
	return zpp_nape.ZPP_ID._Constraint++;
};
zpp_nape.ZPP_ID.Interactor = function() {
	return zpp_nape.ZPP_ID._Interactor++;
};
zpp_nape.ZPP_ID.CbType = function() {
	return zpp_nape.ZPP_ID._CbType++;
};
zpp_nape.ZPP_ID.CbSet = function() {
	return zpp_nape.ZPP_ID._CbSet++;
};
zpp_nape.ZPP_ID.Listener = function() {
	return zpp_nape.ZPP_ID._Listener++;
};
zpp_nape.ZPP_ID.ZPP_SimpleVert = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleVert++;
};
zpp_nape.ZPP_ID.ZPP_SimpleSeg = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleSeg++;
};
zpp_nape.ZPP_ID.InteractionGroup = function() {
	return zpp_nape.ZPP_ID._InteractionGroup++;
};
zpp_nape.ZPP_ID.Space = function() {
	return zpp_nape.ZPP_ID._Space++;
};
zpp_nape.ZPP_ID.prototype.__class__ = zpp_nape.ZPP_ID;
if(!zpp_nape.callbacks) zpp_nape.callbacks = {};
zpp_nape.callbacks.ZPP_Callback = $hxClasses['zpp_nape.callbacks.ZPP_Callback'] = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
zpp_nape.callbacks.ZPP_Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_nape.callbacks.ZPP_Callback.prototype.outer_body = null;
zpp_nape.callbacks.ZPP_Callback.prototype.outer_con = null;
zpp_nape.callbacks.ZPP_Callback.prototype.outer_int = null;
zpp_nape.callbacks.ZPP_Callback.prototype.wrapper_body = function() {
	if(this.outer_body == null) {
		zpp_nape.callbacks.ZPP_Callback.internal = true;
		this.outer_body = new nape.callbacks.BodyCallback();
		zpp_nape.callbacks.ZPP_Callback.internal = false;
		this.outer_body.zpp_inner = this;
	}
	return this.outer_body;
};
zpp_nape.callbacks.ZPP_Callback.prototype.wrapper_con = function() {
	if(this.outer_con == null) {
		zpp_nape.callbacks.ZPP_Callback.internal = true;
		this.outer_con = new nape.callbacks.ConstraintCallback();
		zpp_nape.callbacks.ZPP_Callback.internal = false;
		this.outer_con.zpp_inner = this;
	}
	return this.outer_con;
};
zpp_nape.callbacks.ZPP_Callback.prototype.wrapper_int = function() {
	if(this.outer_int == null) {
		zpp_nape.callbacks.ZPP_Callback.internal = true;
		this.outer_int = new nape.callbacks.InteractionCallback();
		zpp_nape.callbacks.ZPP_Callback.internal = false;
		this.outer_int.zpp_inner = this;
	}
	if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
	this.wrap_arbiters.zpp_inner.zip_length = true;
	this.wrap_arbiters.zpp_inner.at_ite = null;
	return this.outer_int;
};
zpp_nape.callbacks.ZPP_Callback.prototype.event = null;
zpp_nape.callbacks.ZPP_Callback.prototype.listener = null;
zpp_nape.callbacks.ZPP_Callback.prototype.space = null;
zpp_nape.callbacks.ZPP_Callback.prototype.index = null;
zpp_nape.callbacks.ZPP_Callback.prototype.next = null;
zpp_nape.callbacks.ZPP_Callback.prototype.prev = null;
zpp_nape.callbacks.ZPP_Callback.prototype.length = null;
zpp_nape.callbacks.ZPP_Callback.prototype.push = function(obj) {
	if(this.prev != null) this.prev.next = obj; else this.next = obj;
	obj.prev = this.prev;
	obj.next = null;
	this.prev = obj;
	this.length++;
};
zpp_nape.callbacks.ZPP_Callback.prototype.push_rev = function(obj) {
	if(this.next != null) this.next.prev = obj; else this.prev = obj;
	obj.next = this.next;
	obj.prev = null;
	this.next = obj;
	this.length++;
};
zpp_nape.callbacks.ZPP_Callback.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	if(this.next == null) this.prev = null; else this.next.prev = null;
	this.length--;
	return ret;
};
zpp_nape.callbacks.ZPP_Callback.prototype.pop_rev = function() {
	var ret = this.prev;
	this.prev = ret.prev;
	if(this.prev == null) this.next = null; else this.prev.next = null;
	this.length--;
	return ret;
};
zpp_nape.callbacks.ZPP_Callback.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.callbacks.ZPP_Callback.prototype.clear = function() {
	while(!this.empty()) this.pop();
};
zpp_nape.callbacks.ZPP_Callback.prototype.splice = function(o) {
	var ret = o.next;
	if(o.prev == null) {
		this.next = o.next;
		if(this.next != null) this.next.prev = null; else this.prev = null;
	} else {
		o.prev.next = o.next;
		if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
	}
	this.length--;
	return ret;
};
zpp_nape.callbacks.ZPP_Callback.prototype.rotateL = function() {
	this.push(this.pop());
};
zpp_nape.callbacks.ZPP_Callback.prototype.rotateR = function() {
	this.push_rev(this.pop_rev());
};
zpp_nape.callbacks.ZPP_Callback.prototype.cycleNext = function(o) {
	if(o.next == null) return this.next; else return o.next;
};
zpp_nape.callbacks.ZPP_Callback.prototype.cyclePrev = function(o) {
	if(o.prev == null) return this.prev; else return o.prev;
};
zpp_nape.callbacks.ZPP_Callback.prototype.at = function(i) {
	var ret = this.next;
	while(i-- != 0) ret = ret.next;
	return ret;
};
zpp_nape.callbacks.ZPP_Callback.prototype.rev_at = function(i) {
	var ret = this.prev;
	while(i-- != 0) ret = ret.prev;
	return ret;
};
zpp_nape.callbacks.ZPP_Callback.prototype.free = function() {
	this.int1 = this.int2 = null;
	this.body = null;
	this.constraint = null;
	this.listener = null;
	if(this.wrap_arbiters != null) this.wrap_arbiters.zpp_inner.inner = null;
	this.set = null;
};
zpp_nape.callbacks.ZPP_Callback.prototype.alloc = function() {
};
zpp_nape.callbacks.ZPP_Callback.prototype.int1 = null;
zpp_nape.callbacks.ZPP_Callback.prototype.int2 = null;
zpp_nape.callbacks.ZPP_Callback.prototype.set = null;
zpp_nape.callbacks.ZPP_Callback.prototype.wrap_arbiters = null;
zpp_nape.callbacks.ZPP_Callback.prototype.pre_arbiter = null;
zpp_nape.callbacks.ZPP_Callback.prototype.pre_swapped = null;
zpp_nape.callbacks.ZPP_Callback.prototype.genarbs = function() {
	if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
	this.wrap_arbiters.zpp_inner.zip_length = true;
	this.wrap_arbiters.zpp_inner.at_ite = null;
};
zpp_nape.callbacks.ZPP_Callback.prototype.body = null;
zpp_nape.callbacks.ZPP_Callback.prototype.constraint = null;
zpp_nape.callbacks.ZPP_Callback.prototype.__class__ = zpp_nape.callbacks.ZPP_Callback;
zpp_nape.callbacks.ZPP_CbSet = $hxClasses['zpp_nape.callbacks.ZPP_CbSet'] = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.id = zpp_nape.ZPP_ID.CbSet();
	this.cbpairs = new zpp_nape.util.ZNPList_ZPP_CbSetPair();
};
zpp_nape.callbacks.ZPP_CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_nape.callbacks.ZPP_CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) return true;
		if(cb.id < ca.id) return false; else {
			i = i.next;
			j = j.next;
		}
	}
	return j != null && i == null;
};
zpp_nape.callbacks.ZPP_CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSet(); else {
		ret = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_CbSet.compatible = function(i,a,b) {
	return i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes) || i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes);
};
zpp_nape.callbacks.ZPP_CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).empty_intersection();
};
zpp_nape.callbacks.ZPP_CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
};
zpp_nape.callbacks.ZPP_CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
};
zpp_nape.callbacks.ZPP_CbSet.prototype.cbTypes = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.count = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.next = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.id = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.manager = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.cbpairs = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.increment = function() {
	this.count++;
};
zpp_nape.callbacks.ZPP_CbSet.prototype.decrement = function() {
	return --this.count == 0;
};
zpp_nape.callbacks.ZPP_CbSet.prototype.invalidate_pairs = function() {
	var cx_ite = this.cbpairs.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.zip_listeners = true;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.listeners = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.zip_listeners = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.invalidate_listeners = function() {
	this.zip_listeners = true;
	this.invalidate_pairs();
};
zpp_nape.callbacks.ZPP_CbSet.prototype.validate_listeners = function() {
	if(this.zip_listeners) {
		this.zip_listeners = false;
		this.realvalidate_listeners();
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.realvalidate_listeners = function() {
	this.listeners.clear();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		var npre = null;
		var nite = this.listeners.head;
		var cite = cb.listeners.head;
		while(cite != null) {
			var cx = cite.elt;
			if(nite != null && nite.elt == cx) {
				cite = cite.next;
				npre = nite;
				nite = nite.next;
			} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
				if(cx.space == this.manager.space) npre = this.listeners.inlined_insert(npre,cx);
				cite = cite.next;
			} else {
				npre = nite;
				nite = nite.next;
			}
		}
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.bodylisteners = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.zip_bodylisteners = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.invalidate_bodylisteners = function() {
	this.zip_bodylisteners = true;
};
zpp_nape.callbacks.ZPP_CbSet.prototype.validate_bodylisteners = function() {
	if(this.zip_bodylisteners) {
		this.zip_bodylisteners = false;
		this.realvalidate_bodylisteners();
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.realvalidate_bodylisteners = function() {
	this.bodylisteners.clear();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		var npre = null;
		var nite = this.bodylisteners.head;
		var cite = cb.bodylisteners.head;
		while(cite != null) {
			var cx = cite.elt;
			if(nite != null && nite.elt == cx) {
				cite = cite.next;
				npre = nite;
				nite = nite.next;
			} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
				if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.bodylisteners.inlined_insert(npre,cx);
				cite = cite.next;
			} else {
				npre = nite;
				nite = nite.next;
			}
		}
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.conlisteners = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.zip_conlisteners = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.invalidate_conlisteners = function() {
	this.zip_conlisteners = true;
};
zpp_nape.callbacks.ZPP_CbSet.prototype.validate_conlisteners = function() {
	if(this.zip_conlisteners) {
		this.zip_conlisteners = false;
		this.realvalidate_conlisteners();
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.realvalidate_conlisteners = function() {
	this.conlisteners.clear();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		var npre = null;
		var nite = this.conlisteners.head;
		var cite = cb.conlisteners.head;
		while(cite != null) {
			var cx = cite.elt;
			if(nite != null && nite.elt == cx) {
				cite = cite.next;
				npre = nite;
				nite = nite.next;
			} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
				if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.conlisteners.inlined_insert(npre,cx);
				cite = cite.next;
			} else {
				npre = nite;
				nite = nite.next;
			}
		}
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.validate = function() {
	if(this.zip_listeners) {
		this.zip_listeners = false;
		this.realvalidate_listeners();
	}
	if(this.zip_bodylisteners) {
		this.zip_bodylisteners = false;
		this.realvalidate_bodylisteners();
	}
	if(this.zip_conlisteners) {
		this.zip_conlisteners = false;
		this.realvalidate_conlisteners();
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.interactors = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.wrap_interactors = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.constraints = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.wrap_constraints = null;
zpp_nape.callbacks.ZPP_CbSet.prototype.addConstraint = function(con) {
	this.constraints.add(con);
};
zpp_nape.callbacks.ZPP_CbSet.prototype.addInteractor = function(intx) {
	this.interactors.add(intx);
};
zpp_nape.callbacks.ZPP_CbSet.prototype.remConstraint = function(con) {
	this.constraints.remove(con);
};
zpp_nape.callbacks.ZPP_CbSet.prototype.remInteractor = function(intx) {
	this.interactors.remove(intx);
};
zpp_nape.callbacks.ZPP_CbSet.prototype.free = function() {
	this.listeners.clear();
	this.zip_listeners = true;
	this.bodylisteners.clear();
	this.zip_bodylisteners = true;
	this.conlisteners.clear();
	this.zip_conlisteners = true;
	while(!(this.cbTypes.head == null)) {
		var cb = this.cbTypes.pop_unsafe();
		cb.cbsets.remove(this);
	}
};
zpp_nape.callbacks.ZPP_CbSet.prototype.alloc = function() {
};
zpp_nape.callbacks.ZPP_CbSet.prototype.__class__ = zpp_nape.callbacks.ZPP_CbSet;
zpp_nape.callbacks.ZPP_CbSetPair = $hxClasses['zpp_nape.callbacks.ZPP_CbSetPair'] = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
};
zpp_nape.callbacks.ZPP_CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_nape.callbacks.ZPP_CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSetPair(); else {
		ret = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_CbSetPair.setlt = function(x,y) {
	return zpp_nape.callbacks.ZPP_CbSet.setlt(x.a,y.a) || x.a == y.a && zpp_nape.callbacks.ZPP_CbSet.setlt(x.b,y.b);
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.a = null;
zpp_nape.callbacks.ZPP_CbSetPair.prototype.b = null;
zpp_nape.callbacks.ZPP_CbSetPair.prototype.next = null;
zpp_nape.callbacks.ZPP_CbSetPair.prototype.free = function() {
	this.a = this.b = null;
	this.listeners.clear();
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.alloc = function() {
	this.zip_listeners = true;
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.compatible = function(i) {
	return i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes) || i.options2.compatible(this.a.cbTypes) && i.options1.compatible(this.b.cbTypes);
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.zip_listeners = null;
zpp_nape.callbacks.ZPP_CbSetPair.prototype.listeners = null;
zpp_nape.callbacks.ZPP_CbSetPair.prototype.invalidate = function() {
	this.zip_listeners = true;
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.validate = function() {
	if(this.zip_listeners) {
		this.zip_listeners = false;
		this.__validate();
	}
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.__validate = function() {
	this.listeners.clear();
	var aite = this.a.listeners.head;
	var bite = this.b.listeners.head;
	while(aite != null && bite != null) {
		var ax = aite.elt;
		var bx = bite.elt;
		if(ax == bx) {
			if(ax.options1.compatible(this.a.cbTypes) && ax.options2.compatible(this.b.cbTypes) || ax.options2.compatible(this.a.cbTypes) && ax.options1.compatible(this.b.cbTypes)) this.listeners.add(ax);
			aite = aite.next;
			bite = bite.next;
		} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) aite = aite.next; else bite = bite.next;
	}
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.empty_intersection = function() {
	return this.listeners.head == null;
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.single_intersection = function(i) {
	var ite = this.listeners.head;
	return ite != null && ite.elt == i && ite.next == null;
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.forall = function(event,cb) {
	var cx_ite = this.listeners.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.event == event) cb(x);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbSetPair.prototype.__class__ = zpp_nape.callbacks.ZPP_CbSetPair;
if(!zpp_nape.util) zpp_nape.util = {};
zpp_nape.util.ZNPList_ZPP_InteractionListener = $hxClasses['zpp_nape.util.ZNPList_ZPP_InteractionListener'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_InteractionListener;
zpp_nape.util.ZNPList_ZPP_BodyListener = $hxClasses['zpp_nape.util.ZNPList_ZPP_BodyListener'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_BodyListener;
zpp_nape.util.ZNPList_ZPP_ConstraintListener = $hxClasses['zpp_nape.util.ZNPList_ZPP_ConstraintListener'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_ConstraintListener;
zpp_nape.util.ZNPList_ZPP_Constraint = $hxClasses['zpp_nape.util.ZNPList_ZPP_Constraint'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Constraint;
zpp_nape.util.ZNPList_ZPP_Interactor = $hxClasses['zpp_nape.util.ZNPList_ZPP_Interactor'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Interactor.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Interactor;
zpp_nape.util.ZNPList_ZPP_CbSet = $hxClasses['zpp_nape.util.ZNPList_ZPP_CbSet'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_CbSet.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_CbSet;
zpp_nape.callbacks.ZPP_CbType = $hxClasses['zpp_nape.callbacks.ZPP_CbType'] = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CbSet();
};
zpp_nape.callbacks.ZPP_CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_nape.callbacks.ZPP_CbType.setlt = function(a,b) {
	return a.id < b.id;
};
zpp_nape.callbacks.ZPP_CbType.prototype.outer = null;
zpp_nape.callbacks.ZPP_CbType.prototype.userData = null;
zpp_nape.callbacks.ZPP_CbType.prototype.id = null;
zpp_nape.callbacks.ZPP_CbType.prototype.cbsets = null;
zpp_nape.callbacks.ZPP_CbType.prototype.interactors = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrap_interactors = null;
zpp_nape.callbacks.ZPP_CbType.prototype.constraints = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrap_constraints = null;
zpp_nape.callbacks.ZPP_CbType.prototype.addConstraint = function(con) {
	this.constraints.add(con);
};
zpp_nape.callbacks.ZPP_CbType.prototype.addInteractor = function(intx) {
	this.interactors.add(intx);
};
zpp_nape.callbacks.ZPP_CbType.prototype.remConstraint = function(con) {
	this.constraints.remove(con);
};
zpp_nape.callbacks.ZPP_CbType.prototype.remInteractor = function(intx) {
	this.interactors.remove(intx);
};
zpp_nape.callbacks.ZPP_CbType.prototype.listeners = null;
zpp_nape.callbacks.ZPP_CbType.prototype.addint = function(x) {
	var pre = null;
	var cx_ite = this.listeners.head;
	while(cx_ite != null) {
		var j = cx_ite.elt;
		if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	this.listeners.inlined_insert(pre,x);
	this.invalidateint();
};
zpp_nape.callbacks.ZPP_CbType.prototype.removeint = function(x) {
	this.listeners.remove(x);
	this.invalidateint();
};
zpp_nape.callbacks.ZPP_CbType.prototype.invalidateint = function() {
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.zip_listeners = true;
		cb.invalidate_pairs();
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbType.prototype.bodylisteners = null;
zpp_nape.callbacks.ZPP_CbType.prototype.addbody = function(x) {
	var pre = null;
	var cx_ite = this.bodylisteners.head;
	while(cx_ite != null) {
		var j = cx_ite.elt;
		if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	this.bodylisteners.inlined_insert(pre,x);
	this.invalidatebody();
};
zpp_nape.callbacks.ZPP_CbType.prototype.removebody = function(x) {
	this.bodylisteners.remove(x);
	this.invalidatebody();
};
zpp_nape.callbacks.ZPP_CbType.prototype.invalidatebody = function() {
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.zip_bodylisteners = true;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbType.prototype.conlisteners = null;
zpp_nape.callbacks.ZPP_CbType.prototype.addconstraint = function(x) {
	var pre = null;
	var cx_ite = this.conlisteners.head;
	while(cx_ite != null) {
		var j = cx_ite.elt;
		if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	this.conlisteners.inlined_insert(pre,x);
	this.invalidateconstraint();
};
zpp_nape.callbacks.ZPP_CbType.prototype.removeconstraint = function(x) {
	this.conlisteners.remove(x);
	this.invalidateconstraint();
};
zpp_nape.callbacks.ZPP_CbType.prototype.invalidateconstraint = function() {
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.zip_conlisteners = true;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_CbType.prototype.__class__ = zpp_nape.callbacks.ZPP_CbType;
zpp_nape.util.ZPP_Flags = $hxClasses['zpp_nape.util.ZPP_Flags'] = function() { };
zpp_nape.util.ZPP_Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = null;
zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = null;
zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = null;
zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.MassMode_FIXED = null;
zpp_nape.util.ZPP_Flags.BodyType_STATIC = null;
zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = null;
zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = null;
zpp_nape.util.ZPP_Flags.ListenerType_BODY = null;
zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = null;
zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = null;
zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = null;
zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = null;
zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = null;
zpp_nape.util.ZPP_Flags.ListenerType_PRE = null;
zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = null;
zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = null;
zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = null;
zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = null;
zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = null;
zpp_nape.util.ZPP_Flags.CbEvent_END = null;
zpp_nape.util.ZPP_Flags.InteractionType_FLUID = null;
zpp_nape.util.ZPP_Flags.CbEvent_WAKE = null;
zpp_nape.util.ZPP_Flags.InteractionType_ANY = null;
zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = null;
zpp_nape.util.ZPP_Flags.CbEvent_BREAK = null;
zpp_nape.util.ZPP_Flags.CbEvent_PRE = null;
zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = null;
zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = null;
zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_VALID = null;
zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = null;
zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = null;
zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = null;
zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = null;
zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = null;
zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = null;
zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = null;
zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = null;
zpp_nape.util.ZPP_Flags.prototype.__class__ = zpp_nape.util.ZPP_Flags;
zpp_nape.callbacks.ZPP_Listener = $hxClasses['zpp_nape.callbacks.ZPP_Listener'] = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.Listener();
};
zpp_nape.callbacks.ZPP_Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_nape.callbacks.ZPP_Listener.setlt = function(a,b) {
	return a.precedence > b.precedence || a.precedence == b.precedence && a.id > b.id;
};
zpp_nape.callbacks.ZPP_Listener.prototype.outer = null;
zpp_nape.callbacks.ZPP_Listener.prototype.id = null;
zpp_nape.callbacks.ZPP_Listener.prototype.type = null;
zpp_nape.callbacks.ZPP_Listener.prototype.event = null;
zpp_nape.callbacks.ZPP_Listener.prototype.precedence = null;
zpp_nape.callbacks.ZPP_Listener.prototype.body = null;
zpp_nape.callbacks.ZPP_Listener.prototype.constraint = null;
zpp_nape.callbacks.ZPP_Listener.prototype.interaction = null;
zpp_nape.callbacks.ZPP_Listener.prototype.space = null;
zpp_nape.callbacks.ZPP_Listener.prototype.swapEvent = function(event) {
};
zpp_nape.callbacks.ZPP_Listener.prototype.invalidate_precedence = function() {
};
zpp_nape.callbacks.ZPP_Listener.prototype.addedToSpace = function() {
};
zpp_nape.callbacks.ZPP_Listener.prototype.removedFromSpace = function() {
};
zpp_nape.callbacks.ZPP_Listener.prototype.__class__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_BodyListener = $hxClasses['zpp_nape.callbacks.ZPP_BodyListener'] = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_BODY;
	this.options = options.zpp_inner;
};
zpp_nape.callbacks.ZPP_BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_nape.callbacks.ZPP_BodyListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_BodyListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_BodyListener.prototype.outer_zn = null;
zpp_nape.callbacks.ZPP_BodyListener.prototype.options = null;
zpp_nape.callbacks.ZPP_BodyListener.prototype.handler = null;
zpp_nape.callbacks.ZPP_BodyListener.prototype.immutable_options = function() {
	if(this.space != null && this.space.midstep) throw "Error: Cannot change listener type options during space.step()";
};
zpp_nape.callbacks.ZPP_BodyListener.prototype.addedToSpace = function() {
	this.options.handler = $bind(this,this.cbtype_change);
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.addbody(this);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_BodyListener.prototype.removedFromSpace = function() {
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.bodylisteners.remove(this);
		cb.invalidatebody();
		cx_ite = cx_ite.next;
	}
	this.options.handler = null;
};
zpp_nape.callbacks.ZPP_BodyListener.prototype.cbtype_change = function(cb,included,added) {
	this.removedFromSpace();
	this.options.effect_change(cb,included,added);
	this.addedToSpace();
};
zpp_nape.callbacks.ZPP_BodyListener.prototype.invalidate_precedence = function() {
	if(this.space != null) {
		this.removedFromSpace();
		this.addedToSpace();
	}
};
zpp_nape.callbacks.ZPP_BodyListener.prototype.swapEvent = function(newev) {
	if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) throw "Error: BodyListener event must be either WAKE or SLEEP only";
	this.removedFromSpace();
	this.event = newev;
	this.addedToSpace();
};
zpp_nape.callbacks.ZPP_BodyListener.prototype.__class__ = zpp_nape.callbacks.ZPP_BodyListener;
zpp_nape.callbacks.ZPP_ConstraintListener = $hxClasses['zpp_nape.callbacks.ZPP_ConstraintListener'] = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT;
	this.options = options.zpp_inner;
};
zpp_nape.callbacks.ZPP_ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_nape.callbacks.ZPP_ConstraintListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_ConstraintListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.outer_zn = null;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.options = null;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.handler = null;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.immutable_options = function() {
	if(this.space != null && this.space.midstep) throw "Error: Cannot change listener type options during space.step()";
};
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.addedToSpace = function() {
	this.options.handler = $bind(this,this.cbtype_change);
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.addconstraint(this);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.removedFromSpace = function() {
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.conlisteners.remove(this);
		cb.invalidateconstraint();
		cx_ite = cx_ite.next;
	}
	this.options.handler = null;
};
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.cbtype_change = function(cb,included,added) {
	this.removedFromSpace();
	this.options.effect_change(cb,included,added);
	this.addedToSpace();
};
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.invalidate_precedence = function() {
	if(this.space != null) {
		this.removedFromSpace();
		this.addedToSpace();
	}
};
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.swapEvent = function(newev) {
	if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) throw "Error: ConstraintListener event must be either WAKE or SLEEP only";
	this.removedFromSpace();
	this.event = newev;
	this.addedToSpace();
};
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.__class__ = zpp_nape.callbacks.ZPP_ConstraintListener;
zpp_nape.util.ZNPList_ZPP_CbType = $hxClasses['zpp_nape.util.ZNPList_ZPP_CbType'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_nape.util.ZNPList_ZPP_CbType.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_CbType.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_CbType.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_CbType.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_CbType.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_CbType.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_CbType;
zpp_nape.callbacks.ZPP_InteractionListener = $hxClasses['zpp_nape.callbacks.ZPP_InteractionListener'] = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
zpp_nape.callbacks.ZPP_InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_nape.callbacks.ZPP_InteractionListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_InteractionListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_InteractionListener.prototype.outer_zni = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.outer_znp = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.itype = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.options1 = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.options2 = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.handleri = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.allowSleepingCallbacks = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.pure = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.handlerp = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.setInteractionType = function(itype) {
	this.itype = itype;
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.wake = function() {
	this.with_union(function(cb) {
		var cx_ite = cb.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			i.wake();
			cx_ite = cx_ite.next;
		}
	});
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.CbSetset = function(A,B,lambda) {
	var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbSet;
	var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbSet;
	var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbSet;
	var aite = A.head;
	var bite = B.head;
	while(aite != null && bite != null) {
		var a = aite.elt;
		var b = bite.elt;
		if(a == b) {
			W.inlined_add(a);
			aite = aite.next;
			bite = bite.next;
		} else if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
			U.inlined_add(a);
			aite = aite.next;
		} else {
			V.inlined_add(b);
			bite = bite.next;
		}
	}
	while(aite != null) {
		U.inlined_add(aite.elt);
		aite = aite.next;
	}
	while(bite != null) {
		V.inlined_add(bite.elt);
		bite = bite.next;
	}
	while(!(U.head == null)) {
		var x = U.pop_unsafe();
		var cx_ite = B.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			lambda(x,y);
			cx_ite = cx_ite.next;
		}
	}
	while(!(V.head == null)) {
		var x1 = V.pop_unsafe();
		var cx_ite1 = W.head;
		while(cx_ite1 != null) {
			var y1 = cx_ite1.elt;
			lambda(x1,y1);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(!(W.head == null)) {
		var x2 = W.pop_unsafe();
		lambda(x2,x2);
		var cx_ite2 = W.head;
		while(cx_ite2 != null) {
			var y2 = cx_ite2.elt;
			lambda(x2,y2);
			cx_ite2 = cx_ite2.next;
		}
	}
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.CbTypeset = function(A,B,lambda) {
	var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbType;
	var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbType;
	var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbType;
	var aite = A.head;
	var bite = B.head;
	while(aite != null && bite != null) {
		var a = aite.elt;
		var b = bite.elt;
		if(a == b) {
			W.inlined_add(a);
			aite = aite.next;
			bite = bite.next;
		} else if(a.id < b.id) {
			U.inlined_add(a);
			aite = aite.next;
		} else {
			V.inlined_add(b);
			bite = bite.next;
		}
	}
	while(aite != null) {
		U.inlined_add(aite.elt);
		aite = aite.next;
	}
	while(bite != null) {
		V.inlined_add(bite.elt);
		bite = bite.next;
	}
	while(!(U.head == null)) {
		var x = U.pop_unsafe();
		var cx_ite = B.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			lambda(x,y);
			cx_ite = cx_ite.next;
		}
	}
	while(!(V.head == null)) {
		var x1 = V.pop_unsafe();
		var cx_ite1 = W.head;
		while(cx_ite1 != null) {
			var y1 = cx_ite1.elt;
			lambda(x1,y1);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(!(W.head == null)) {
		var x2 = W.pop_unsafe();
		lambda(x2,x2);
		var cx_ite2 = W.head;
		while(cx_ite2 != null) {
			var y2 = cx_ite2.elt;
			lambda(x2,y2);
			cx_ite2 = cx_ite2.next;
		}
	}
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.with_uniquesets = function(fresh) {
	var _g = this;
	var set;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) set = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
		set = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = set.next;
		set.next = null;
	}
	null;
	set.lt = zpp_nape.callbacks.ZPP_CbSetPair.setlt;
	this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
		_g.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
			a1.validate();
			b1.validate();
			if(zpp_nape.callbacks.ZPP_CbSet.single_intersection(a1,b1,_g)) set.try_insert(zpp_nape.callbacks.ZPP_CbSetPair.get(a1,b1));
		});
	});
	set.clear_with(function(pair) {
		if(fresh) _g.space.freshListenerType(pair.a,pair.b); else _g.space.nullListenerType(pair.a,pair.b);
		var o = pair;
		o.a = o.b = null;
		o.listeners.clear();
		o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
	});
	var o1 = set;
	o1.data = null;
	o1.lt = null;
	o1.swapped = null;
	o1.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o1;
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.with_union = function(lambda) {
	var ite1 = this.options1.includes.head;
	var ite2 = this.options2.includes.head;
	while(ite1 != null && ite2 != null) {
		var cb1 = ite1.elt;
		var cb2 = ite2.elt;
		if(cb1 == cb2) {
			lambda(cb1);
			ite1 = ite1.next;
			ite2 = ite2.next;
		} else if(cb1.id < cb2.id) {
			lambda(cb1);
			ite1 = ite1.next;
		} else {
			lambda(cb2);
			ite2 = ite2.next;
		}
	}
	while(ite1 != null) {
		lambda(ite1.elt);
		ite1 = ite1.next;
	}
	while(ite2 != null) {
		lambda(ite2.elt);
		ite2 = ite2.next;
	}
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.addedToSpace = function() {
	var _g = this;
	var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
	this.with_union(function(cb) {
		cb.addint(_g);
		if(pre) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		}
	});
	this.options1.handler = $bind(this,this.cbtype_change1);
	this.options2.handler = $bind(this,this.cbtype_change2);
	this.with_uniquesets(true);
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.removedFromSpace = function() {
	var _g = this;
	this.with_uniquesets(false);
	var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
	this.with_union(function(cb) {
		cb.listeners.remove(_g);
		cb.invalidateint();
		if(pre) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		}
	});
	this.options1.handler = null;
	this.options2.handler = null;
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.invalidate_precedence = function() {
	var _g = this;
	if(this.space != null) {
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.listeners.remove(_g);
			cb.invalidateint();
			cb.addint(_g);
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
	}
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.cbtype_change1 = function(cb,included,added) {
	this.cbtype_change(this.options1,cb,included,added);
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.cbtype_change2 = function(cb,included,added) {
	this.cbtype_change(this.options2,cb,included,added);
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.cbtype_change = function(options,cb,included,added) {
	this.removedFromSpace();
	options.effect_change(cb,included,added);
	this.addedToSpace();
	null;
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.swapEvent = function(newev) {
	if(this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE) throw "Error: PreListener event can only be PRE"; else if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_END && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING) throw "Error: InteractionListener event must be either BEGIN, END, ONGOING";
	this.removedFromSpace();
	this.event = newev;
	this.addedToSpace();
};
zpp_nape.callbacks.ZPP_InteractionListener.prototype.__class__ = zpp_nape.callbacks.ZPP_InteractionListener;
zpp_nape.callbacks.ZPP_OptionType = $hxClasses['zpp_nape.callbacks.ZPP_OptionType'] = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.excludes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.callbacks.ZPP_OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_nape.callbacks.ZPP_OptionType.argument = function(val) {
	if(val == null) return new nape.callbacks.OptionType(); else if(js.Boot.__instanceof(val,nape.callbacks.OptionType)) return val; else return new nape.callbacks.OptionType().including(val);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.outer = null;
zpp_nape.callbacks.ZPP_OptionType.prototype.handler = null;
zpp_nape.callbacks.ZPP_OptionType.prototype.includes = null;
zpp_nape.callbacks.ZPP_OptionType.prototype.excludes = null;
zpp_nape.callbacks.ZPP_OptionType.prototype.wrap_includes = null;
zpp_nape.callbacks.ZPP_OptionType.prototype.wrap_excludes = null;
zpp_nape.callbacks.ZPP_OptionType.prototype.setup_includes = function() {
	this.wrap_includes = zpp_nape.util.ZPP_CbTypeList.get(this.includes,true);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.setup_excludes = function() {
	this.wrap_excludes = zpp_nape.util.ZPP_CbTypeList.get(this.excludes,true);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.excluded = function(xs) {
	return this.nonemptyintersection(xs,this.excludes);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.included = function(xs) {
	return this.nonemptyintersection(xs,this.includes);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.compatible = function(xs) {
	return this.nonemptyintersection(xs,this.includes) && !this.nonemptyintersection(xs,this.excludes);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.nonemptyintersection = function(xs,ys) {
	var ret = false;
	var xite = xs.head;
	var eite = ys.head;
	while(eite != null && xite != null) {
		var ex = eite.elt;
		var xi = xite.elt;
		if(ex == xi) {
			ret = true;
			break;
		} else if(ex.id < xi.id) eite = eite.next; else xite = xite.next;
	}
	return ret;
};
zpp_nape.callbacks.ZPP_OptionType.prototype.effect_change = function(val,included,added) {
	if(included) {
		if(added) {
			var pre = null;
			var cx_ite = this.includes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(val.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.includes.inlined_insert(pre,val);
		} else this.includes.remove(val);
	} else if(added) {
		var pre1 = null;
		var cx_ite1 = this.excludes.head;
		while(cx_ite1 != null) {
			var j1 = cx_ite1.elt;
			if(val.id < j1.id) break;
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		this.excludes.inlined_insert(pre1,val);
	} else this.excludes.remove(val);
};
zpp_nape.callbacks.ZPP_OptionType.prototype.append_type = function(list,val) {
	if(list == this.includes) {
		if(!this.includes.has(val)) {
			if(!this.excludes.has(val)) {
				if(this.handler != null) this.handler(val,true,true); else this.effect_change(val,true,true);
			} else if(this.handler != null) this.handler(val,false,false); else this.effect_change(val,false,false);
		}
	} else if(!this.excludes.has(val)) {
		if(!this.includes.has(val)) {
			if(this.handler != null) this.handler(val,false,true); else this.effect_change(val,false,true);
		} else if(this.handler != null) this.handler(val,true,false); else this.effect_change(val,true,false);
	}
};
zpp_nape.callbacks.ZPP_OptionType.prototype.set = function(options) {
	if(options != this) {
		while(!(this.includes.head == null)) this.append_type(this.excludes,this.includes.head.elt);
		while(!(this.excludes.head == null)) this.append_type(this.includes,this.excludes.head.elt);
		var cx_ite = options.excludes.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.append_type(this.excludes,i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = options.includes.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.append_type(this.includes,i1);
			cx_ite1 = cx_ite1.next;
		}
	}
	return this;
};
zpp_nape.callbacks.ZPP_OptionType.prototype.append = function(list,val) {
	if(val == null) throw "Error: Cannot append null, only CbType and CbType list values";
	if(js.Boot.__instanceof(val,nape.callbacks.CbType)) {
		var cb = val;
		this.append_type(list,cb.zpp_inner);
	} else if(js.Boot.__instanceof(val,nape.callbacks.CbTypeList)) {
		var cbs = val;
		var _g;
		cbs.zpp_inner.valmod();
		_g = nape.callbacks.CbTypeIterator.get(cbs);
		while(_g.hasNext()) {
			var cb1;
			_g.zpp_critical = false;
			cb1 = _g.zpp_inner.at(_g.zpp_i++);
			this.append_type(list,cb1.zpp_inner);
		}
	} else if((val instanceof Array) && val.__enum__ == null) {
		var cbs1 = val;
		var _g1 = 0;
		while(_g1 < cbs1.length) {
			var cb2 = cbs1[_g1];
			++_g1;
			if(!js.Boot.__instanceof(cb2,nape.callbacks.CbType)) throw "Error: Cannot append non-CbType or CbType list value";
			var cbx = cb2;
			this.append_type(list,cbx.zpp_inner);
		}
	} else throw "Error: Cannot append non-CbType or CbType list value";
};
zpp_nape.callbacks.ZPP_OptionType.prototype.__class__ = zpp_nape.callbacks.ZPP_OptionType;
if(!zpp_nape.constraint) zpp_nape.constraint = {};
zpp_nape.constraint.ZPP_Constraint = $hxClasses['zpp_nape.constraint.ZPP_Constraint'] = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_nape.ZPP_ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Math.POSITIVE_INFINITY;
	this.maxError = Math.POSITIVE_INFINITY;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.constraint.ZPP_Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_nape.constraint.ZPP_Constraint.prototype.outer = null;
zpp_nape.constraint.ZPP_Constraint.prototype.clear = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.id = null;
zpp_nape.constraint.ZPP_Constraint.prototype.userData = null;
zpp_nape.constraint.ZPP_Constraint.prototype.compound = null;
zpp_nape.constraint.ZPP_Constraint.prototype.space = null;
zpp_nape.constraint.ZPP_Constraint.prototype.active = null;
zpp_nape.constraint.ZPP_Constraint.prototype.stiff = null;
zpp_nape.constraint.ZPP_Constraint.prototype.frequency = null;
zpp_nape.constraint.ZPP_Constraint.prototype.damping = null;
zpp_nape.constraint.ZPP_Constraint.prototype.maxForce = null;
zpp_nape.constraint.ZPP_Constraint.prototype.maxError = null;
zpp_nape.constraint.ZPP_Constraint.prototype.breakUnderForce = null;
zpp_nape.constraint.ZPP_Constraint.prototype.breakUnderError = null;
zpp_nape.constraint.ZPP_Constraint.prototype.removeOnBreak = null;
zpp_nape.constraint.ZPP_Constraint.prototype.component = null;
zpp_nape.constraint.ZPP_Constraint.prototype.ignore = null;
zpp_nape.constraint.ZPP_Constraint.prototype.__velocity = null;
zpp_nape.constraint.ZPP_Constraint.prototype.immutable_midstep = function(name) {
	if(this.space != null && this.space.midstep) throw "Error: Constraint::" + name + " cannot be set during space step()";
};
zpp_nape.constraint.ZPP_Constraint.prototype.cbTypes = null;
zpp_nape.constraint.ZPP_Constraint.prototype.cbSet = null;
zpp_nape.constraint.ZPP_Constraint.prototype.wrap_cbTypes = null;
zpp_nape.constraint.ZPP_Constraint.prototype.setupcbTypes = function() {
	this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
	this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
	this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
	this.wrap_cbTypes.zpp_inner.dontremove = true;
	this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
};
zpp_nape.constraint.ZPP_Constraint.prototype.immutable_cbTypes = function() {
	this.immutable_midstep("Constraint::cbTypes");
};
zpp_nape.constraint.ZPP_Constraint.prototype.wrap_cbTypes_subber = function(pcb) {
	var cb = pcb.zpp_inner;
	if(this.cbTypes.has(cb)) {
		if(this.space != null) {
			this.dealloc_cbSet();
			cb.constraints.remove(this);
		}
		this.cbTypes.remove(cb);
		if(this.space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
zpp_nape.constraint.ZPP_Constraint.prototype.wrap_cbTypes_adder = function(cb) {
	this.insert_cbtype(cb.zpp_inner);
	return false;
};
zpp_nape.constraint.ZPP_Constraint.prototype.insert_cbtype = function(cb) {
	if(!this.cbTypes.has(cb)) {
		if(this.space != null) {
			this.dealloc_cbSet();
			cb.constraints.add(this);
		}
		var pre = null;
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(cb.id < j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.cbTypes.inlined_insert(pre,cb);
		if(this.space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
zpp_nape.constraint.ZPP_Constraint.prototype.alloc_cbSet = function() {
	if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
		this.cbSet.count++;
		this.cbSet.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_Constraint.prototype.dealloc_cbSet = function() {
	if(this.cbSet != null) {
		this.cbSet.constraints.remove(this);
		if(--this.cbSet.count == 0) {
			this.space.cbsets.remove(this.cbSet);
			var o = this.cbSet;
			o.free();
			o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
		}
		this.cbSet = null;
	}
};
zpp_nape.constraint.ZPP_Constraint.prototype.activate = function() {
	if(this.space != null) this.activeInSpace();
};
zpp_nape.constraint.ZPP_Constraint.prototype.deactivate = function() {
	if(this.space != null) this.inactiveOrOutSpace();
};
zpp_nape.constraint.ZPP_Constraint.prototype.addedToSpace = function() {
	if(this.active) this.activeInSpace();
	this.activeBodies();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.constraints.add(this);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.constraint.ZPP_Constraint.prototype.removedFromSpace = function() {
	if(this.active) this.inactiveOrOutSpace();
	this.inactiveBodies();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.constraints.remove(this);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.constraint.ZPP_Constraint.prototype.activeInSpace = function() {
	this.alloc_cbSet();
	if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
		this.component = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
		this.component.next = null;
	}
	null;
	this.component.isBody = false;
	this.component.constraint = this;
};
zpp_nape.constraint.ZPP_Constraint.prototype.inactiveOrOutSpace = function() {
	this.dealloc_cbSet();
	var o = this.component;
	o.body = null;
	o.constraint = null;
	null;
	o.next = zpp_nape.space.ZPP_Component.zpp_pool;
	zpp_nape.space.ZPP_Component.zpp_pool = o;
	this.component = null;
};
zpp_nape.constraint.ZPP_Constraint.prototype.activeBodies = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.inactiveBodies = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.clearcache = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.validate = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.wake_connected = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.forest = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.pair_exists = function(id,di) {
	return false;
};
zpp_nape.constraint.ZPP_Constraint.prototype.broken = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.warmStart = function() {
};
zpp_nape.constraint.ZPP_Constraint.prototype.pre_dt = null;
zpp_nape.constraint.ZPP_Constraint.prototype.preStep = function(dt) {
	return false;
};
zpp_nape.constraint.ZPP_Constraint.prototype.applyImpulseVel = function() {
	return false;
};
zpp_nape.constraint.ZPP_Constraint.prototype.applyImpulsePos = function() {
	return false;
};
zpp_nape.constraint.ZPP_Constraint.prototype.wake = function() {
	if(this.space != null) this.space.wake_constraint(this);
};
zpp_nape.constraint.ZPP_Constraint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_Constraint.prototype.copy = function(dict,todo) {
	return null;
};
zpp_nape.constraint.ZPP_Constraint.prototype.copyto = function(ret) {
	var me = this.outer;
	var _g = ((function($this) {
		var $r;
		if(me.zpp_inner.wrap_cbTypes == null) me.zpp_inner.setupcbTypes();
		$r = me.zpp_inner.wrap_cbTypes;
		return $r;
	}(this))).iterator();
	while(_g.hasNext()) {
		var cb;
		_g.zpp_critical = false;
		cb = _g.zpp_inner.at(_g.zpp_i++);
		((function($this) {
			var $r;
			if(ret.zpp_inner.wrap_cbTypes == null) ret.zpp_inner.setupcbTypes();
			$r = ret.zpp_inner.wrap_cbTypes;
			return $r;
		}(this))).add(cb);
	}
	ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
	ret.zpp_inner.removeOnBreak;
	ret.set_breakUnderError(me.zpp_inner.breakUnderError);
	ret.set_breakUnderForce(me.zpp_inner.breakUnderForce);
	ret.set_maxError(me.zpp_inner.maxError);
	ret.set_maxForce(me.zpp_inner.maxForce);
	ret.set_damping(me.zpp_inner.damping);
	ret.set_frequency(me.zpp_inner.frequency);
	ret.set_stiff(me.zpp_inner.stiff);
	ret.set_ignore(me.zpp_inner.ignore);
	ret.set_active(me.zpp_inner.active);
};
zpp_nape.constraint.ZPP_Constraint.prototype.__class__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_AngleJoint = $hxClasses['zpp_nape.constraint.ZPP_AngleJoint'] = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
zpp_nape.constraint.ZPP_AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_nape.constraint.ZPP_AngleJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_AngleJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_AngleJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.ratio = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.slack = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.equal = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.scale = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.is_slack = function() {
	var slack;
	var C = this.ratio * this.b2.rot - this.b1.rot;
	if(this.equal) {
		C -= this.jointMax;
		slack = false;
		this.scale = 1.0;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		this.scale = -1.0;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		this.scale = 1.0;
		slack = false;
	} else {
		this.scale = 0.0;
		C = 0;
		slack = true;
	}
	C;
	return slack;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.scale * this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.bias = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
	if(this.b1 == this.b2) throw "Error: AngleJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: AngleJoint must have jointMin <= jointMax";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
	this.slack = false;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	var C;
	var C1 = this.ratio * this.b2.rot - this.b1.rot;
	if(this.equal) {
		C1 -= this.jointMax;
		this.slack = false;
		this.scale = 1.0;
	} else if(C1 < this.jointMin) {
		C1 = this.jointMin - C1;
		this.scale = -1.0;
		this.slack = false;
	} else if(C1 > this.jointMax) {
		C1 -= this.jointMax;
		this.scale = 1.0;
		this.slack = false;
	} else {
		this.scale = 0.0;
		C1 = 0;
		this.slack = true;
	}
	C = C1;
	if(!this.slack) {
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
		if(!this.stiff) {
			if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.kMass *= ig;
			this.bias = -C * biasCoef;
			if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.warmStart = function() {
	if(!this.slack) {
		this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
	}
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.applyImpulseVel = function() {
	if(this.slack) return false;
	var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
	var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) return true;
	if(!this.stiff) {
		if(this.jAcc > this.jMax) this.jAcc = this.jMax; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
	}
	j = this.jAcc - jOld;
	this.b1.angvel -= this.scale * this.b1.iinertia * j;
	this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
	return false;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var slack;
	var C = this.ratio * this.b2.rot - this.b1.rot;
	if(this.equal) {
		C -= this.jointMax;
		slack = false;
		this.scale = 1.0;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		this.scale = -1.0;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		this.scale = 1.0;
		slack = false;
	} else {
		this.scale = 0.0;
		C = 0;
		slack = true;
	}
	E = C;
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
		E *= 0.5;
		j = -E * this.kMass;
		if(this.equal || j < 0) {
			this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
			this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
		}
	}
	return false;
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_AngleJoint.prototype.__class__ = zpp_nape.constraint.ZPP_AngleJoint;
zpp_nape.constraint.ZPP_CopyHelper = $hxClasses['zpp_nape.constraint.ZPP_CopyHelper'] = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
zpp_nape.constraint.ZPP_CopyHelper.__name__ = ["zpp_nape","constraint","ZPP_CopyHelper"];
zpp_nape.constraint.ZPP_CopyHelper.dict = function(id,bc) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
};
zpp_nape.constraint.ZPP_CopyHelper.todo = function(id,cb) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
};
zpp_nape.constraint.ZPP_CopyHelper.prototype.id = null;
zpp_nape.constraint.ZPP_CopyHelper.prototype.bc = null;
zpp_nape.constraint.ZPP_CopyHelper.prototype.cb = null;
zpp_nape.constraint.ZPP_CopyHelper.prototype.__class__ = zpp_nape.constraint.ZPP_CopyHelper;
zpp_nape.constraint.ZPP_DistanceJoint = $hxClasses['zpp_nape.constraint.ZPP_DistanceJoint'] = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
zpp_nape.constraint.ZPP_DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_nape.constraint.ZPP_DistanceJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_DistanceJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_DistanceJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.slack = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.equal = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.is_slack = function() {
	var slack;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var nx = 0.0;
	var ny = 0.0;
	nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	var C = nx * nx + ny * ny;
	if(C < nape.Config.epsilon) {
		nx = 0;
		ny = 0;
		C = 0;
		slack = true;
	} else {
		C = Math.sqrt(C);
		var t = 1.0 / C;
		nx *= t;
		ny *= t;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			nx = -nx;
			ny = -ny;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		}
	}
	C;
	return slack;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.nx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.ny = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.cx1 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.cx2 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return nape.geom.Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc); else return nape.geom.Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.setup_a1 = function() {
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.setup_a2 = function() {
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.bias = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.DistanceJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.jointMin,this.jointMax);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) throw "Error: DistanceJoint cannot be simulated null bodies";
	if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var C;
	this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	var C1 = this.nx * this.nx + this.ny * this.ny;
	if(C1 < nape.Config.epsilon) {
		this.nx = 0;
		this.ny = 0;
		C1 = 0;
		this.slack = true;
	} else {
		C1 = Math.sqrt(C1);
		var t = 1.0 / C1;
		this.nx *= t;
		this.ny *= t;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.nx = -this.nx;
			this.ny = -this.ny;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.slack = false;
		} else {
			this.nx = 0;
			this.ny = 0;
			C1 = 0;
			this.slack = true;
		}
	}
	C = C1;
	if(!this.slack) {
		this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
		this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
		this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
		if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
		if(!this.stiff) {
			if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.kMass *= ig;
			this.bias = -C * biasCoef;
			if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.warmStart = function() {
	if(!this.slack) {
		var t = this.b1.imass * this.jAcc;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * this.jAcc;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
	}
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.applyImpulseVel = function() {
	if(this.slack) return false;
	var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
	var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
	if(!this.stiff) {
		if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
	}
	j = this.jAcc - jOld;
	var t = this.b1.imass * j;
	this.b1.velx -= this.nx * t;
	this.b1.vely -= this.ny * t;
	var t1 = this.b2.imass * j;
	this.b2.velx += this.nx * t1;
	this.b2.vely += this.ny * t1;
	this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
	this.b2.angvel += this.cx2 * this.b2.iinertia * j;
	return false;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var slack;
	var nx = 0.0;
	var ny = 0.0;
	nx = this.b2.posx + r2x - (this.b1.posx + r1x);
	ny = this.b2.posy + r2y - (this.b1.posy + r1y);
	var C = nx * nx + ny * ny;
	if(C < nape.Config.epsilon) {
		nx = 0;
		ny = 0;
		C = 0;
		slack = true;
	} else {
		C = Math.sqrt(C);
		var t = 1.0 / C;
		nx *= t;
		ny *= t;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			nx = -nx;
			ny = -ny;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		}
	}
	E = C;
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
		if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		E *= 0.5;
		if(E * E > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				j = -E * k;
				if(this.equal || j < 0) {
					var t1 = j * this.b1.imass;
					this.b1.posx -= nx * t1;
					this.b1.posy -= ny * t1;
					var t2 = j * this.b2.imass;
					this.b2.posx += nx * t2;
					this.b2.posy += ny * t2;
					nx = this.b2.posx + r2x - (this.b1.posx + r1x);
					ny = this.b2.posy + r2y - (this.b1.posy + r1y);
					var C1 = nx * nx + ny * ny;
					if(C1 < nape.Config.epsilon) {
						nx = 0;
						ny = 0;
						C1 = 0;
						slack = true;
					} else {
						C1 = Math.sqrt(C1);
						var t3 = 1.0 / C1;
						nx *= t3;
						ny *= t3;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							nx = -nx;
							ny = -ny;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						}
					}
					E = C1;
					E *= 0.5;
				}
			}
		}
		var cx1;
		var cx2;
		var k1;
		cx1 = ny * r1x - nx * r1y;
		cx2 = ny * r2x - nx * r2y;
		k1 = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
		if(k1 != 0) k1 = 1 / k1;
		j = -E * k1;
		if(this.equal || j < 0) {
			var t4 = this.b1.imass * j;
			this.b1.posx -= nx * t4;
			this.b1.posy -= ny * t4;
			var t5 = this.b2.imass * j;
			this.b2.posx += nx * t5;
			this.b2.posy += ny * t5;
			this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
			this.b2.delta_rot(cx2 * this.b2.iinertia * j);
		}
	}
	return false;
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_DistanceJoint.prototype.__class__ = zpp_nape.constraint.ZPP_DistanceJoint;
zpp_nape.constraint.ZPP_LineJoint = $hxClasses['zpp_nape.constraint.ZPP_LineJoint'] = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.jointMin = Math.NEGATIVE_INFINITY;
	this.jointMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
zpp_nape.constraint.ZPP_LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_nape.constraint.ZPP_LineJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_LineJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_LineJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.scale = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.equal = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.dot1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.dot2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.cx1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.cx2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		if(b == this.b1) return nape.geom.Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return nape.geom.Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_LineJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_LineJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_LineJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_LineJoint.prototype.setup_a1 = function() {
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
zpp_nape.constraint.ZPP_LineJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_LineJoint.prototype.setup_a2 = function() {
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
zpp_nape.constraint.ZPP_LineJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.zip_n = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nlocalx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nlocaly = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nrelx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nrely = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.validate_n = function() {
	this.wrap_n.zpp_inner.x = this.nlocalx;
	this.wrap_n.zpp_inner.y = this.nlocaly;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.invalidate_n = function(x) {
	this.immutable_midstep("Constraint::" + "n");
	this.nlocalx = x.x;
	this.nlocaly = x.y;
	this.zip_n = true;
	this.wake();
};
zpp_nape.constraint.ZPP_LineJoint.prototype.setup_n = function() {
	this.wrap_n = nape.geom.Vec2.get(this.nlocalx,this.nlocaly,null);
	this.wrap_n.zpp_inner._inuse = true;
	this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
	this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
};
zpp_nape.constraint.ZPP_LineJoint.prototype.wrap_n = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.validate_norm = function() {
	if(this.zip_n) {
		this.zip_n = false;
		var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		this.nlocalx *= t;
		this.nlocaly *= t;
	}
};
zpp_nape.constraint.ZPP_LineJoint.prototype.kMassa = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.kMassb = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.kMassc = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jAccx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jAccy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.biasx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.biasy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.LineJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_direction(),this.jointMin,this.jointMax);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
	if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
	if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape.Config.epsilon) throw "Error: DistanceJoint direction must be non-degenerate";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
};
zpp_nape.constraint.ZPP_LineJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
};
zpp_nape.constraint.ZPP_LineJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_LineJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.equal = this.jointMin == this.jointMax;
	this.stepped = true;
	this.validate_norm();
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
	this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var dx = 0.0;
	var dy = 0.0;
	var Cx = 0.0;
	var Cy = 0.0;
	dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
	dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
	Cx = dy * this.nrelx - dx * this.nrely;
	Cy = this.nrelx * dx + this.nrely * dy;
	if(this.equal) {
		Cy -= this.jointMin;
		this.scale = 1.0;
	} else if(Cy > this.jointMax) {
		Cy -= this.jointMax;
		this.scale = 1.0;
	} else if(Cy < this.jointMin) {
		Cy = this.jointMin - Cy;
		this.scale = -1.0;
	} else {
		Cy = 0;
		this.scale = 0;
	}
	var drx = 0.0;
	var dry = 0.0;
	drx = dx + this.a1relx;
	dry = dy + this.a1rely;
	this.dot1 = this.nrelx * drx + this.nrely * dry;
	this.cx1 = dry * this.nrelx - drx * this.nrely;
	this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
	this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
	this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
	this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
	this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
	var flag;
	var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
	if(det != det) {
		this.kMassa = this.kMassb = this.kMassc = 0;
		flag = 3;
	} else if(det == 0) {
		var flag1 = 0;
		if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
			this.kMassa = 0;
			flag1 |= 1;
		}
		if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
			this.kMassc = 0;
			flag1 |= 2;
		}
		this.kMassb = 0;
		flag = flag1;
	} else {
		det = 1 / det;
		var t = this.kMassc * det;
		this.kMassc = this.kMassa * det;
		this.kMassa = t;
		this.kMassb *= -det;
		flag = 0;
	}
	if((flag & 1) != 0) this.jAccx = 0;
	if((flag & 2) != 0) this.jAccy = 0;
	if(!this.stiff) {
		if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) return true;
		var biasCoef;
		var X;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		X = ig;
		this.kMassa *= X;
		this.kMassb *= X;
		this.kMassc *= X;
		this.biasx = Cx;
		this.biasy = Cy;
		var t1 = -biasCoef;
		this.biasx *= t1;
		this.biasy *= t1;
		var t2 = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			this.biasx *= t3;
			this.biasy *= t3;
		}
	} else {
		this.gamma = 0;
		this.biasx = 0;
		this.biasy = 0;
	}
	var t4 = dtratio;
	this.jAccx *= t4;
	this.jAccy *= t4;
	this.jMax = this.maxForce * dt;
	return false;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.warmStart = function() {
	var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
	var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
	var t = this.b1.imass;
	this.b1.velx -= J2x * t;
	this.b1.vely -= J2y * t;
	var t1 = this.b2.imass;
	this.b2.velx += J2x * t1;
	this.b2.vely += J2y * t1;
	this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
	this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.applyImpulseVel = function() {
	var Ex = 0.0;
	var Ey = 0.0;
	var dvx = 0.0;
	var dvy = 0.0;
	dvx = this.b2.velx - this.b1.velx;
	dvy = this.b2.vely - this.b1.vely;
	dvx += this.b2.kinvelx - this.b1.kinvelx;
	dvy += this.b2.kinvely - this.b1.kinvely;
	Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
	Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
	var Jx = 0.0;
	var Jy = 0.0;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	var t = this.kMassa * Jx + this.kMassb * Jy;
	Jy = this.kMassb * Jx + this.kMassc * Jy;
	Jx = t;
	var t1 = this.gamma;
	Jx -= this.jAccx * t1;
	Jy -= this.jAccy * t1;
	var jOldx = 0.0;
	var jOldy = 0.0;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	var t2 = 1.0;
	this.jAccx += Jx * t2;
	this.jAccy += Jy * t2;
	if(this.jAccy > 0) this.jAccy = 0;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
	} else if(!this.stiff) {
		var t3 = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
		if(ls > t3 * t3) {
			var t4 = t3 * (1.0 / Math.sqrt(ls));
			this.jAccx *= t4;
			this.jAccy *= t4;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
	var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
	var t5 = this.b1.imass;
	this.b1.velx -= J2x * t5;
	this.b1.vely -= J2y * t5;
	var t6 = this.b2.imass;
	this.b2.velx += J2x * t6;
	this.b2.vely += J2y * t6;
	this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
	this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
	return false;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.applyImpulsePos = function() {
	var nx = 0.0;
	var ny = 0.0;
	nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
	ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var dx = 0.0;
	var dy = 0.0;
	var scale;
	var Ex = 0.0;
	var Ey = 0.0;
	dx = this.b2.posx + r2x - this.b1.posx - r1x;
	dy = this.b2.posy + r2y - this.b1.posy - r1y;
	Ex = dy * nx - dx * ny;
	Ey = nx * dx + ny * dy;
	if(this.equal) {
		Ey -= this.jointMin;
		scale = 1.0;
	} else if(Ey > this.jointMax) {
		Ey -= this.jointMax;
		scale = 1.0;
	} else if(Ey < this.jointMin) {
		Ey = this.jointMin - Ey;
		scale = -1.0;
	} else {
		Ey = 0;
		scale = 0;
	}
	if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
	if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
	var Jx = 0.0;
	var Jy = 0.0;
	var t = 0.5;
	Ex *= t;
	Ey *= t;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > nape.Config.epsilon) {
			k = 0.8 / k;
			var Jx1 = k * (ny * Ex - scale * nx * Ey);
			var Jy1 = k * (nx * Ex * scale - ny * Ex);
			var t1 = this.b1.imass;
			this.b1.posx -= Jx1 * t1;
			this.b1.posy -= Jy1 * t1;
			var t2 = this.b2.imass;
			this.b2.posx += Jx1 * t2;
			this.b2.posy += Jy1 * t2;
			dx = this.b2.posx + r2x - this.b1.posx - r1x;
			dy = this.b2.posy + r2y - this.b1.posy - r1y;
			Ex = dy * nx - dx * ny;
			Ey = nx * dx + ny * dy;
			if(this.equal) {
				Ey -= this.jointMin;
				scale = 1.0;
			} else if(Ey > this.jointMax) {
				Ey -= this.jointMax;
				scale = 1.0;
			} else if(Ey < this.jointMin) {
				Ey = this.jointMin - Ey;
				scale = -1.0;
			} else {
				Ey = 0;
				scale = 0;
			}
			var t3 = 0.5;
			Ex *= t3;
			Ey *= t3;
		}
	}
	var dot1;
	var dot2;
	var cx1;
	var cx2;
	var Ka = 0.0;
	var Kb = 0.0;
	var Kc = 0.0;
	var drx = 0.0;
	var dry = 0.0;
	drx = dx + r1x;
	dry = dy + r1y;
	dot1 = nx * drx + ny * dry;
	cx1 = dry * nx - drx * ny;
	dot2 = nx * r2x + ny * r2y;
	cx2 = r2y * nx - r2x * ny;
	Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
	Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
	Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
	Jx = -Ex;
	Jy = -Ey;
	var det = Ka * Kc - Kb * Kb;
	if(det != det) Jx = Jy = 0; else if(det == 0) {
		if(Ka != 0) Jx /= Ka; else Jx = 0;
		if(Kc != 0) Jy /= Kc; else Jy = 0;
	} else {
		det = 1 / det;
		var t4 = det * (Kc * Jx - Kb * Jy);
		Jy = det * (Ka * Jy - Kb * Jx);
		Jx = t4;
	}
	if(Jy > 0) Jy = 0;
	var J2x = scale * nx * Jy - ny * Jx;
	var J2y = nx * Jx + scale * ny * Jy;
	var t5 = this.b1.imass;
	this.b1.posx -= J2x * t5;
	this.b1.posy -= J2y * t5;
	var t6 = this.b2.imass;
	this.b2.posx += J2x * t6;
	this.b2.posy += J2y * t6;
	this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
	this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
	return false;
};
zpp_nape.constraint.ZPP_LineJoint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_LineJoint.prototype.__class__ = zpp_nape.constraint.ZPP_LineJoint;
zpp_nape.constraint.ZPP_MotorJoint = $hxClasses['zpp_nape.constraint.ZPP_MotorJoint'] = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
zpp_nape.constraint.ZPP_MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_nape.constraint.ZPP_MotorJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_MotorJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_MotorJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.ratio = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.rate = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.jAcc);
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.MotorJoint(null,null,this.rate,this.ratio);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
	if(this.b1 == this.b2) throw "Error: MotorJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
	this.kMass = 1.0 / this.kMass;
	this.jAcc *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.warmStart = function() {
	this.b1.angvel -= this.b1.iinertia * this.jAcc;
	this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.applyImpulseVel = function() {
	var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
	var j = -this.kMass * E;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(this.breakUnderForce) {
		if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
	} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
	j = this.jAcc - jOld;
	this.b1.angvel -= this.b1.iinertia * j;
	this.b2.angvel += this.ratio * this.b2.iinertia * j;
	return false;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.applyImpulsePos = function() {
	return false;
};
zpp_nape.constraint.ZPP_MotorJoint.prototype.__class__ = zpp_nape.constraint.ZPP_MotorJoint;
zpp_nape.constraint.ZPP_PivotJoint = $hxClasses['zpp_nape.constraint.ZPP_PivotJoint'] = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_nape.constraint.ZPP_PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_nape.constraint.ZPP_PivotJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_PivotJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_PivotJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.setup_a1 = function() {
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.setup_a2 = function() {
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.kMassa = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.kMassb = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.kMassc = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.jAccx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.jAccy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.biasx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.biasy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) throw "Error: PivotJoint cannot be simulated null bodies";
	if(this.b1 == this.b2) throw "Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var m = this.b1.smass + this.b2.smass;
	this.kMassa = m;
	this.kMassb = 0;
	this.kMassc = m;
	if(this.b1.sinertia != 0) {
		var X = this.a1relx * this.b1.sinertia;
		var Y = this.a1rely * this.b1.sinertia;
		this.kMassa += Y * this.a1rely;
		this.kMassb += -Y * this.a1relx;
		this.kMassc += X * this.a1relx;
	}
	if(this.b2.sinertia != 0) {
		var X1 = this.a2relx * this.b2.sinertia;
		var Y1 = this.a2rely * this.b2.sinertia;
		this.kMassa += Y1 * this.a2rely;
		this.kMassb += -Y1 * this.a2relx;
		this.kMassc += X1 * this.a2relx;
	}
	var flag;
	var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
	if(det != det) {
		this.kMassa = this.kMassb = this.kMassc = 0;
		flag = 3;
	} else if(det == 0) {
		var flag1 = 0;
		if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
			this.kMassa = 0;
			flag1 |= 1;
		}
		if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
			this.kMassc = 0;
			flag1 |= 2;
		}
		this.kMassb = 0;
		flag = flag1;
	} else {
		det = 1 / det;
		var t = this.kMassc * det;
		this.kMassc = this.kMassa * det;
		this.kMassa = t;
		this.kMassb *= -det;
		flag = 0;
	}
	if((flag & 1) != 0) this.jAccx = 0;
	if((flag & 2) != 0) this.jAccy = 0;
	if(!this.stiff) {
		var biasCoef;
		var X2;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		X2 = ig;
		this.kMassa *= X2;
		this.kMassb *= X2;
		this.kMassc *= X2;
		this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
		var t1 = -biasCoef;
		this.biasx *= t1;
		this.biasy *= t1;
		var t2 = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			this.biasx *= t3;
			this.biasy *= t3;
		}
	} else {
		this.biasx = 0;
		this.biasy = 0;
		this.gamma = 0;
	}
	var t4 = dtratio;
	this.jAccx *= t4;
	this.jAccy *= t4;
	this.jMax = this.maxForce * dt;
	return false;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.jAccx * t;
	this.b1.vely -= this.jAccy * t;
	var t1 = this.b2.imass;
	this.b2.velx += this.jAccx * t1;
	this.b2.vely += this.jAccy * t1;
	this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
	this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.applyImpulseVel = function() {
	var Ex = 0.0;
	var Ey = 0.0;
	Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
	Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
	var Jx = 0.0;
	var Jy = 0.0;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	var t = this.kMassa * Jx + this.kMassb * Jy;
	Jy = this.kMassb * Jx + this.kMassc * Jy;
	Jx = t;
	var t1 = this.gamma;
	Jx -= this.jAccx * t1;
	Jy -= this.jAccy * t1;
	var jOldx = 0.0;
	var jOldy = 0.0;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	var t2 = 1.0;
	this.jAccx += Jx * t2;
	this.jAccy += Jy * t2;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
	} else if(!this.stiff) {
		var t3 = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
		if(ls > t3 * t3) {
			var t4 = t3 * (1.0 / Math.sqrt(ls));
			this.jAccx *= t4;
			this.jAccy *= t4;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	var t5 = this.b1.imass;
	this.b1.velx -= Jx * t5;
	this.b1.vely -= Jy * t5;
	var t6 = this.b2.imass;
	this.b2.velx += Jx * t6;
	this.b2.vely += Jy * t6;
	this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
	this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
	return false;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.applyImpulsePos = function() {
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var Ex = 0.0;
	var Ey = 0.0;
	Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
	Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
	if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
	if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
	var t = 0.5;
	Ex *= t;
	Ey *= t;
	var Jx = 0.0;
	var Jy = 0.0;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > nape.Config.epsilon) {
			k = 0.75 / k;
			Jx = -Ex * k;
			Jy = -Ey * k;
			var t1 = 20;
			var ls = Jx * Jx + Jy * Jy;
			if(ls > t1 * t1) {
				var t2 = t1 * (1.0 / Math.sqrt(ls));
				Jx *= t2;
				Jy *= t2;
			}
			var t3 = this.b1.imass;
			this.b1.posx -= Jx * t3;
			this.b1.posy -= Jy * t3;
			var t4 = this.b2.imass;
			this.b2.posx += Jx * t4;
			this.b2.posy += Jy * t4;
			Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
			Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
			var t5 = 0.5;
			Ex *= t5;
			Ey *= t5;
		}
	}
	var Ka = 0.0;
	var Kb = 0.0;
	var Kc = 0.0;
	var m = this.b1.smass + this.b2.smass;
	Ka = m;
	Kb = 0;
	Kc = m;
	if(this.b1.sinertia != 0) {
		var X = r1x * this.b1.sinertia;
		var Y = r1y * this.b1.sinertia;
		Ka += Y * r1y;
		Kb += -Y * r1x;
		Kc += X * r1x;
	}
	if(this.b2.sinertia != 0) {
		var X1 = r2x * this.b2.sinertia;
		var Y1 = r2y * this.b2.sinertia;
		Ka += Y1 * r2y;
		Kb += -Y1 * r2x;
		Kc += X1 * r2x;
	}
	Jx = -Ex;
	Jy = -Ey;
	var t6 = 6;
	var ls1 = Jx * Jx + Jy * Jy;
	if(ls1 > t6 * t6) {
		var t7 = t6 * (1.0 / Math.sqrt(ls1));
		Jx *= t7;
		Jy *= t7;
	}
	var det = Ka * Kc - Kb * Kb;
	if(det != det) Jx = Jy = 0; else if(det == 0) {
		if(Ka != 0) Jx /= Ka; else Jx = 0;
		if(Kc != 0) Jy /= Kc; else Jy = 0;
	} else {
		det = 1 / det;
		var t8 = det * (Kc * Jx - Kb * Jy);
		Jy = det * (Ka * Jy - Kb * Jx);
		Jx = t8;
	}
	var t9 = this.b1.imass;
	this.b1.posx -= Jx * t9;
	this.b1.posy -= Jy * t9;
	var t10 = this.b2.imass;
	this.b2.posx += Jx * t10;
	this.b2.posy += Jy * t10;
	this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
	this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
	return false;
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_PivotJoint.prototype.__class__ = zpp_nape.constraint.ZPP_PivotJoint;
zpp_nape.constraint.ZPP_PulleyJoint = $hxClasses['zpp_nape.constraint.ZPP_PulleyJoint'] = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
zpp_nape.constraint.ZPP_PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
zpp_nape.constraint.ZPP_PulleyJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_PulleyJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_PulleyJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.ratio = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.slack = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.equal = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.is_slack = function() {
	var slack;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
	this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
	this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
	this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
	var n12x = 0.0;
	var n12y = 0.0;
	var n34x = 0.0;
	var n34y = 0.0;
	var t12x = 0.0;
	var t12y = 0.0;
	var t34x = 0.0;
	var t34y = 0.0;
	t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
	t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
	var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
	var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
	if(C12 != 0) {
		var t = 1.0 / C12;
		n12x = t12x * t;
		n12y = t12y * t;
	}
	if(C34 != 0) {
		var t1 = 1.0 / C34;
		n34x = t34x * t1;
		n34y = t34y * t1;
		var t2 = this.ratio;
		n34x *= t2;
		n34y *= t2;
	} else {
		var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
		n34x *= t3;
		n34y *= t3;
	}
	var C = C12 + this.ratio * C34;
	if(this.equal) {
		C -= this.jointMax;
		slack = false;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		n12x = -n12x;
		n12y = -n12y;
		n34x = -n34x;
		n34y = -n34y;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		slack = false;
	} else {
		n12x = 0;
		n12y = 0;
		n34x = 0;
		n34y = 0;
		C = 0;
		slack = true;
	}
	C;
	return slack;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.n12x = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.n12y = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.n34x = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.n34y = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.cx1 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.cx2 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.cx3 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.cx4 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var ret = nape.geom.Vec3.get();
		if(b == this.b1) {
			var _g = ret;
			_g.set_x((function($this) {
				var $r;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				$r = _g.zpp_inner.x;
				return $r;
			}(this)) - this.jAcc * this.n12x);
			var _g1 = ret;
			_g1.set_y((function($this) {
				var $r;
				if(_g1 != null && _g1.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g1.zpp_inner.validate();
				$r = _g1.zpp_inner.y;
				return $r;
			}(this)) - this.jAcc * this.n12y);
			var _g2 = ret;
			_g2.set_z((function($this) {
				var $r;
				if(_g2 != null && _g2.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g2.zpp_inner.validate();
				$r = _g2.zpp_inner.z;
				return $r;
			}(this)) - this.cx1 * this.jAcc);
		}
		if(b == this.b2) {
			var _g3 = ret;
			_g3.set_x((function($this) {
				var $r;
				if(_g3 != null && _g3.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g3.zpp_inner.validate();
				$r = _g3.zpp_inner.x;
				return $r;
			}(this)) + this.jAcc * this.n12x);
			var _g4 = ret;
			_g4.set_y((function($this) {
				var $r;
				if(_g4 != null && _g4.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g4.zpp_inner.validate();
				$r = _g4.zpp_inner.y;
				return $r;
			}(this)) + this.jAcc * this.n12y);
			var _g5 = ret;
			_g5.set_z((function($this) {
				var $r;
				if(_g5 != null && _g5.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g5.zpp_inner.validate();
				$r = _g5.zpp_inner.z;
				return $r;
			}(this)) + this.cx2 * this.jAcc);
		}
		if(b == this.b3) {
			var _g6 = ret;
			_g6.set_x((function($this) {
				var $r;
				if(_g6 != null && _g6.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g6.zpp_inner.validate();
				$r = _g6.zpp_inner.x;
				return $r;
			}(this)) - this.jAcc * this.n34x);
			var _g7 = ret;
			_g7.set_y((function($this) {
				var $r;
				if(_g7 != null && _g7.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g7.zpp_inner.validate();
				$r = _g7.zpp_inner.y;
				return $r;
			}(this)) - this.jAcc * this.n34y);
			var _g8 = ret;
			_g8.set_z((function($this) {
				var $r;
				if(_g8 != null && _g8.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g8.zpp_inner.validate();
				$r = _g8.zpp_inner.z;
				return $r;
			}(this)) - this.cx3 * this.jAcc);
		}
		if(b == this.b4) {
			var _g9 = ret;
			_g9.set_x((function($this) {
				var $r;
				if(_g9 != null && _g9.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g9.zpp_inner.validate();
				$r = _g9.zpp_inner.x;
				return $r;
			}(this)) + this.jAcc * this.n34x);
			var _g10 = ret;
			_g10.set_y((function($this) {
				var $r;
				if(_g10 != null && _g10.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g10.zpp_inner.validate();
				$r = _g10.zpp_inner.y;
				return $r;
			}(this)) + this.jAcc * this.n34y);
			var _g11 = ret;
			_g11.set_z((function($this) {
				var $r;
				if(_g11 != null && _g11.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g11.zpp_inner.validate();
				$r = _g11.zpp_inner.z;
				return $r;
			}(this)) + this.cx4 * this.jAcc);
		}
		return ret;
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
	if(this.b3 != this.b1 && this.b3 != this.b2) {
		if(this.b3 != null) this.b3.constraints.add(this);
	}
	if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
		if(this.b4 != null) this.b4.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
	if(this.b3 != this.b1 && this.b3 != this.b2) {
		if(this.b3 != null) this.b3.constraints.remove(this);
	}
	if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
		if(this.b4 != null) this.b4.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.setup_a1 = function() {
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.setup_a2 = function() {
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.b3 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a3localx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a3localy = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a3relx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a3rely = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.validate_a3 = function() {
	this.wrap_a3.zpp_inner.x = this.a3localx;
	this.wrap_a3.zpp_inner.y = this.a3localy;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.invalidate_a3 = function(x) {
	this.immutable_midstep("Constraint::" + "a3");
	this.a3localx = x.x;
	this.a3localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.setup_a3 = function() {
	this.wrap_a3 = nape.geom.Vec2.get(this.a3localx,this.a3localy,null);
	this.wrap_a3.zpp_inner._inuse = true;
	this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
	this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.wrap_a3 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.b4 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a4localx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a4localy = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a4relx = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.a4rely = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.validate_a4 = function() {
	this.wrap_a4.zpp_inner.x = this.a4localx;
	this.wrap_a4.zpp_inner.y = this.a4localy;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.invalidate_a4 = function(x) {
	this.immutable_midstep("Constraint::" + "a4");
	this.a4localx = x.x;
	this.a4localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.setup_a4 = function() {
	this.wrap_a4 = nape.geom.Vec2.get(this.a4localx,this.a4localy,null);
	this.wrap_a4.zpp_inner._inuse = true;
	this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
	this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.wrap_a4 = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.bias = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_PulleyJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.PulleyJoint(null,null,null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_anchor3(),this.outer_zn.get_anchor4(),this.jointMin,this.jointMax,this.ratio);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	if(dict != null && this.b3 != null) {
		var b4 = null;
		var _g2 = 0;
		while(_g2 < dict.length) {
			var idc2 = dict[_g2];
			++_g2;
			if(idc2.id == this.b3.id) {
				b4 = idc2.bc;
				break;
			}
		}
		if(b4 != null) ret.zpp_inner_zn.b3 = b4.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b3.id,function(b5) {
			ret.zpp_inner_zn.b3 = b5.zpp_inner;
		}));
	}
	if(dict != null && this.b4 != null) {
		var b6 = null;
		var _g3 = 0;
		while(_g3 < dict.length) {
			var idc3 = dict[_g3];
			++_g3;
			if(idc3.id == this.b4.id) {
				b6 = idc3.bc;
				break;
			}
		}
		if(b6 != null) ret.zpp_inner_zn.b4 = b6.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b4.id,function(b7) {
			ret.zpp_inner_zn.b4 = b7.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) throw "Error: PulleyJoint cannot be simulated with null bodies";
	if(this.b1 == this.b2 || this.b3 == this.b4) throw "Error: PulleyJoint cannot have body1==body2 or body3==body4";
	if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: PulleyJoint must have jointMin <= jointMax";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
	if(!(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	if(this.b3 != null && this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b3.wake();
	if(this.b4 != null && this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b4.wake();
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
	if(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr2;
		if(this.b3.component == this.b3.component.parent) xr2 = this.b3.component; else {
			var obj4 = this.b3.component;
			var stack4 = null;
			while(obj4 != obj4.parent) {
				var nxt8 = obj4.parent;
				obj4.parent = stack4;
				stack4 = obj4;
				obj4 = nxt8;
			}
			while(stack4 != null) {
				var nxt9 = stack4.parent;
				stack4.parent = obj4;
				stack4 = nxt9;
			}
			xr2 = obj4;
		}
		var yr2;
		if(this.component == this.component.parent) yr2 = this.component; else {
			var obj5 = this.component;
			var stack5 = null;
			while(obj5 != obj5.parent) {
				var nxt10 = obj5.parent;
				obj5.parent = stack5;
				stack5 = obj5;
				obj5 = nxt10;
			}
			while(stack5 != null) {
				var nxt11 = stack5.parent;
				stack5.parent = obj5;
				stack5 = nxt11;
			}
			yr2 = obj5;
		}
		if(xr2 != yr2) {
			if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
				yr2.parent = xr2;
				xr2.rank++;
			}
		}
	}
	if(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr3;
		if(this.b4.component == this.b4.component.parent) xr3 = this.b4.component; else {
			var obj6 = this.b4.component;
			var stack6 = null;
			while(obj6 != obj6.parent) {
				var nxt12 = obj6.parent;
				obj6.parent = stack6;
				stack6 = obj6;
				obj6 = nxt12;
			}
			while(stack6 != null) {
				var nxt13 = stack6.parent;
				stack6.parent = obj6;
				stack6 = nxt13;
			}
			xr3 = obj6;
		}
		var yr3;
		if(this.component == this.component.parent) yr3 = this.component; else {
			var obj7 = this.component;
			var stack7 = null;
			while(obj7 != obj7.parent) {
				var nxt14 = obj7.parent;
				obj7.parent = stack7;
				stack7 = obj7;
				obj7 = nxt14;
			}
			while(stack7 != null) {
				var nxt15 = stack7.parent;
				stack7.parent = obj7;
				stack7 = nxt15;
			}
			yr3 = obj7;
		}
		if(xr3 != yr3) {
			if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
				yr3.parent = xr3;
				xr3.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di) || this.b4.id == id && (this.b1.id == di || this.b2.id == di || this.b3.id == di);
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
	this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
	this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
	this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
	var C;
	var t12x = 0.0;
	var t12y = 0.0;
	var t34x = 0.0;
	var t34y = 0.0;
	t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
	t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
	var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
	var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
	if(C12 != 0) {
		var t = 1.0 / C12;
		this.n12x = t12x * t;
		this.n12y = t12y * t;
	}
	if(C34 != 0) {
		var t1 = 1.0 / C34;
		this.n34x = t34x * t1;
		this.n34y = t34y * t1;
		var t2 = this.ratio;
		this.n34x *= t2;
		this.n34y *= t2;
	} else {
		var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
		this.n34x *= t3;
		this.n34y *= t3;
	}
	var C1 = C12 + this.ratio * C34;
	if(this.equal) {
		C1 -= this.jointMax;
		this.slack = false;
	} else if(C1 < this.jointMin) {
		C1 = this.jointMin - C1;
		this.n12x = -this.n12x;
		this.n12y = -this.n12y;
		this.n34x = -this.n34x;
		this.n34y = -this.n34y;
		this.slack = false;
	} else if(C1 > this.jointMax) {
		C1 -= this.jointMax;
		this.slack = false;
	} else {
		this.n12x = 0;
		this.n12y = 0;
		this.n34x = 0;
		this.n34y = 0;
		C1 = 0;
		this.slack = true;
	}
	C = C1;
	if(!this.slack) {
		this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
		this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
		this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
		this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
		var ratioSq = this.ratio * this.ratio;
		var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
		if(this.b1 == this.b4) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
		if(this.b1 == this.b3) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
		if(this.b2 == this.b3) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
		if(this.b2 == this.b4) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
		this.kMass = K;
		if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
		if(!this.stiff) {
			if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.kMass *= ig;
			this.bias = -C * biasCoef;
			if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.warmStart = function() {
	if(!this.slack) {
		var t = this.b1.imass * this.jAcc;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * this.jAcc;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * this.jAcc;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * this.jAcc;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
		this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
	}
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.applyImpulseVel = function() {
	if(this.slack) return false;
	var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
	var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
	if(!this.stiff) {
		if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
	}
	j = this.jAcc - jOld;
	var t = this.b1.imass * j;
	this.b1.velx -= this.n12x * t;
	this.b1.vely -= this.n12y * t;
	var t1 = this.b2.imass * j;
	this.b2.velx += this.n12x * t1;
	this.b2.vely += this.n12y * t1;
	var t2 = this.b3.imass * j;
	this.b3.velx -= this.n34x * t2;
	this.b3.vely -= this.n34y * t2;
	var t3 = this.b4.imass * j;
	this.b4.velx += this.n34x * t3;
	this.b4.vely += this.n34y * t3;
	this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
	this.b2.angvel += this.cx2 * this.b2.iinertia * j;
	this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
	this.b4.angvel += this.cx4 * this.b4.iinertia * j;
	return false;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var r3x = 0.0;
	var r3y = 0.0;
	r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
	r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
	var r4x = 0.0;
	var r4y = 0.0;
	r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
	r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
	var slack;
	var n12x = 0.0;
	var n12y = 0.0;
	var n34x = 0.0;
	var n34y = 0.0;
	n12x = this.n12x;
	n12y = this.n12y;
	n34x = this.n34x;
	n34y = this.n34y;
	var t12x = 0.0;
	var t12y = 0.0;
	var t34x = 0.0;
	var t34y = 0.0;
	t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
	t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
	t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
	t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
	var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
	var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
	if(C12 != 0) {
		var t = 1.0 / C12;
		n12x = t12x * t;
		n12y = t12y * t;
	}
	if(C34 != 0) {
		var t1 = 1.0 / C34;
		n34x = t34x * t1;
		n34y = t34y * t1;
		var t2 = this.ratio;
		n34x *= t2;
		n34y *= t2;
	} else {
		var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
		n34x *= t3;
		n34y *= t3;
	}
	var C = C12 + this.ratio * C34;
	if(this.equal) {
		C -= this.jointMax;
		slack = false;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		n12x = -n12x;
		n12y = -n12y;
		n34x = -n34x;
		n34y = -n34y;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		slack = false;
	} else {
		n12x = 0;
		n12y = 0;
		n34x = 0;
		n34y = 0;
		C = 0;
		slack = true;
	}
	E = C;
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
		if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		E *= 0.5;
		if(E * E > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				j = -E * k;
				if(this.equal || j < 0) {
					var t4 = j * this.b1.imass;
					this.b1.posx -= n12x * t4;
					this.b1.posy -= n12y * t4;
					var t5 = j * this.b2.imass;
					this.b2.posx += n12x * t5;
					this.b2.posy += n12y * t5;
					var t6 = j * this.b3.imass;
					this.b3.posx -= n34x * t6;
					this.b3.posy -= n34y * t6;
					var t7 = j * this.b4.imass;
					this.b4.posx += n34x * t7;
					this.b4.posy += n34y * t7;
					var t12x1 = 0.0;
					var t12y1 = 0.0;
					var t34x1 = 0.0;
					var t34y1 = 0.0;
					t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
					t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
					t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
					t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
					var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
					var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
					if(C121 != 0) {
						var t8 = 1.0 / C121;
						n12x = t12x1 * t8;
						n12y = t12y1 * t8;
					}
					if(C341 != 0) {
						var t9 = 1.0 / C341;
						n34x = t34x1 * t9;
						n34y = t34y1 * t9;
						var t10 = this.ratio;
						n34x *= t10;
						n34y *= t10;
					} else {
						var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
						n34x *= t11;
						n34y *= t11;
					}
					var C1 = C121 + this.ratio * C341;
					if(this.equal) {
						C1 -= this.jointMax;
						slack = false;
					} else if(C1 < this.jointMin) {
						C1 = this.jointMin - C1;
						n12x = -n12x;
						n12y = -n12y;
						n34x = -n34x;
						n34y = -n34y;
						slack = false;
					} else if(C1 > this.jointMax) {
						C1 -= this.jointMax;
						slack = false;
					} else {
						n12x = 0;
						n12y = 0;
						n34x = 0;
						n34y = 0;
						C1 = 0;
						slack = true;
					}
					E = C1;
					E *= 0.5;
				}
			}
		}
		var cx1;
		var cx2;
		var cx3;
		var cx4;
		var k1;
		cx1 = n12y * r1x - n12x * r1y;
		cx2 = n12y * r2x - n12x * r2y;
		cx3 = n34y * r3x - n34x * r3y;
		cx4 = n34y * r4x - n34x * r4y;
		var ratioSq = this.ratio * this.ratio;
		var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
		if(this.b1 == this.b4) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
		if(this.b1 == this.b3) K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
		if(this.b2 == this.b3) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
		if(this.b2 == this.b4) K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
		k1 = K;
		if(k1 != 0) k1 = 1 / k1;
		j = -E * k1;
		if(this.equal || j < 0) {
			var t12 = this.b1.imass * j;
			this.b1.posx -= n12x * t12;
			this.b1.posy -= n12y * t12;
			var t13 = this.b2.imass * j;
			this.b2.posx += n12x * t13;
			this.b2.posy += n12y * t13;
			var t14 = this.b3.imass * j;
			this.b3.posx -= n34x * t14;
			this.b3.posy -= n34y * t14;
			var t15 = this.b4.imass * j;
			this.b4.posx += n34x * t15;
			this.b4.posy += n34y * t15;
			this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
			this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
			this.b4.delta_rot(cx4 * this.b4.iinertia * j);
		}
	}
	return false;
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_PulleyJoint.prototype.__class__ = zpp_nape.constraint.ZPP_PulleyJoint;
zpp_nape.constraint.ZPP_UserConstraint = $hxClasses['zpp_nape.constraint.ZPP_UserConstraint'] = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.bodies = new Array();
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = new Array();
	this.bias = new Array();
	this.L = new Array();
	this.J = new Array();
	this.jOld = new Array();
	this.y = new Array();
	this.Keff = new Array();
	this.vec3 = nape.geom.Vec3.get(0,0,0);
	var _g = 0;
	while(_g < dim) {
		var i = _g++;
		this.jAcc[i] = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		var _g1 = 0;
		while(_g1 < dim) {
			var j = _g1++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
zpp_nape.constraint.ZPP_UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
zpp_nape.constraint.ZPP_UserConstraint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_UserConstraint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_UserConstraint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.bindVec2_invalidate = function(_) {
	this.outer_zn.__invalidate();
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.bodies = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.dim = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.bias = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.addBody = function(b) {
	var match = null;
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.body == b) {
			match = x;
			break;
		}
	}
	if(match == null) {
		this.bodies.push(new zpp_nape.constraint.ZPP_UserBody(1,b));
		if(this.active && this.space != null) {
			if(b != null) b.constraints.add(this);
		}
	} else match.cnt++;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.remBody = function(b) {
	var match = null;
	var bl = this.bodies.length | 0;
	var i = 0;
	while(i < bl) {
		var x = this.bodies[i];
		if(x.body == b) {
			x.cnt--;
			if(x.cnt == 0) {
				if(bl > 0) this.bodies[i] = this.bodies[bl - 1];
				this.bodies.pop();
				if(this.active && this.space != null) {
					if(b != null) b.constraints.remove(this);
				}
			}
			match = x;
			break;
		}
		i++;
	}
	return match != null;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.bodyImpulse = function(b) {
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		this.J[i] = this.jAcc[i];
	}
	var ret = nape.geom.Vec3.get(0,0,0);
	if(this.stepped) this.outer_zn.__impulse(this.J,b.outer,ret);
	return ret;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.activeBodies = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body != null) b.body.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.inactiveBodies = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body != null) b.body.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.stepped = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.copy = function(dict,todo) {
	var ret = this.outer_zn.__copy();
	this.copyto(ret);
	throw "not done yet";
	return ret;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.validate = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body.space != this.space) throw "Error: Constraints must have each body within the same sapce to which the constraint has been assigned";
	}
	this.outer_zn.__validate();
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.wake_connected = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) b.body.wake();
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.forest = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(b.body.component == b.body.component.parent) xr = b.body.component; else {
				var obj = b.body.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.pair_exists = function(id,di) {
	var ret = false;
	var bl = this.bodies.length | 0;
	var _g = 0;
	while(_g < bl) {
		var bi = _g++;
		var b = this.bodies[bi].body;
		var _g1 = bi + 1;
		while(_g1 < bl) {
			var ci = _g1++;
			var c = this.bodies[ci].body;
			if(b.id == id && c.id == di || b.id == di && c.id == id) {
				ret = true;
				break;
			}
		}
		if(ret) break;
	}
	return ret;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.broken = function() {
	this.outer_zn.__broken();
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.clearcache = function() {
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		this.jAcc[i] = 0.0;
	}
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.lsq = function(v) {
	var sum = 0.0;
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		sum += v[i] * v[i];
	}
	return sum;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype._clamp = function(v,max) {
	var x = this.lsq(v);
	if(x > max * max) {
		var scale = max / Math.sqrt(x);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			v[i] *= scale;
		}
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.L = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.solve = function(m) {
	var ind = 0;
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var j = _g1++;
		var sum = 0.0;
		var _g3 = 0;
		var _g2 = j - 1;
		while(_g3 < _g2) {
			var k = _g3++;
			sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
		}
		var rec = Math.sqrt(m[ind++] - sum);
		this.L[j * this.dim + j] = rec;
		if(rec != 0) {
			rec = 1.0 / rec;
			var _g31 = j + 1;
			var _g21 = this.dim;
			while(_g31 < _g21) {
				var i = _g31++;
				var sum1 = 0.0;
				var _g5 = 0;
				var _g4 = j - 1;
				while(_g5 < _g4) {
					var k1 = _g5++;
					sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
				}
				this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
			}
		} else {
			var _g32 = j + 1;
			var _g22 = this.dim;
			while(_g32 < _g22) {
				var i1 = _g32++;
				this.L[i1 * this.dim + j] = 0.0;
			}
			ind += this.dim - j - 1;
		}
	}
	return this.L;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.y = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.transform = function(L,x) {
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		var sum = x[i];
		var lii = L[i * this.dim + i];
		if(lii != 0) {
			var _g2 = 0;
			while(_g2 < i) {
				var k = _g2++;
				sum -= L[i * this.dim + k] * this.y[k];
			}
			this.y[i] = sum / lii;
		} else this.y[i] = 0.0;
	}
	var _g11 = 0;
	var _g3 = this.dim;
	while(_g11 < _g3) {
		var ix = _g11++;
		var i1 = this.dim - 1 - ix;
		var lii1 = L[i1 * this.dim + i1];
		if(lii1 != 0) {
			var sum1 = this.y[i1];
			var _g31 = i1 + 1;
			var _g21 = this.dim;
			while(_g31 < _g21) {
				var k1 = _g31++;
				sum1 -= L[k1 * this.dim + i1] * x[k1];
			}
			x[i1] = sum1 / lii1;
		} else x[i1] = 0.0;
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.soft = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.gamma = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.velonly = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.jMax = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.Keff = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.outer_zn.__prepare();
	this.outer_zn.__eff_mass(this.Keff);
	this.L = this.solve(this.Keff);
	if(!this.stiff && !this.velonly) {
		var biasCoef;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		this.soft = ig;
		this.outer_zn.__position(this.bias);
		if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) return true;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.bias[i] *= -biasCoef;
		}
		this._clamp(this.bias,this.maxError);
	} else {
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.bias[i1] = 0.0;
		}
		this.gamma = 0.0;
		this.soft = 1.0;
	}
	var _g12 = 0;
	var _g3 = this.dim;
	while(_g12 < _g3) {
		var i2 = _g12++;
		this.jAcc[i2] *= dtratio;
	}
	this.jMax = this.maxForce * dt;
	return false;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.vec3 = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.warmStart = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var bs = _g1[_g];
		++_g;
		var b = bs.body;
		this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
		var t = b.imass;
		b.velx += this.vec3.get_x() * t;
		b.vely += this.vec3.get_y() * t;
		b.angvel += this.vec3.get_z() * b.iinertia;
	}
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.J = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.jOld = null;
zpp_nape.constraint.ZPP_UserConstraint.prototype.applyImpulseVel = function() {
	this.outer_zn.__velocity(this.J);
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		this.J[i] = this.bias[i] - this.J[i];
	}
	this.transform(this.L,this.J);
	var _g11 = 0;
	var _g2 = this.dim;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this.jOld[i1] = this.jAcc[i1];
		this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
	}
	this.outer_zn.__clamp(this.jAcc);
	if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
		if(this.breakUnderForce) return true; else if(!this.stiff) this._clamp(this.jAcc,this.jMax);
	}
	var _g12 = 0;
	var _g3 = this.dim;
	while(_g12 < _g3) {
		var i2 = _g12++;
		this.J[i2] = this.jAcc[i2] - this.jOld[i2];
	}
	var _g4 = 0;
	var _g13 = this.bodies;
	while(_g4 < _g13.length) {
		var bs = _g13[_g4];
		++_g4;
		var b = bs.body;
		this.outer_zn.__impulse(this.J,b.outer,this.vec3);
		var t = b.imass;
		b.velx += this.vec3.get_x() * t;
		b.vely += this.vec3.get_y() * t;
		b.angvel += this.vec3.get_z() * b.iinertia;
	}
	return false;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.applyImpulsePos = function() {
	if(this.velonly) return false;
	this.outer_zn.__prepare();
	this.outer_zn.__position(this.J);
	var lj = this.lsq(this.J);
	if(this.breakUnderError && lj > this.maxError * this.maxError) return true; else if(lj < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		this.J[i] *= -1;
	}
	this.outer_zn.__eff_mass(this.Keff);
	this.transform(this.solve(this.Keff),this.J);
	this.outer_zn.__clamp(this.J);
	var _g2 = 0;
	var _g11 = this.bodies;
	while(_g2 < _g11.length) {
		var bs = _g11[_g2];
		++_g2;
		var b = bs.body;
		this.outer_zn.__impulse(this.J,b.outer,this.vec3);
		var t = b.imass;
		b.posx += this.vec3.get_x() * t;
		b.posy += this.vec3.get_y() * t;
		b.delta_rot(this.vec3.get_z() * b.iinertia);
	}
	return false;
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.draw = function(g) {
	this.outer_zn.__draw(g);
};
zpp_nape.constraint.ZPP_UserConstraint.prototype.__class__ = zpp_nape.constraint.ZPP_UserConstraint;
zpp_nape.constraint.ZPP_UserBody = $hxClasses['zpp_nape.constraint.ZPP_UserBody'] = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
zpp_nape.constraint.ZPP_UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
zpp_nape.constraint.ZPP_UserBody.prototype.cnt = null;
zpp_nape.constraint.ZPP_UserBody.prototype.body = null;
zpp_nape.constraint.ZPP_UserBody.prototype.__class__ = zpp_nape.constraint.ZPP_UserBody;
zpp_nape.constraint.ZPP_WeldJoint = $hxClasses['zpp_nape.constraint.ZPP_WeldJoint'] = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_nape.constraint.ZPP_WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_nape.constraint.ZPP_WeldJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_WeldJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_WeldJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
	} else return nape.geom.Vec3.get(0,0,0);
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.activeBodies = function() {
	if(this.b1 != null) this.b1.constraints.add(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.add(this);
	}
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) this.b1.constraints.remove(this);
	if(this.b2 != this.b1) {
		if(this.b2 != null) this.b2.constraints.remove(this);
	}
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.setup_a1 = function() {
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.setup_a2 = function() {
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.phase = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassa = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassb = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassd = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassc = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMasse = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassf = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jAccx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jAccy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jAccz = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.biasx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.biasy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.biasz = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.copy = function(dict,todo) {
	var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
			ret.zpp_inner_zn.b1 = b1.zpp_inner;
		}));
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b3) {
			ret.zpp_inner_zn.b2 = b3.zpp_inner;
		}));
	}
	return ret;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
	if(this.b1 == this.b2) throw "Error: WeldJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
	if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.forest = function() {
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr;
		if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) yr = this.component; else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) yr1 = this.component; else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.pre_dt = -1.0;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var m = this.b1.smass + this.b2.smass;
	this.kMassa = m;
	this.kMassb = 0;
	this.kMassd = m;
	this.kMassc = 0;
	this.kMasse = 0;
	this.kMassf = 0;
	if(this.b1.sinertia != 0) {
		var X = this.a1relx * this.b1.sinertia;
		var Y = this.a1rely * this.b1.sinertia;
		this.kMassa += Y * this.a1rely;
		this.kMassb += -Y * this.a1relx;
		this.kMassd += X * this.a1relx;
		this.kMassc += -Y;
		this.kMasse += X;
		this.kMassf += this.b1.sinertia;
	}
	if(this.b2.sinertia != 0) {
		var X1 = this.a2relx * this.b2.sinertia;
		var Y1 = this.a2rely * this.b2.sinertia;
		this.kMassa += Y1 * this.a2rely;
		this.kMassb += -Y1 * this.a2relx;
		this.kMassd += X1 * this.a2relx;
		this.kMassc += -Y1;
		this.kMasse += X1;
		this.kMassf += this.b2.sinertia;
	}
	var flag;
	var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
	if(det != det) {
		this.kMassa = 0;
		this.kMassb = 0;
		this.kMassd = 0;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		flag = 7;
	} else if(det == 0) {
		var flag1 = 0;
		if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
			this.kMassa = 0;
			flag1 |= 1;
		}
		if(this.kMassd != 0) this.kMassd = 1 / this.kMassd; else {
			this.kMassd = 0;
			flag1 |= 2;
		}
		if(this.kMassf != 0) this.kMassf = 1 / this.kMassf; else {
			this.kMassf = 0;
			flag1 |= 4;
		}
		this.kMassb = this.kMassc = this.kMasse = 0.0;
		flag = flag1;
	} else {
		det = 1 / det;
		var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
		var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
		var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
		var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
		var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
		this.kMassa = A;
		this.kMassb = B;
		this.kMassd = D;
		this.kMassc = C;
		this.kMasse = E;
		this.kMassf = F;
		flag = 0;
	}
	if((flag & 1) != 0) this.jAccx = 0;
	if((flag & 2) != 0) this.jAccy = 0;
	if((flag & 4) != 0) this.jAccz = 0;
	if(!this.stiff) {
		var biasCoef;
		var X2;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		X2 = ig;
		this.kMassa *= X2;
		this.kMassb *= X2;
		this.kMassd *= X2;
		this.kMassc *= X2;
		this.kMasse *= X2;
		this.kMassf *= X2;
		this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		this.biasz = this.b2.rot - this.b1.rot - this.phase;
		if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
		var t = -biasCoef;
		var t1 = t;
		this.biasx *= t1;
		this.biasy *= t1;
		this.biasz *= t;
		var t2 = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			var t4 = t3;
			this.biasx *= t4;
			this.biasy *= t4;
			this.biasz *= t3;
		}
	} else {
		this.biasx = 0;
		this.biasy = 0;
		this.biasz = 0;
		this.gamma = 0;
	}
	var t5 = dtratio;
	var t6 = t5;
	this.jAccx *= t6;
	this.jAccy *= t6;
	this.jAccz *= t5;
	this.jMax = this.maxForce * dt;
	return false;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.jAccx * t;
	this.b1.vely -= this.jAccy * t;
	var t1 = this.b2.imass;
	this.b2.velx += this.jAccx * t1;
	this.b2.vely += this.jAccy * t1;
	this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
	this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.applyImpulseVel = function() {
	var Ex = 0.0;
	var Ey = 0.0;
	var Ez = 0.0;
	Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
	Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
	Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
	var Jx = 0.0;
	var Jy = 0.0;
	var Jz = 0.0;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	Jz = this.biasz - Ez;
	var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
	var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
	Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
	Jx = X;
	Jy = Y;
	var t = this.gamma;
	var t1 = t;
	Jx -= this.jAccx * t1;
	Jy -= this.jAccy * t1;
	Jz -= this.jAccz * t;
	var jOldx = 0.0;
	var jOldy = 0.0;
	var jOldz = 0.0;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	jOldz = this.jAccz;
	var t2 = 1;
	var t3 = t2;
	this.jAccx += Jx * t3;
	this.jAccy += Jy * t3;
	this.jAccz += Jz * t2;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
	} else if(!this.stiff) {
		var t4 = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
		if(ls > t4 * t4) {
			var t5 = t4 * (1.0 / Math.sqrt(ls));
			var t6 = t5;
			this.jAccx *= t6;
			this.jAccy *= t6;
			this.jAccz *= t5;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	Jz = this.jAccz - jOldz;
	var t7 = this.b1.imass;
	this.b1.velx -= Jx * t7;
	this.b1.vely -= Jy * t7;
	var t8 = this.b2.imass;
	this.b2.velx += Jx * t8;
	this.b2.vely += Jy * t8;
	this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
	this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
	return false;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.applyImpulsePos = function() {
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var Ex = 0.0;
	var Ey = 0.0;
	var Ez = 0.0;
	Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
	Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
	Ez = this.b2.rot - this.b1.rot - this.phase;
	var Jx = 0.0;
	var Jy = 0.0;
	var Jz = 0.0;
	if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
	var cont = true;
	if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) {
		cont = false;
		Ex = 0;
		Ey = 0;
	}
	if(Ez * Ez < zpp_nape.util.ZPP_Math.sqr(nape.Config.constraintAngularSlop)) {
		if(!cont) return false; else Ez = 0;
	}
	var t = 0.5;
	var t1 = t;
	Ex *= t1;
	Ey *= t1;
	Ez *= t;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > nape.Config.epsilon) {
			k = 0.75 / k;
			Jx = -Ex * k;
			Jy = -Ey * k;
			var t2 = 20;
			var ls = Jx * Jx + Jy * Jy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				Jx *= t3;
				Jy *= t3;
			}
			var t4 = this.b1.imass;
			this.b1.posx -= Jx * t4;
			this.b1.posy -= Jy * t4;
			var t5 = this.b2.imass;
			this.b2.posx += Jx * t5;
			this.b2.posy += Jy * t5;
			Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
			Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
			Ez = this.b2.rot - this.b1.rot - this.phase;
			var t6 = 0.5;
			var t7 = t6;
			Ex *= t7;
			Ey *= t7;
			Ez *= t6;
		}
	}
	var Ka = 0.0;
	var Kb = 0.0;
	var Kd = 0.0;
	var Kc = 0.0;
	var Ke = 0.0;
	var Kf = 0.0;
	var m = this.b1.smass + this.b2.smass;
	Ka = m;
	Kb = 0;
	Kd = m;
	Kc = 0;
	Ke = 0;
	Kf = 0;
	if(this.b1.sinertia != 0) {
		var X = r1x * this.b1.sinertia;
		var Y = r1y * this.b1.sinertia;
		Ka += Y * r1y;
		Kb += -Y * r1x;
		Kd += X * r1x;
		Kc += -Y;
		Ke += X;
		Kf += this.b1.sinertia;
	}
	if(this.b2.sinertia != 0) {
		var X1 = r2x * this.b2.sinertia;
		var Y1 = r2y * this.b2.sinertia;
		Ka += Y1 * r2y;
		Kb += -Y1 * r2x;
		Kd += X1 * r2x;
		Kc += -Y1;
		Ke += X1;
		Kf += this.b2.sinertia;
	}
	Jx = -Ex;
	Jy = -Ey;
	Jz = -Ez;
	var t8 = 6;
	var ls1 = Jx * Jx + Jy * Jy;
	if(ls1 > t8 * t8) {
		var t9 = t8 * (1.0 / Math.sqrt(ls1));
		Jx *= t9;
		Jy *= t9;
	}
	zpp_nape.util.ZPP_Math.clamp(Jz,-0.25,0.25);
	var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
	if(det != det) Jx = Jy = Jz = 0; else if(det == 0) {
		if(Ka != 0) Jx /= Ka; else Jx = 0;
		if(Kd != 0) Jy /= Kd; else Jy = 0;
		if(Kf != 0) Jz /= Kf; else Jz = 0;
	} else {
		det = 1 / det;
		var B = Ke * Kc - Kb * Kf;
		var C = Kb * Ke - Kc * Kd;
		var E = Kb * Kc - Ka * Ke;
		var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
		var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
		Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
		Jx = X2;
		Jy = Y2;
	}
	var t10 = this.b1.imass;
	this.b1.posx -= Jx * t10;
	this.b1.posy -= Jy * t10;
	var t11 = this.b2.imass;
	this.b2.posx += Jx * t11;
	this.b2.posy += Jy * t11;
	this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
	this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
	return false;
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.draw = function(g) {
};
zpp_nape.constraint.ZPP_WeldJoint.prototype.__class__ = zpp_nape.constraint.ZPP_WeldJoint;
if(!zpp_nape.dynamics) zpp_nape.dynamics = {};
zpp_nape.dynamics.ZPP_Arbiter = $hxClasses['zpp_nape.dynamics.ZPP_Arbiter'] = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
zpp_nape.dynamics.ZPP_Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_nape.dynamics.ZPP_Arbiter.prototype.outer = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.dynamics.ZPP_Arbiter.internal = true;
		if(this.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
			this.colarb.outer_zn = new nape.dynamics.CollisionArbiter();
			this.outer = this.colarb.outer_zn;
		} else if(this.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) {
			this.fluidarb.outer_zn = new nape.dynamics.FluidArbiter();
			this.outer = this.fluidarb.outer_zn;
		} else this.outer = new nape.dynamics.Arbiter();
		this.outer.zpp_inner = this;
		zpp_nape.dynamics.ZPP_Arbiter.internal = false;
	}
	return this.outer;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.inactiveme = function() {
	return !this.active;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.hnext = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.id = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.di = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.stamp = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.up_stamp = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.sleep_stamp = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.endGenerated = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.active = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.cleared = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.sleeping = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.present = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.intchange = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.presentable = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.continuous = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.fresh = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.immState = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.acting = function() {
	return this.active && (this.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.invalidated = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.b1 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.b2 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.ws1 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.ws2 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.pair = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.swap_features = function() {
	var t = this.b1;
	this.b1 = this.b2;
	this.b2 = t;
	var t1 = this.ws1;
	this.ws1 = this.ws2;
	this.ws2 = t1;
	var t2 = this.colarb.s1;
	this.colarb.s1 = this.colarb.s2;
	this.colarb.s2 = t2;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.type = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.colarb = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.fluidarb = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.sensorarb = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.lazyRetire = function(s,b) {
	this.cleared = true;
	if(b == null || this.b2 == b) this.b1.arbiters.inlined_try_remove(this);
	if(b == null || this.b1 == b) this.b2.arbiters.inlined_try_remove(this);
	if(this.pair != null) {
		this.pair.arb = null;
		this.pair = null;
	}
	this.active = false;
	s.f_arbiters.modified = true;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.sup_assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	this.b1.arbiters.inlined_add(this);
	this.b2.arbiters.inlined_add(this);
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.sup_retire = function() {
	if(!this.cleared) {
		this.b1.arbiters.inlined_try_remove(this);
		this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
};
zpp_nape.dynamics.ZPP_Arbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_SensorArbiter = $hxClasses['zpp_nape.dynamics.ZPP_SensorArbiter'] = function() {
	this.next = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	this.sensorarb = this;
};
zpp_nape.dynamics.ZPP_SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_nape.dynamics.ZPP_SensorArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
for(var k in zpp_nape.dynamics.ZPP_Arbiter.prototype ) zpp_nape.dynamics.ZPP_SensorArbiter.prototype[k] = zpp_nape.dynamics.ZPP_Arbiter.prototype[k];
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.next = null;
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.alloc = function() {
};
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.free = function() {
};
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	this.b1.arbiters.inlined_add(this);
	this.b2.arbiters.inlined_add(this);
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
};
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.retire = function() {
	if(!this.cleared) {
		this.b1.arbiters.inlined_try_remove(this);
		this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
	var o = this;
	o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
	zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
};
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.makemutable = function() {
};
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.makeimmutable = function() {
};
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_SensorArbiter;
zpp_nape.dynamics.ZPP_FluidArbiter = $hxClasses['zpp_nape.dynamics.ZPP_FluidArbiter'] = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
zpp_nape.dynamics.ZPP_FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_nape.dynamics.ZPP_FluidArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
for(var k in zpp_nape.dynamics.ZPP_Arbiter.prototype ) zpp_nape.dynamics.ZPP_FluidArbiter.prototype[k] = zpp_nape.dynamics.ZPP_Arbiter.prototype[k];
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.outer_zn = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.next = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.alloc = function() {
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.free = function() {
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.centroidx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.centroidy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.overlap = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r1x = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r1y = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r2x = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r2y = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.nodrag = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.wMass = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.adamp = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.agamma = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.vMassa = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.vMassb = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.vMassc = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.dampx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.dampy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.lgamma = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.nx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.ny = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.buoyx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.buoyy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.position_validate = function() {
	if(!this.active) throw "Error: Arbiter not currently in use";
	this.wrap_position.zpp_inner.x = this.centroidx;
	this.wrap_position.zpp_inner.y = this.centroidy;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.position_invalidate = function(x) {
	this.centroidx = x.x;
	this.centroidy = x.y;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.wrap_position = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.getposition = function() {
	this.wrap_position = nape.geom.Vec2.get(null,null,null);
	this.wrap_position.zpp_inner._inuse = true;
	this.wrap_position.zpp_inner._immutable = !this.mutable;
	this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	this.b1.arbiters.inlined_add(this);
	this.b2.arbiters.inlined_add(this);
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
	this.nx = 0;
	this.ny = 1;
	this.dampx = 0;
	this.dampy = 0;
	this.adamp = 0.0;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.retire = function() {
	if(!this.cleared) {
		this.b1.arbiters.inlined_try_remove(this);
		this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
	var o = this;
	o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
	zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
	this.pre_dt = -1.0;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.mutable = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.makemutable = function() {
	this.mutable = true;
	if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = false;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.makeimmutable = function() {
	this.mutable = false;
	if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = true;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.inject = function(area,cx,cy) {
	this.overlap = area;
	this.centroidx = cx;
	this.centroidy = cy;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.pre_dt = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.preStep = function(s,dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.r1x = this.centroidx - this.b1.posx;
	this.r1y = this.centroidy - this.b1.posy;
	this.r2x = this.centroidx - this.b2.posx;
	this.r2y = this.centroidy - this.b2.posy;
	var g1x = 0.0;
	var g1y = 0.0;
	if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
		g1x = this.ws1.fluidProperties.gravityx;
		g1y = this.ws1.fluidProperties.gravityy;
	} else {
		g1x = s.gravityx;
		g1y = s.gravityy;
	}
	var g2x = 0.0;
	var g2y = 0.0;
	if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
		g2x = this.ws2.fluidProperties.gravityx;
		g2y = this.ws2.fluidProperties.gravityy;
	} else {
		g2x = s.gravityx;
		g2y = s.gravityy;
	}
	var buoyx = 0;
	var buoyy = 0;
	if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
		var mass1 = this.overlap * this.ws1.fluidProperties.density;
		var mass2 = this.overlap * this.ws2.fluidProperties.density;
		if(mass1 > mass2) {
			var t = mass1 + mass2;
			buoyx -= g1x * t;
			buoyy -= g1y * t;
		} else if(mass1 < mass2) {
			var t1 = mass1 + mass2;
			buoyx += g2x * t1;
			buoyy += g2y * t1;
		} else {
			var gx = 0.0;
			var gy = 0.0;
			gx = g1x + g2x;
			gy = g1y + g2y;
			var t2 = 0.5;
			gx *= t2;
			gy *= t2;
			if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
				var t3 = mass1 + mass2;
				buoyx -= gx * t3;
				buoyy -= gy * t3;
			} else {
				var t4 = mass1 + mass2;
				buoyx += gx * t4;
				buoyy += gy * t4;
			}
		}
	} else if(this.ws1.fluidEnabled) {
		var mass = this.overlap * this.ws1.fluidProperties.density;
		var t5 = mass;
		buoyx -= g1x * t5;
		buoyy -= g1y * t5;
	} else if(this.ws2.fluidEnabled) {
		var mass3 = this.overlap * this.ws2.fluidProperties.density;
		var t6 = mass3;
		buoyx += g2x * t6;
		buoyy += g2y * t6;
	}
	var t7 = dt;
	buoyx *= t7;
	buoyy *= t7;
	this.buoyx = buoyx;
	this.buoyy = buoyy;
	if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var t8 = this.b1.imass;
		this.b1.velx -= buoyx * t8;
		this.b1.vely -= buoyy * t8;
		this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
	}
	if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var t9 = this.b2.imass;
		this.b2.velx += buoyx * t9;
		this.b2.vely += buoyy * t9;
		this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
	}
	if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
		this.nodrag = true;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0;
	} else {
		this.nodrag = false;
		var tViscosity = 0.0;
		if(this.ws1.fluidEnabled) {
			this.ws2.validate_angDrag();
			tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
		}
		if(this.ws2.fluidEnabled) {
			this.ws1.validate_angDrag();
			tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
		}
		if(tViscosity != 0) {
			var iSum = this.b1.sinertia + this.b2.sinertia;
			if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
			var biasCoef;
			tViscosity *= 0.0004;
			var omega = 2 * Math.PI * tViscosity;
			this.agamma = 1 / (dt * omega * (2 + omega * dt));
			var ig = 1 / (1 + this.agamma);
			biasCoef = dt * omega * omega * this.agamma;
			this.agamma *= ig;
			this.wMass *= ig;
		} else {
			this.wMass = 0.0;
			this.agamma = 0.0;
		}
		var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
		var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
		if(vrnx * vrnx + vrny * vrny < nape.Config.epsilon * nape.Config.epsilon) {
		} else {
			var d = vrnx * vrnx + vrny * vrny;
			var imag = 1.0 / Math.sqrt(d);
			var t10 = imag;
			vrnx *= t10;
			vrny *= t10;
			this.nx = vrnx;
			this.ny = vrny;
		}
		var tViscosity1 = 0.0;
		if(this.ws1.fluidEnabled) {
			var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
			if(this.ws2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws2.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI); else {
				var poly = this.ws2.polygon;
				var bord = 0.0;
				var acc = 0.0;
				var cx_ite = poly.edges.head;
				while(cx_ite != null) {
					var ex = cx_ite.elt;
					bord += ex.length;
					var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
					if(fact > 0) fact = fact *= -nape.Config.fluidVacuumDrag;
					acc -= fact * 0.5 * nape.Config.fluidLinearDrag;
					cx_ite = cx_ite.next;
				}
				tViscosity1 += acc / bord;
			}
		}
		if(this.ws2.fluidEnabled) {
			var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
			if(this.ws1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f1 * this.ws1.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI); else {
				var poly1 = this.ws1.polygon;
				var bord1 = 0.0;
				var acc1 = 0.0;
				var cx_ite1 = poly1.edges.head;
				while(cx_ite1 != null) {
					var ex1 = cx_ite1.elt;
					bord1 += ex1.length;
					var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
					if(fact1 > 0) fact1 = fact1 *= -nape.Config.fluidVacuumDrag;
					acc1 -= fact1 * 0.5 * nape.Config.fluidLinearDrag;
					cx_ite1 = cx_ite1.next;
				}
				tViscosity1 += acc1 / bord1;
			}
		}
		if(tViscosity1 != 0) {
			var m = this.b1.smass + this.b2.smass;
			var Ka = 0.0;
			var Kb = 0.0;
			var Kc = 0.0;
			Ka = m;
			Kb = 0;
			Kc = m;
			if(this.b1.sinertia != 0) {
				var X = this.r1x * this.b1.sinertia;
				var Y = this.r1y * this.b1.sinertia;
				Ka += Y * this.r1y;
				Kb += -Y * this.r1x;
				Kc += X * this.r1x;
			}
			if(this.b2.sinertia != 0) {
				var X1 = this.r2x * this.b2.sinertia;
				var Y1 = this.r2y * this.b2.sinertia;
				Ka += Y1 * this.r2y;
				Kb += -Y1 * this.r2x;
				Kc += X1 * this.r2x;
			}
			var det = Ka * Kc - Kb * Kb;
			if(det != det) {
				Ka = Kb = Kc = 0;
				3;
			} else if(det == 0) {
				var flag = 0;
				if(Ka != 0) Ka = 1 / Ka; else {
					Ka = 0;
					flag |= 1;
				}
				if(Kc != 0) Kc = 1 / Kc; else {
					Kc = 0;
					flag |= 2;
				}
				Kb = 0;
				flag;
			} else {
				det = 1 / det;
				var t11 = Kc * det;
				Kc = Ka * det;
				Ka = t11;
				Kb *= -det;
				0;
			}
			this.vMassa = Ka;
			this.vMassb = Kb;
			this.vMassc = Kc;
			var biasCoef1;
			var X2;
			var omega1 = 2 * Math.PI * tViscosity1;
			this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
			var ig1 = 1 / (1 + this.lgamma);
			biasCoef1 = dt * omega1 * omega1 * this.lgamma;
			this.lgamma *= ig1;
			X2 = ig1;
			this.vMassa *= X2;
			this.vMassb *= X2;
			this.vMassc *= X2;
		} else {
			this.vMassa = 0;
			this.vMassb = 0;
			this.vMassc = 0;
			this.lgamma = 0.0;
		}
	}
	var t12 = dtratio;
	this.dampx *= t12;
	this.dampy *= t12;
	this.adamp *= dtratio;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.dampx * t;
	this.b1.vely -= this.dampy * t;
	var t1 = this.b2.imass;
	this.b2.velx += this.dampx * t1;
	this.b2.vely += this.dampy * t1;
	this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
	this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
	this.b1.angvel -= this.adamp * this.b1.iinertia;
	this.b2.angvel += this.adamp * this.b2.iinertia;
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.applyImpulseVel = function() {
	if(!this.nodrag) {
		var w1 = this.b1.angvel + this.b1.kinangvel;
		var w2 = this.b2.angvel + this.b2.kinangvel;
		var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
		var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
		var t = this.vMassa * jx + this.vMassb * jy;
		jy = this.vMassb * jx + this.vMassc * jy;
		jx = t;
		var t1 = this.lgamma;
		jx -= this.dampx * t1;
		jy -= this.dampy * t1;
		var t2 = 1.0;
		this.dampx += jx * t2;
		this.dampy += jy * t2;
		var t3 = this.b1.imass;
		this.b1.velx -= jx * t3;
		this.b1.vely -= jy * t3;
		var t4 = this.b2.imass;
		this.b2.velx += jx * t4;
		this.b2.vely += jy * t4;
		this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
		var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
		this.adamp += j_damp;
		this.b1.angvel -= j_damp * this.b1.iinertia;
		this.b2.angvel += j_damp * this.b2.iinertia;
	}
};
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_FluidArbiter;
zpp_nape.dynamics.ZPP_ColArbiter = $hxClasses['zpp_nape.dynamics.ZPP_ColArbiter'] = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_nape.dynamics.ZPP_Contact();
	this.innards = new zpp_nape.dynamics.ZPP_IContact();
	this.type = zpp_nape.dynamics.ZPP_Arbiter.COL;
	this.colarb = this;
};
zpp_nape.dynamics.ZPP_ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_nape.dynamics.ZPP_ColArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
for(var k in zpp_nape.dynamics.ZPP_Arbiter.prototype ) zpp_nape.dynamics.ZPP_ColArbiter.prototype[k] = zpp_nape.dynamics.ZPP_Arbiter.prototype[k];
zpp_nape.dynamics.ZPP_ColArbiter.prototype.outer_zn = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.dyn_fric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.stat_fric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.restitution = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rfric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.userdef_dyn_fric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.userdef_stat_fric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.userdef_restitution = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.userdef_rfric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.s1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.s2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.contacts = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.wrap_contacts = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.innards = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.nx = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.ny = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.normal_validate = function() {
	if(this.cleared) throw "Error: Arbiter not currently in use";
	this.wrap_normal.zpp_inner.x = this.nx;
	this.wrap_normal.zpp_inner.y = this.ny;
	if(this.ws1.id > this.ws2.id) {
		this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
		this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
	}
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.wrap_normal = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.getnormal = function() {
	this.wrap_normal = nape.geom.Vec2.get(0,0,null);
	this.wrap_normal.zpp_inner._immutable = true;
	this.wrap_normal.zpp_inner._inuse = true;
	this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.kMassa = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.kMassb = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.kMassc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.Ka = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.Kb = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.Kc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rMass = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.jrAcc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn1a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt1a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn1b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt1b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn2a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt2a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn2b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt2b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k1x = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k1y = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k2x = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k2y = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.surfacex = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.surfacey = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.ptype = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.lnormx = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.lnormy = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.lproj = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.radius = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rev = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.biasCoef = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.__ref_edge1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.__ref_edge2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.__ref_vertex = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.c1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.oc1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.c2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.oc2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.hc2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.hpc2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.next = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.alloc = function() {
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.free = function() {
	this.userdef_dyn_fric = false;
	this.userdef_stat_fric = false;
	this.userdef_restitution = false;
	this.userdef_rfric = false;
	this.__ref_edge1 = this.__ref_edge2 = null;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.stat = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.injectContact = function(px,py,nx,ny,dist,hash,posOnly) {
	if(posOnly == null) posOnly = false;
	var c = null;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var cur = cx_ite;
		if(hash == cur.hash) {
			c = cur;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(c == null) {
		if(zpp_nape.dynamics.ZPP_Contact.zpp_pool == null) c = new zpp_nape.dynamics.ZPP_Contact(); else {
			c = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = c.next;
			c.next = null;
		}
		null;
		var ci = c.inner;
		ci.jnAcc = ci.jtAcc = 0;
		c.hash = hash;
		c.fresh = true;
		c.arbiter = this;
		this.jrAcc = 0;
		this.contacts.inlined_add(c);
		this.innards.add(ci);
	} else c.fresh = false;
	c.px = px;
	c.py = py;
	this.nx = nx;
	this.ny = ny;
	c.dist = dist;
	c.stamp = this.stamp;
	c.posOnly = posOnly;
	return c;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	this.b1.arbiters.inlined_add(this);
	this.b2.arbiters.inlined_add(this);
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
	this.s1 = s1;
	this.s2 = s2;
	if(!this.userdef_restitution) {
		if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
		if(this.restitution < 0) this.restitution = 0;
		if(this.restitution > 1) this.restitution = 1;
	}
	if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
	if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
	if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.calcProperties = function() {
	if(!this.userdef_restitution) {
		if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
		if(this.restitution < 0) this.restitution = 0;
		if(this.restitution > 1) this.restitution = 1;
	}
	if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
	if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
	if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.validate_props = function() {
	if(this.invalidated) {
		this.invalidated = false;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.retire = function() {
	if(!this.cleared) {
		this.b1.arbiters.inlined_try_remove(this);
		this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
	while(!(this.contacts.next == null)) {
		var o = this.contacts.inlined_pop_unsafe();
		o.arbiter = null;
		o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
		this.innards.inlined_pop();
	}
	var o1 = this;
	o1.userdef_dyn_fric = false;
	o1.userdef_stat_fric = false;
	o1.userdef_restitution = false;
	o1.userdef_rfric = false;
	o1.__ref_edge1 = o1.__ref_edge2 = null;
	o1.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
	zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o1;
	this.pre_dt = -1.0;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.mutable = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.makemutable = function() {
	this.mutable = true;
	if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = false;
	if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = false;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.makeimmutable = function() {
	this.mutable = false;
	if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = true;
	if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = true;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.contacts_adder = function(x) {
	throw "Error: Cannot add new contacts, information required is far too specific and detailed :)";
	return false;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.contacts_subber = function(x) {
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c == x.zpp_inner) {
			this.contacts.erase(pre);
			this.innards.erase(prei);
			var o = c;
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			break;
		}
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.setupcontacts = function() {
	this.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(this.contacts,true);
	this.wrap_contacts.zpp_inner.immutable = !this.mutable;
	this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
	this.wrap_contacts.zpp_inner.dontremove = true;
	this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.cleanupContacts = function() {
	var fst = true;
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	this.hc2 = false;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
			cx_ite = this.contacts.inlined_erase(pre);
			cx_itei = this.innards.inlined_erase(prei);
			var o = c;
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			continue;
		}
		var ci = c.inner;
		var pact = c.active;
		c.active = c.stamp == this.stamp;
		if(c.active) {
			if(fst) {
				fst = false;
				this.c1 = ci;
				this.oc1 = c;
			} else {
				this.hc2 = true;
				this.c2 = ci;
				this.oc2 = c;
			}
		}
		if(pact != c.active) this.contacts.modified = true;
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
	if(this.hc2) {
		this.hpc2 = true;
		if(this.oc1.posOnly) {
			var tmp = this.c1;
			this.c1 = this.c2;
			this.c2 = tmp;
			var tmp2 = this.oc1;
			this.oc1 = this.oc2;
			this.oc2 = tmp2;
			this.hc2 = false;
		} else if(this.oc2.posOnly) this.hc2 = false;
		if(this.oc1.posOnly) fst = true;
	} else this.hpc2 = false;
	return fst;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.pre_dt = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.preStep = function(dt) {
	if(this.invalidated) {
		this.invalidated = false;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	var mass_sum = this.b1.smass + this.b2.smass;
	this.hc2 = false;
	var fst = true;
	var statType = !(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC);
	var bias;
	if(statType) {
		if(this.continuous) bias = nape.Config.contactContinuousStaticBiasCoef; else bias = nape.Config.contactStaticBiasCoef;
	} else if(this.continuous) bias = nape.Config.contactContinuousBiasCoef; else bias = nape.Config.contactBiasCoef;
	this.biasCoef = bias;
	this.continuous = false;
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
			cx_ite = this.contacts.inlined_erase(pre);
			cx_itei = this.innards.inlined_erase(prei);
			var o = c;
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			continue;
		}
		var ci = c.inner;
		var pact = c.active;
		c.active = c.stamp == this.stamp;
		if(c.active) {
			if(fst) {
				fst = false;
				this.c1 = ci;
				this.oc1 = c;
			} else {
				this.hc2 = true;
				this.c2 = ci;
				this.oc2 = c;
			}
			ci.r2x = c.px - this.b2.posx;
			ci.r2y = c.py - this.b2.posy;
			ci.r1x = c.px - this.b1.posx;
			ci.r1y = c.py - this.b1.posy;
			var kt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
			kt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
			if(kt < nape.Config.epsilon * nape.Config.epsilon) ci.tMass = 0; else ci.tMass = 1.0 / kt;
			var nt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
			nt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
			if(nt < nape.Config.epsilon * nape.Config.epsilon) ci.nMass = 0; else ci.nMass = 1.0 / nt;
			var vrx = 0.0;
			var vry = 0.0;
			var ang = this.b2.angvel + this.b2.kinangvel;
			vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
			vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
			ang = this.b1.angvel + this.b1.kinangvel;
			vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
			vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
			var vdot = this.nx * vrx + this.ny * vry;
			c.elasticity = this.restitution;
			ci.bounce = vdot * c.elasticity;
			if(ci.bounce > -nape.Config.elasticThreshold) ci.bounce = 0;
			vdot = vry * this.nx - vrx * this.ny;
			var thr = nape.Config.staticFrictionThreshold;
			if(vdot * vdot > thr * thr) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
			ci.jnAcc *= dtratio;
			ci.jtAcc *= dtratio;
		}
		if(pact != c.active) this.contacts.modified = true;
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
	if(this.hc2) {
		this.hpc2 = true;
		if(this.oc1.posOnly) {
			var tmp = this.c1;
			this.c1 = this.c2;
			this.c2 = tmp;
			var tmp2 = this.oc1;
			this.oc1 = this.oc2;
			this.oc2 = tmp2;
			this.hc2 = false;
		} else if(this.oc2.posOnly) this.hc2 = false;
		if(this.oc1.posOnly) fst = true;
	} else this.hpc2 = false;
	this.jrAcc *= dtratio;
	if(!fst) {
		this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
		this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
		this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
		this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
		this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
		this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
	}
	if(this.hc2) {
		this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
		this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
		this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
		this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
		this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
		this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
		this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
		this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
		this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
		var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
		if(norm < nape.Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
			this.Ka = this.kMassa;
			this.Kb = this.kMassb;
			this.Kc = this.kMassc;
			var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
			if(det != det) {
				this.kMassa = this.kMassb = this.kMassc = 0;
				3;
			} else if(det == 0) {
				var flag = 0;
				if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
					this.kMassa = 0;
					flag |= 1;
				}
				if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
					this.kMassc = 0;
					flag |= 2;
				}
				this.kMassb = 0;
				flag;
			} else {
				det = 1 / det;
				var t = this.kMassc * det;
				this.kMassc = this.kMassa * det;
				this.kMassa = t;
				this.kMassb *= -det;
				0;
			}
		} else {
			this.hc2 = false;
			if(this.oc2.dist < this.oc1.dist) {
				var t1 = this.c1;
				this.c1 = this.c2;
				this.c2 = t1;
			}
			this.oc2.active = false;
			this.contacts.modified = true;
		}
	}
	this.surfacex = this.b2.svelx;
	this.surfacey = this.b2.svely;
	var t2 = 1.0;
	this.surfacex += this.b1.svelx * t2;
	this.surfacey += this.b1.svely * t2;
	this.surfacex = -this.surfacex;
	this.surfacey = -this.surfacey;
	this.rMass = this.b1.sinertia + this.b2.sinertia;
	if(this.rMass != 0) this.rMass = 1 / this.rMass;
	return fst;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.warmStart = function() {
	var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
	var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
	var t = this.b1.imass;
	this.b1.velx -= jx * t;
	this.b1.vely -= jy * t;
	this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
	var t1 = this.b2.imass;
	this.b2.velx += jx * t1;
	this.b2.vely += jy * t1;
	this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
	if(this.hc2) {
		var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
		var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
		var t2 = this.b1.imass;
		this.b1.velx -= jx1 * t2;
		this.b1.vely -= jy1 * t2;
		this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
		var t3 = this.b2.imass;
		this.b2.velx += jx1 * t3;
		this.b2.vely += jy1 * t3;
		this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
	}
	this.b2.angvel += this.jrAcc * this.b2.iinertia;
	this.b1.angvel -= this.jrAcc * this.b1.iinertia;
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.applyImpulseVel = function() {
	var jx;
	var jy;
	var j;
	var jMax;
	var jOld;
	var cjAcc;
	var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
	var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
	j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
	jMax = this.c1.friction * this.c1.jnAcc;
	jOld = this.c1.jtAcc;
	cjAcc = jOld - j;
	if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
	j = cjAcc - jOld;
	this.c1.jtAcc = cjAcc;
	jx = -this.ny * j;
	jy = this.nx * j;
	this.b2.velx += jx * this.b2.imass;
	this.b2.vely += jy * this.b2.imass;
	this.b1.velx -= jx * this.b1.imass;
	this.b1.vely -= jy * this.b1.imass;
	this.b2.angvel += this.rt1b * j * this.b2.iinertia;
	this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
	if(this.hc2) {
		var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
		var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
		j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
		jMax = this.c2.friction * this.c2.jnAcc;
		jOld = this.c2.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
		j = cjAcc - jOld;
		this.c2.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt2b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
		v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
		v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
		var ax = this.c1.jnAcc;
		var ay = this.c2.jnAcc;
		var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
		var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
		var xx = -(this.kMassa * jnx + this.kMassb * jny);
		var xy = -(this.kMassb * jnx + this.kMassc * jny);
		if(xx >= 0 && xy >= 0) {
			jnx = xx - ax;
			jny = xy - ay;
			this.c1.jnAcc = xx;
			this.c2.jnAcc = xy;
		} else {
			xx = -this.c1.nMass * jnx;
			if(xx >= 0 && this.Kb * xx + jny >= 0) {
				jnx = xx - ax;
				jny = -ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = 0;
			} else {
				xy = -this.c2.nMass * jny;
				if(xy >= 0 && this.Kb * xy + jnx >= 0) {
					jnx = -ax;
					jny = xy - ay;
					this.c1.jnAcc = 0;
					this.c2.jnAcc = xy;
				} else if(jnx >= 0 && jny >= 0) {
					jnx = -ax;
					jny = -ay;
					this.c1.jnAcc = this.c2.jnAcc = 0;
				} else {
					jnx = 0;
					jny = 0;
				}
			}
		}
		j = jnx + jny;
		jx = this.nx * j;
		jy = this.ny * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
		this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
	} else {
		if(this.radius != 0.0) {
			var dw = this.b2.angvel - this.b1.angvel;
			j = dw * this.rMass;
			jMax = this.rfric * this.c1.jnAcc;
			jOld = this.jrAcc;
			this.jrAcc -= j;
			if(this.jrAcc > jMax) this.jrAcc = jMax; else if(this.jrAcc < -jMax) this.jrAcc = -jMax;
			j = this.jrAcc - jOld;
			this.b2.angvel += j * this.b2.iinertia;
			this.b1.angvel -= j * this.b1.iinertia;
		}
		v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
		jOld = this.c1.jnAcc;
		cjAcc = jOld - j;
		if(cjAcc < 0.0) cjAcc = 0.0;
		j = cjAcc - jOld;
		this.c1.jnAcc = cjAcc;
		jx = this.nx * j;
		jy = this.ny * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rn1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
	}
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.applyImpulsePos = function() {
	if(this.ptype == 2) {
		var c = this.c1;
		var dx = 0.0;
		var dy = 0.0;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
		r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
		var t = 1.0;
		r2x += this.b2.posx * t;
		r2y += this.b2.posy * t;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
		r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
		var t1 = 1.0;
		r1x += this.b1.posx * t1;
		r1y += this.b1.posy * t1;
		var dx1 = 0.0;
		var dy1 = 0.0;
		dx1 = r2x - r1x;
		dy1 = r2y - r1y;
		var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
		var r = this.radius - nape.Config.collisionSlop;
		var err = dl - r;
		if(dx1 * this.nx + dy1 * this.ny < 0) {
			dx1 = -dx1;
			dy1 = -dy1;
			err -= this.radius;
		}
		if(err < 0) {
			if(dl < nape.Config.epsilon) {
				if(this.b1.smass != 0.0) this.b1.posx += nape.Config.epsilon * 10; else this.b2.posx += nape.Config.epsilon * 10;
			} else {
				var t2 = 1.0 / dl;
				dx1 *= t2;
				dy1 *= t2;
				var px = 0.5 * (r1x + r2x);
				var py = 0.5 * (r1y + r2y);
				var pen = dl - r;
				r1x = px - this.b1.posx;
				r1y = py - this.b1.posy;
				r2x = px - this.b2.posx;
				r2y = py - this.b2.posy;
				var rn1 = dy1 * r1x - dx1 * r1y;
				var rn2 = dy1 * r2x - dx1 * r2y;
				var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
				if(K != 0) {
					var jn = -this.biasCoef * pen / K;
					var Jx = 0.0;
					var Jy = 0.0;
					var t3 = jn;
					Jx = dx1 * t3;
					Jy = dy1 * t3;
					var t4 = this.b1.imass;
					this.b1.posx -= Jx * t4;
					this.b1.posy -= Jy * t4;
					this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
					var t5 = this.b2.imass;
					this.b2.posx += Jx * t5;
					this.b2.posy += Jy * t5;
					this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
				}
			}
		}
	} else {
		var gnormx = 0.0;
		var gnormy = 0.0;
		var gproj;
		var clip1x = 0.0;
		var clip1y = 0.0;
		var clip2x = 0;
		var clip2y = 0;
		if(this.ptype == 0) {
			gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
			gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
			gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
			clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
			clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
			var t6 = 1.0;
			clip1x += this.b2.posx * t6;
			clip1y += this.b2.posy * t6;
			if(this.hpc2) {
				clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
				clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
				var t7 = 1.0;
				clip2x += this.b2.posx * t7;
				clip2y += this.b2.posy * t7;
			}
		} else {
			gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
			gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
			gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
			clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
			clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
			var t8 = 1.0;
			clip1x += this.b1.posx * t8;
			clip1y += this.b1.posy * t8;
			if(this.hpc2) {
				clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
				clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
				var t9 = 1.0;
				clip2x += this.b1.posx * t9;
				clip2y += this.b1.posy * t9;
			}
		}
		var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
		err1 += nape.Config.collisionSlop;
		var err2 = 0.0;
		if(this.hpc2) {
			err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
			err2 += nape.Config.collisionSlop;
		}
		if(err1 < 0 || err2 < 0) {
			if(this.rev) {
				gnormx = -gnormx;
				gnormy = -gnormy;
			}
			var c1r1x = 0.0;
			var c1r1y = 0.0;
			c1r1x = clip1x - this.b1.posx;
			c1r1y = clip1y - this.b1.posy;
			var c1r2x = 0.0;
			var c1r2y = 0.0;
			c1r2x = clip1x - this.b2.posx;
			c1r2y = clip1y - this.b2.posy;
			var c2r1x = 0;
			var c2r1y = 0;
			var c2r2x = 0;
			var c2r2y = 0;
			if(this.hpc2) {
				c2r1x = clip2x - this.b1.posx;
				c2r1y = clip2y - this.b1.posy;
				c2r2x = clip2x - this.b2.posx;
				c2r2y = clip2y - this.b2.posy;
				var rn1a = gnormy * c1r1x - gnormx * c1r1y;
				var rn1b = gnormy * c1r2x - gnormx * c1r2y;
				var rn2a = gnormy * c2r1x - gnormx * c2r1y;
				var rn2b = gnormy * c2r2x - gnormx * c2r2y;
				var mass_sum = this.b1.smass + this.b2.smass;
				this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
				this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
				this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = this.kMassa;
				Kb = this.kMassb;
				Kc = this.kMassc;
				var bx = err1 * this.biasCoef;
				var by = err2 * this.biasCoef;
				do {
					var xx = 0.0;
					var xy = 0.0;
					xx = bx;
					xy = by;
					xx = -xx;
					xy = -xy;
					var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
					if(det != det) xx = xy = 0; else if(det == 0) {
						if(this.kMassa != 0) xx /= this.kMassa; else xx = 0;
						if(this.kMassc != 0) xy /= this.kMassc; else xy = 0;
					} else {
						det = 1 / det;
						var t10 = det * (this.kMassc * xx - this.kMassb * xy);
						xy = det * (this.kMassa * xy - this.kMassb * xx);
						xx = t10;
					}
					if(xx >= 0 && xy >= 0) {
						var t11 = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t11;
						this.b1.posy -= gnormy * t11;
						this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
						var t12 = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t12;
						this.b2.posy += gnormy * t12;
						this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
						break;
					}
					xx = -bx / Ka;
					xy = 0;
					var vn2 = Kb * xx + by;
					if(xx >= 0 && vn2 >= 0) {
						var t13 = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t13;
						this.b1.posy -= gnormy * t13;
						this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
						var t14 = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t14;
						this.b2.posy += gnormy * t14;
						this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
						break;
					}
					xx = 0;
					xy = -by / Kc;
					var vn1 = Kb * xy + bx;
					if(xy >= 0 && vn1 >= 0) {
						var t15 = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t15;
						this.b1.posy -= gnormy * t15;
						this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
						var t16 = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t16;
						this.b2.posy += gnormy * t16;
						this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
						break;
					}
				} while(false);
			} else {
				var rn11 = gnormy * c1r1x - gnormx * c1r1y;
				var rn21 = gnormy * c1r2x - gnormx * c1r2y;
				var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
				if(K1 != 0) {
					var jn1 = -this.biasCoef * err1 / K1;
					var Jx1 = 0.0;
					var Jy1 = 0.0;
					var t17 = jn1;
					Jx1 = gnormx * t17;
					Jy1 = gnormy * t17;
					var t18 = this.b1.imass;
					this.b1.posx -= Jx1 * t18;
					this.b1.posy -= Jy1 * t18;
					this.b1.delta_rot(-rn11 * this.b1.iinertia * jn1);
					var t19 = this.b2.imass;
					this.b2.posx += Jx1 * t19;
					this.b2.posy += Jy1 * t19;
					this.b2.delta_rot(rn21 * this.b2.iinertia * jn1);
				}
			}
		}
	}
};
zpp_nape.dynamics.ZPP_ColArbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_ColArbiter;
zpp_nape.dynamics.ZPP_Contact = $hxClasses['zpp_nape.dynamics.ZPP_Contact'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_IContact();
};
zpp_nape.dynamics.ZPP_Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_nape.dynamics.ZPP_Contact.prototype.outer = null;
zpp_nape.dynamics.ZPP_Contact.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.dynamics.ZPP_Contact.internal = true;
		this.outer = new nape.dynamics.Contact();
		zpp_nape.dynamics.ZPP_Contact.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.dynamics.ZPP_Contact.prototype.px = null;
zpp_nape.dynamics.ZPP_Contact.prototype.py = null;
zpp_nape.dynamics.ZPP_Contact.prototype.position_validate = function() {
	if(this.inactiveme()) throw "Error: Contact not currently in use";
	this.wrap_position.zpp_inner.x = this.px;
	this.wrap_position.zpp_inner.y = this.py;
};
zpp_nape.dynamics.ZPP_Contact.prototype.wrap_position = null;
zpp_nape.dynamics.ZPP_Contact.prototype.getposition = function() {
	var me = this;
	this.wrap_position = nape.geom.Vec2.get(null,null,null);
	this.wrap_position.zpp_inner._inuse = true;
	this.wrap_position.zpp_inner._immutable = true;
	this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
};
zpp_nape.dynamics.ZPP_Contact.prototype.inactiveme = function() {
	return !(this.active && this.arbiter != null && !(!this.arbiter.active));
};
zpp_nape.dynamics.ZPP_Contact.prototype.arbiter = null;
zpp_nape.dynamics.ZPP_Contact.prototype.inner = null;
zpp_nape.dynamics.ZPP_Contact.prototype.active = null;
zpp_nape.dynamics.ZPP_Contact.prototype.posOnly = null;
zpp_nape.dynamics.ZPP_Contact.prototype.stamp = null;
zpp_nape.dynamics.ZPP_Contact.prototype.hash = null;
zpp_nape.dynamics.ZPP_Contact.prototype.fresh = null;
zpp_nape.dynamics.ZPP_Contact.prototype.dist = null;
zpp_nape.dynamics.ZPP_Contact.prototype.elasticity = null;
zpp_nape.dynamics.ZPP_Contact.prototype.free = function() {
	this.arbiter = null;
};
zpp_nape.dynamics.ZPP_Contact.prototype.alloc = function() {
};
zpp_nape.dynamics.ZPP_Contact.prototype.next = null;
zpp_nape.dynamics.ZPP_Contact.prototype.elem = function() {
	return this;
};
zpp_nape.dynamics.ZPP_Contact.prototype.begin = function() {
	return this.next;
};
zpp_nape.dynamics.ZPP_Contact.prototype._inuse = null;
zpp_nape.dynamics.ZPP_Contact.prototype.modified = null;
zpp_nape.dynamics.ZPP_Contact.prototype.pushmod = null;
zpp_nape.dynamics.ZPP_Contact.prototype.length = null;
zpp_nape.dynamics.ZPP_Contact.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.dynamics.ZPP_Contact.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_add = function(o) {
	var temp;
	o._inuse = true;
	temp = o;
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.dynamics.ZPP_Contact.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.dynamics.ZPP_Contact.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_insert = function(cur,o) {
	var temp;
	o._inuse = true;
	temp = o;
	if(cur == null) {
		temp.next = this.next;
		this.next = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.dynamics.ZPP_Contact.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.dynamics.ZPP_Contact.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.dynamics.ZPP_Contact.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.dynamics.ZPP_Contact.prototype.clear = function() {
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_clear = function() {
};
zpp_nape.dynamics.ZPP_Contact.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.dynamics.ZPP_Contact.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.dynamics.ZPP_Contact.prototype.size = function() {
	return this.length;
};
zpp_nape.dynamics.ZPP_Contact.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.dynamics.ZPP_Contact.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		var npite = cx_ite;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.front = function() {
	return this.next;
};
zpp_nape.dynamics.ZPP_Contact.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.dynamics.ZPP_Contact.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it; else return null;
};
zpp_nape.dynamics.ZPP_Contact.prototype.__class__ = zpp_nape.dynamics.ZPP_Contact;
zpp_nape.dynamics.ZPP_IContact = $hxClasses['zpp_nape.dynamics.ZPP_IContact'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
zpp_nape.dynamics.ZPP_IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_nape.dynamics.ZPP_IContact.prototype.r1x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.r1y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.r2x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.r2y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.nMass = null;
zpp_nape.dynamics.ZPP_IContact.prototype.tMass = null;
zpp_nape.dynamics.ZPP_IContact.prototype.bounce = null;
zpp_nape.dynamics.ZPP_IContact.prototype.friction = null;
zpp_nape.dynamics.ZPP_IContact.prototype.jnAcc = null;
zpp_nape.dynamics.ZPP_IContact.prototype.jtAcc = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr1x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr1y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr2x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr2y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.next = null;
zpp_nape.dynamics.ZPP_IContact.prototype.elem = function() {
	return this;
};
zpp_nape.dynamics.ZPP_IContact.prototype.begin = function() {
	return this.next;
};
zpp_nape.dynamics.ZPP_IContact.prototype._inuse = null;
zpp_nape.dynamics.ZPP_IContact.prototype.modified = null;
zpp_nape.dynamics.ZPP_IContact.prototype.pushmod = null;
zpp_nape.dynamics.ZPP_IContact.prototype.length = null;
zpp_nape.dynamics.ZPP_IContact.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.dynamics.ZPP_IContact.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_add = function(o) {
	var temp;
	o._inuse = true;
	temp = o;
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.dynamics.ZPP_IContact.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.dynamics.ZPP_IContact.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_insert = function(cur,o) {
	var temp;
	o._inuse = true;
	temp = o;
	if(cur == null) {
		temp.next = this.next;
		this.next = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.dynamics.ZPP_IContact.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.dynamics.ZPP_IContact.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.dynamics.ZPP_IContact.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.dynamics.ZPP_IContact.prototype.clear = function() {
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_clear = function() {
};
zpp_nape.dynamics.ZPP_IContact.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.dynamics.ZPP_IContact.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.dynamics.ZPP_IContact.prototype.size = function() {
	return this.length;
};
zpp_nape.dynamics.ZPP_IContact.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.dynamics.ZPP_IContact.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		var npite = cx_ite;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.front = function() {
	return this.next;
};
zpp_nape.dynamics.ZPP_IContact.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.dynamics.ZPP_IContact.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it; else return null;
};
zpp_nape.dynamics.ZPP_IContact.prototype.__class__ = zpp_nape.dynamics.ZPP_IContact;
zpp_nape.dynamics.ZPP_InteractionFilter = $hxClasses['zpp_nape.dynamics.ZPP_InteractionFilter'] = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
zpp_nape.dynamics.ZPP_InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.next = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.userData = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.outer = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.dynamics.InteractionFilter();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.free = function() {
	this.outer = null;
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.alloc = function() {
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shapes = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.wrap_shapes = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.feature_cons = function() {
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.addShape = function(shape) {
	this.shapes.add(shape);
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.copy = function() {
	var ret;
	if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
		ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.collisionGroup = this.collisionGroup;
	ret.collisionMask = this.collisionMask;
	ret.sensorGroup = this.sensorGroup;
	ret.sensorMask = this.sensorMask;
	ret.fluidGroup = this.fluidGroup;
	ret.fluidMask = this.fluidMask;
	return ret;
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.collisionGroup = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.collisionMask = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shouldCollide = function(x) {
	return (this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & this.collisionGroup) != 0;
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.sensorGroup = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.sensorMask = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shouldSense = function(x) {
	return (this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & this.sensorGroup) != 0;
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.fluidGroup = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.fluidMask = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shouldFlow = function(x) {
	return (this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & this.fluidGroup) != 0;
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.invalidate = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.invalidate_filter();
		cx_ite = cx_ite.next;
	}
};
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.__class__ = zpp_nape.dynamics.ZPP_InteractionFilter;
zpp_nape.dynamics.ZPP_InteractionGroup = $hxClasses['zpp_nape.dynamics.ZPP_InteractionGroup'] = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
};
zpp_nape.dynamics.ZPP_InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.outer = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.ignore = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.group = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.setGroup = function(group) {
	if(this.group != group) {
		if(this.group != null) {
			this.group.groups.remove(this);
			this.depth = 0;
			this.group.invalidate(true);
		}
		this.group = group;
		if(group != null) {
			group.groups.add(this);
			this.depth = group.depth + 1;
			group.invalidate(true);
		} else this.invalidate(true);
	}
};
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.groups = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.wrap_groups = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.interactors = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.wrap_interactors = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.depth = null;
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.invalidate = function(force) {
	if(force == null) force = false;
	if(!(force || this.ignore)) return;
	var cx_ite = this.interactors.head;
	while(cx_ite != null) {
		var b = cx_ite.elt;
		if(b.ibody != null) b.ibody.wake(); else if(b.ishape != null) b.ishape.body.wake(); else b.icompound.wake();
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.groups.head;
	while(cx_ite1 != null) {
		var g = cx_ite1.elt;
		g.invalidate(force);
		cx_ite1 = cx_ite1.next;
	}
};
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.addGroup = function(group) {
	this.groups.add(group);
	group.depth = this.depth + 1;
};
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.remGroup = function(group) {
	this.groups.remove(group);
	group.depth = 0;
};
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.addInteractor = function(intx) {
	this.interactors.add(intx);
};
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.remInteractor = function(intx,flag) {
	if(flag == null) flag = -1;
	this.interactors.remove(intx);
};
zpp_nape.dynamics.ZPP_InteractionGroup.prototype.__class__ = zpp_nape.dynamics.ZPP_InteractionGroup;
zpp_nape.dynamics.ZPP_SpaceArbiterList = $hxClasses['zpp_nape.dynamics.ZPP_SpaceArbiterList'] = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape.dynamics.ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_nape.dynamics.ZPP_SpaceArbiterList.__super__ = nape.dynamics.ArbiterList;
for(var k in nape.dynamics.ArbiterList.prototype ) zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype[k] = nape.dynamics.ArbiterList.prototype[k];
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.space = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype._length = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.zip_length = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.zpp_gl = function() {
	this.zpp_vm();
	if(this.zip_length) {
		this._length = 0;
		var ind = 0;
		var len = 0;
		var cx_ite = this.space.c_arbiters_true.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) len++;
			cx_ite = cx_ite.next;
		}
		this.lengths[ind++] = len;
		this._length += len;
		var len1 = 0;
		var cx_ite1 = this.space.c_arbiters_false.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			if(i1.active) len1++;
			cx_ite1 = cx_ite1.next;
		}
		this.lengths[ind++] = len1;
		this._length += len1;
		var len2 = 0;
		var cx_ite2 = this.space.f_arbiters.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			if(i2.active) len2++;
			cx_ite2 = cx_ite2.next;
		}
		this.lengths[ind++] = len2;
		this._length += len2;
		var len3 = 0;
		var cx_ite3 = this.space.s_arbiters.head;
		while(cx_ite3 != null) {
			var i3 = cx_ite3.elt;
			if(i3.active) len3++;
			cx_ite3 = cx_ite3.next;
		}
		this.lengths[ind++] = len3;
		this._length += len3;
		this.zip_length = false;
	}
	return this._length;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.lengths = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_0 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_1 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_2 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_3 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_0 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_1 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_2 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_3 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.zpp_vm = function() {
	var modified = false;
	if(this.space.c_arbiters_true.modified) {
		modified = true;
		this.space.c_arbiters_true.modified = false;
	}
	if(this.space.c_arbiters_false.modified) {
		modified = true;
		this.space.c_arbiters_false.modified = false;
	}
	if(this.space.f_arbiters.modified) {
		modified = true;
		this.space.f_arbiters.modified = false;
	}
	if(this.space.s_arbiters.modified) {
		modified = true;
		this.space.s_arbiters.modified = false;
	}
	if(modified) {
		this.zip_length = true;
		this._length = 0;
		this.ite_0 = null;
		this.ite_1 = null;
		this.ite_2 = null;
		this.ite_3 = null;
	}
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.push = function(obj) {
	throw "Error: ArbiterList is immutable";
	return false;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.pop = function() {
	throw "Error: ArbiterList is immutable";
	return null;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.unshift = function(obj) {
	throw "Error: ArbiterList is immutable";
	return false;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.shift = function() {
	throw "Error: ArbiterList is immutable";
	return null;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.remove = function(obj) {
	throw "Error: ArbiterList is immutable";
	return false;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.clear = function() {
	throw "Error: ArbiterList is immutable";
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	var ret = null;
	var accum_length = 0;
	if(ret == null) {
		if(index < accum_length + this.lengths[0]) {
			var offset = index - accum_length;
			if(offset < this.at_index_0 || this.ite_0 == null) {
				this.at_index_0 = 0;
				this.ite_0 = this.space.c_arbiters_true.head;
				while(true) {
					var x = this.ite_0.elt;
					if(x.active) break;
					this.ite_0 = this.ite_0.next;
				}
			}
			while(this.at_index_0 != offset) {
				this.at_index_0++;
				this.ite_0 = this.ite_0.next;
				while(true) {
					var x1 = this.ite_0.elt;
					if(x1.active) break;
					this.ite_0 = this.ite_0.next;
				}
			}
			ret = this.ite_0.elt.wrapper();
		} else accum_length += this.lengths[0];
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[1]) {
			var offset1 = index - accum_length;
			if(offset1 < this.at_index_1 || this.ite_1 == null) {
				this.at_index_1 = 0;
				this.ite_1 = this.space.c_arbiters_false.head;
				while(true) {
					var x2 = this.ite_1.elt;
					if(x2.active) break;
					this.ite_1 = this.ite_1.next;
				}
			}
			while(this.at_index_1 != offset1) {
				this.at_index_1++;
				this.ite_1 = this.ite_1.next;
				while(true) {
					var x3 = this.ite_1.elt;
					if(x3.active) break;
					this.ite_1 = this.ite_1.next;
				}
			}
			ret = this.ite_1.elt.wrapper();
		} else accum_length += this.lengths[1];
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[2]) {
			var offset2 = index - accum_length;
			if(offset2 < this.at_index_2 || this.ite_2 == null) {
				this.at_index_2 = 0;
				this.ite_2 = this.space.f_arbiters.head;
				while(true) {
					var x4 = this.ite_2.elt;
					if(x4.active) break;
					this.ite_2 = this.ite_2.next;
				}
			}
			while(this.at_index_2 != offset2) {
				this.at_index_2++;
				this.ite_2 = this.ite_2.next;
				while(true) {
					var x5 = this.ite_2.elt;
					if(x5.active) break;
					this.ite_2 = this.ite_2.next;
				}
			}
			ret = this.ite_2.elt.wrapper();
		} else accum_length += this.lengths[2];
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[3]) {
			var offset3 = index - accum_length;
			if(offset3 < this.at_index_3 || this.ite_3 == null) {
				this.at_index_3 = 0;
				this.ite_3 = this.space.s_arbiters.head;
				while(true) {
					var x6 = this.ite_3.elt;
					if(x6.active) break;
					this.ite_3 = this.ite_3.next;
				}
			}
			while(this.at_index_3 != offset3) {
				this.at_index_3++;
				this.ite_3 = this.ite_3.next;
				while(true) {
					var x7 = this.ite_3.elt;
					if(x7.active) break;
					this.ite_3 = this.ite_3.next;
				}
			}
			ret = this.ite_3.elt.wrapper();
		} else accum_length += this.lengths[3];
	}
	return ret;
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.__class__ = zpp_nape.dynamics.ZPP_SpaceArbiterList;
if(!zpp_nape.geom) zpp_nape.geom = {};
zpp_nape.geom.ZPP_AABB = $hxClasses['zpp_nape.geom.ZPP_AABB'] = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_nape.geom.ZPP_AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) ret = new zpp_nape.geom.ZPP_AABB(); else {
		ret = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
zpp_nape.geom.ZPP_AABB.prototype._invalidate = null;
zpp_nape.geom.ZPP_AABB.prototype._validate = null;
zpp_nape.geom.ZPP_AABB.prototype._immutable = null;
zpp_nape.geom.ZPP_AABB.prototype.validate = function() {
	if(this._validate != null) this._validate();
};
zpp_nape.geom.ZPP_AABB.prototype.invalidate = function() {
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.geom.ZPP_AABB.prototype.outer = null;
zpp_nape.geom.ZPP_AABB.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.geom.AABB();
		var o = this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.geom.ZPP_AABB.prototype.next = null;
zpp_nape.geom.ZPP_AABB.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_AABB.prototype.free = function() {
	if(this.outer != null) {
		this.outer.zpp_inner = null;
		this.outer = null;
	}
	this.wrap_min = this.wrap_max = null;
	this._invalidate = null;
	this._validate = null;
};
zpp_nape.geom.ZPP_AABB.prototype.copy = function() {
	return zpp_nape.geom.ZPP_AABB.get(this.minx,this.miny,this.maxx,this.maxy);
};
zpp_nape.geom.ZPP_AABB.prototype.width = function() {
	return this.maxx - this.minx;
};
zpp_nape.geom.ZPP_AABB.prototype.height = function() {
	return this.maxy - this.miny;
};
zpp_nape.geom.ZPP_AABB.prototype.perimeter = function() {
	return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
};
zpp_nape.geom.ZPP_AABB.prototype.minx = null;
zpp_nape.geom.ZPP_AABB.prototype.miny = null;
zpp_nape.geom.ZPP_AABB.prototype.wrap_min = null;
zpp_nape.geom.ZPP_AABB.prototype.getmin = function() {
	if(this.wrap_min == null) {
		this.wrap_min = nape.geom.Vec2.get(this.minx,this.miny,null);
		this.wrap_min.zpp_inner._inuse = true;
		if(this._immutable) this.wrap_min.zpp_inner._immutable = true; else this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
		this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
	}
	return this.wrap_min;
};
zpp_nape.geom.ZPP_AABB.prototype.dom_min = function() {
	if(this._validate != null) this._validate();
	this.wrap_min.zpp_inner.x = this.minx;
	this.wrap_min.zpp_inner.y = this.miny;
};
zpp_nape.geom.ZPP_AABB.prototype.mod_min = function(min) {
	if(min.x != this.minx || min.y != this.miny) {
		this.minx = min.x;
		this.miny = min.y;
		if(this._invalidate != null) this._invalidate(this);
	}
};
zpp_nape.geom.ZPP_AABB.prototype.maxx = null;
zpp_nape.geom.ZPP_AABB.prototype.maxy = null;
zpp_nape.geom.ZPP_AABB.prototype.wrap_max = null;
zpp_nape.geom.ZPP_AABB.prototype.getmax = function() {
	if(this.wrap_max == null) {
		this.wrap_max = nape.geom.Vec2.get(this.maxx,this.maxy,null);
		this.wrap_max.zpp_inner._inuse = true;
		if(this._immutable) this.wrap_max.zpp_inner._immutable = true; else this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
		this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
	}
	return this.wrap_max;
};
zpp_nape.geom.ZPP_AABB.prototype.dom_max = function() {
	if(this._validate != null) this._validate();
	this.wrap_max.zpp_inner.x = this.maxx;
	this.wrap_max.zpp_inner.y = this.maxy;
};
zpp_nape.geom.ZPP_AABB.prototype.mod_max = function(max) {
	if(max.x != this.maxx || max.y != this.maxy) {
		this.maxx = max.x;
		this.maxy = max.y;
		if(this._invalidate != null) this._invalidate(this);
	}
};
zpp_nape.geom.ZPP_AABB.prototype.intersectX = function(x) {
	return !(x.minx > this.maxx || this.minx > x.maxx);
};
zpp_nape.geom.ZPP_AABB.prototype.intersectY = function(x) {
	return !(x.miny > this.maxy || this.miny > x.maxy);
};
zpp_nape.geom.ZPP_AABB.prototype.intersect = function(x) {
	return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
};
zpp_nape.geom.ZPP_AABB.prototype.combine = function(x) {
	if(x.minx < this.minx) this.minx = x.minx;
	if(x.maxx > this.maxx) this.maxx = x.maxx;
	if(x.miny < this.miny) this.miny = x.miny;
	if(x.maxy > this.maxy) this.maxy = x.maxy;
};
zpp_nape.geom.ZPP_AABB.prototype.contains = function(x) {
	return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
};
zpp_nape.geom.ZPP_AABB.prototype.containsPoint = function(v) {
	return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
};
zpp_nape.geom.ZPP_AABB.prototype.setCombine = function(a,b) {
	if(a.minx < b.minx) this.minx = a.minx; else this.minx = b.minx;
	if(a.miny < b.miny) this.miny = a.miny; else this.miny = b.miny;
	if(a.maxx > b.maxx) this.maxx = a.maxx; else this.maxx = b.maxx;
	if(a.maxy > b.maxy) this.maxy = a.maxy; else this.maxy = b.maxy;
};
zpp_nape.geom.ZPP_AABB.prototype.setExpand = function(a,fatten) {
	this.minx = a.minx - fatten;
	this.miny = a.miny - fatten;
	this.maxx = a.maxx + fatten;
	this.maxy = a.maxy + fatten;
};
zpp_nape.geom.ZPP_AABB.prototype.setExpandPoint = function(x,y) {
	if(x < this.minx) this.minx = x;
	if(x > this.maxx) this.maxx = x;
	if(y < this.miny) this.miny = y;
	if(y > this.maxy) this.maxy = y;
};
zpp_nape.geom.ZPP_AABB.prototype.toString = function() {
	return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
};
zpp_nape.geom.ZPP_AABB.prototype.__class__ = zpp_nape.geom.ZPP_AABB;
zpp_nape.util.ZNPList_ZPP_Vec2 = $hxClasses['zpp_nape.util.ZNPList_ZPP_Vec2'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Vec2;
zpp_nape.geom.ZPP_Collide = $hxClasses['zpp_nape.geom.ZPP_Collide'] = function() { };
zpp_nape.geom.ZPP_Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_nape.geom.ZPP_Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
zpp_nape.geom.ZPP_Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.geom.ZPP_Collide.shapeContains = function(s,p) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) return zpp_nape.geom.ZPP_Collide.circleContains(s.circle,p); else return zpp_nape.geom.ZPP_Collide.polyContains(s.polygon,p);
};
zpp_nape.geom.ZPP_Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(zpp_nape.geom.ZPP_Collide.shapeContains(s,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.geom.ZPP_Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var minDist = s1.circle.radius + -s2.circle.radius;
			var px = 0.0;
			var py = 0.0;
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			var distSqr = px * px + py * py;
			return distSqr <= minDist * minDist;
		} else {
			var retvar;
			retvar = true;
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if((function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = p.x - s1.circle.worldCOMx;
						py1 = p.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			return retvar;
		}
	} else if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var retvar1;
		retvar1 = true;
		var cx_ite1 = s1.polygon.edges.head;
		while(cx_ite1 != null) {
			var a = cx_ite1.elt;
			if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
				cx_ite1 = cx_ite1.next;
				continue;
			} else {
				retvar1 = false;
				break;
			}
			cx_ite1 = cx_ite1.next;
		}
		return retvar1;
	} else {
		var retvar2;
		retvar2 = true;
		var cx_ite2 = s1.polygon.edges.head;
		while(cx_ite2 != null) {
			var a1 = cx_ite2.elt;
			if((function($this) {
				var $r;
				var max = -1e+100;
				{
					var cx_ite3 = s2.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v = cx_ite3;
						var k = a1.gnormx * v.x + a1.gnormy * v.y;
						if(k > max) max = k;
						cx_ite3 = cx_ite3.next;
					}
				}
				$r = max <= a1.gprojection;
				return $r;
			}(this))) {
				cx_ite2 = cx_ite2.next;
				continue;
			} else {
				retvar2 = false;
				break;
			}
			cx_ite2 = cx_ite2.next;
		}
		return retvar2;
	} else return false;
};
zpp_nape.geom.ZPP_Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) min1 = k1;
						if(min1 - ax1.gprojection <= max) break;
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) return false; else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape.Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t2 = (-ax2.tp0 - d1) * den;
					if(t2 < -nape.Config.epsilon) {
						var t3 = t2;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					if(arb.rev) arb.ptype = 1; else arb.ptype = 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) return false; else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax2.gnormx * c0d * 0.5,c0y - ax2.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev?1:0,c0d > 0);
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax2.gnormx * c1d * 0.5,c1y - ax2.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev?0:1,c1d > 0);
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else return false;
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite5 = s2.polygon.edges.head;
			while(cx_ite5 != null) {
				var a = cx_ite5.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite5 = cx_ite5.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var co;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					if(distSqr > minDist * minDist) co = null; else if(distSqr < nape.Config.epsilon * nape.Config.epsilon) co = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null); else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1;
						if(invDist < nape.Config.epsilon) dist1 = 1e100; else dist1 = 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist1 - minDist,0,null); else co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist1 - minDist,0,null);
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var co1;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					if(distSqr1 > minDist1 * minDist1) co1 = null; else if(distSqr1 < nape.Config.epsilon * nape.Config.epsilon) co1 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist1,0,null); else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2;
						if(invDist1 < nape.Config.epsilon) dist2 = 1e100; else dist2 = 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,-px1 * invDist1,-py1 * invDist1,dist2 - minDist1,0,null); else co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,px1 * invDist1,py1 * invDist1,dist2 - minDist1,0,null);
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = s1.circle.worldCOMx - nx1;
					py2 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) con3 = arb.injectContact(px2,py2,a0.gnormx,a0.gnormy,max1,0,null); else con3 = arb.injectContact(px2,py2,-a0.gnormx,-a0.gnormy,max1,0,null);
					if(rev) arb.ptype = 0; else arb.ptype = 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else return false;
		}
	} else {
		var co2;
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px3 = 0.0;
		var py3 = 0.0;
		px3 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py3 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px3 * px3 + py3 * py3;
		if(distSqr2 > minDist2 * minDist2) co2 = null; else if(distSqr2 < nape.Config.epsilon * nape.Config.epsilon) co2 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist2,0,null); else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3;
			if(invDist2 < nape.Config.epsilon) dist3 = 1e100; else dist3 = 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,-px3 * invDist2,-py3 * invDist2,dist3 - minDist2,0,null); else co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,px3 * invDist2,py3 * invDist2,dist3 - minDist2,0,null);
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else return false;
	}
};
zpp_nape.geom.ZPP_Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_nape.geom.ZPP_Collide.testCollide(s1,s2);
};
zpp_nape.geom.ZPP_Collide.testCollide = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var cont = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(cont) {
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			return cont;
		} else return false;
	} else {
		var a0 = null;
		var vi = null;
		var cont1 = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		var cx_ite4 = s2.polygon.edges.head;
		while(cx_ite4 != null) {
			var a = cx_ite4.elt;
			var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
			if(dist > 0) {
				cont1 = false;
				break;
			}
			if(dist > max) {
				max = dist;
				a0 = a;
				vi = vite;
			}
			vite = vite.next;
			cx_ite4 = cx_ite4.next;
		}
		if(cont1) {
			var v0 = vi;
			var v11;
			if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				px = v0.x - s1.circle.worldCOMx;
				py = v0.y - s1.circle.worldCOMy;
				var distSqr = px * px + py * py;
				return distSqr <= minDist * minDist;
			} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
				var minDist1 = s1.circle.radius;
				var px1 = 0.0;
				var py1 = 0.0;
				px1 = v11.x - s1.circle.worldCOMx;
				py1 = v11.y - s1.circle.worldCOMy;
				var distSqr1 = px1 * px1 + py1 * py1;
				return distSqr1 <= minDist1 * minDist1;
			} else return true;
		} else return false;
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_nape.geom.ZPP_Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		var out1 = new Array();
		var out2 = new Array();
		var cont = true;
		var total = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var ind = 0;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				if(k >= ax.gprojection + nape.Config.epsilon) {
					out2[ind] = true;
					total = false;
				}
				ind++;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(total) {
			s2.polygon.validate_worldCOM();
			arb.overlap = s2.polygon.area;
			arb.centroidx = s2.polygon.worldCOMx;
			arb.centroidy = s2.polygon.worldCOMy;
			null;
			return true;
		} else if(cont) {
			total = true;
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var ind1 = 0;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					if(k1 >= ax1.gprojection + nape.Config.epsilon) {
						out1[ind1] = true;
						total = false;
					}
					ind1++;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			if(total) {
				s1.polygon.validate_worldCOM();
				arb.overlap = s1.polygon.area;
				arb.centroidx = s1.polygon.worldCOMx;
				arb.centroidy = s1.polygon.worldCOMy;
				null;
				return true;
			} else if(cont) {
				while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
					var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
					if(!p._inuse) {
						var o = p;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o._isimmutable = null;
						o._validate = null;
						o._invalidate = null;
						o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
						zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind11 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				var _g1 = 0;
				var _g = s2.polygon.edgeCnt;
				while(_g1 < _g) {
					var i = _g1++;
					if(!out2[i]) {
						ind2 = i;
						break;
					} else ite2 = ite2.next;
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g11 = 0;
					var _g2 = s1.polygon.edgeCnt;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(!out1[i1]) {
							ind11 = i1;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ite1);
						fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
					}
				} else {
					zpp_nape.geom.ZPP_Collide.flowpoly.add(ite2);
					fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v2 = cx_itej;
						var min2 = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v2.x - u.x;
									_vy = v2.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t < min2) {
									min2 = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b1 = cx_itej1;
							var t1 = 0.0;
							if((function($this) {
								var $r;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								{
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
								}
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								{
									_vx1 = v2.x - u.x;
									_vy1 = v2.y - u.y;
								}
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								{
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
								}
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								$r = den1 * den1 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									$r = txx1 > nape.Config.epsilon && txx1 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										$r = sxx1 > nape.Config.epsilon && sxx1 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t1 = txx1;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t1 < min2) {
									min2 = t1;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min2 != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min2;
							cx = u.x + (v2.x - u.x) * T;
							cy = u.y + (v2.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v2;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v3 = cx_itej;
						var min3 = 2.0;
						var cx_cont2 = true;
						var cx_itei2 = s2.polygon.gverts.next;
						var a1 = cx_itei2;
						var cx_itej2 = cx_itei2.next;
						while(cx_itej2 != null) {
							var b2 = cx_itej2;
							var t2 = 0.0;
							if((function($this) {
								var $r;
								var _sx2 = 0.0;
								var _sy2 = 0.0;
								{
									_sx2 = u.x - a1.x;
									_sy2 = u.y - a1.y;
								}
								var _vx2 = 0.0;
								var _vy2 = 0.0;
								{
									_vx2 = v3.x - u.x;
									_vy2 = v3.y - u.y;
								}
								var _qx2 = 0.0;
								var _qy2 = 0.0;
								{
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
								}
								var den2 = _vy2 * _qx2 - _vx2 * _qy2;
								$r = den2 * den2 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den2 = 1 / den2;
									var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
									$r = txx2 > nape.Config.epsilon && txx2 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
										$r = sxx2 > nape.Config.epsilon && sxx2 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t2 = txx2;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t2 < min3) {
									min3 = t2;
									ite2 = cx_itei2;
								}
							}
							cx_itei2 = cx_itej2;
							a1 = b2;
							cx_itej2 = cx_itej2.next;
						}
						if(cx_cont2) do {
							cx_itej2 = s2.polygon.gverts.next;
							var b3 = cx_itej2;
							var t3 = 0.0;
							if((function($this) {
								var $r;
								var _sx3 = 0.0;
								var _sy3 = 0.0;
								{
									_sx3 = u.x - a1.x;
									_sy3 = u.y - a1.y;
								}
								var _vx3 = 0.0;
								var _vy3 = 0.0;
								{
									_vx3 = v3.x - u.x;
									_vy3 = v3.y - u.y;
								}
								var _qx3 = 0.0;
								var _qy3 = 0.0;
								{
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
								}
								var den3 = _vy3 * _qx3 - _vx3 * _qy3;
								$r = den3 * den3 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den3 = 1 / den3;
									var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
									$r = txx3 > nape.Config.epsilon && txx3 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
										$r = sxx3 > nape.Config.epsilon && sxx3 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t3 = txx3;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t3 < min3) {
									min3 = t3;
									ite2 = cx_itei2;
								}
							}
						} while(false);
						if(min3 != 2.0) {
							var cx1 = 0.0;
							var cy1 = 0.0;
							var T1 = min3;
							cx1 = u.x + (v3.x - u.x) * T1;
							cy1 = u.y + (v3.y - u.y) * T1;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind11++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind11 = 0;
					}
					if(!out1[ind11]) {
						var ex = ite1;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a2 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b4 = ite1;
						var u1 = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite4 = itm;
						do {
							var v4 = cx_ite4;
							var t4 = 0.0;
							if((function($this) {
								var $r;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								{
									_sx4 = u1.x - a2.x;
									_sy4 = u1.y - a2.y;
								}
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								{
									_vx4 = v4.x - u1.x;
									_vy4 = v4.y - u1.y;
								}
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								{
									_qx4 = b4.x - a2.x;
									_qy4 = b4.y - a2.y;
								}
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								$r = den4 * den4 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									$r = txx4 > nape.Config.epsilon && txx4 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										$r = sxx4 > nape.Config.epsilon && sxx4 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t4 = txx4;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t4 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t4;
										cx_ite4 = beg_ite;
										break;
									} else max = t4;
								}
							}
							u1 = v4;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite4 != beg_ite) {
							var v5 = cx_ite4;
							var t5 = 0.0;
							if((function($this) {
								var $r;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								{
									_sx5 = u1.x - a2.x;
									_sy5 = u1.y - a2.y;
								}
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								{
									_vx5 = v5.x - u1.x;
									_vy5 = v5.y - u1.y;
								}
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								{
									_qx5 = b4.x - a2.x;
									_qy5 = b4.y - a2.y;
								}
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								$r = den5 * den5 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									$r = txx5 > nape.Config.epsilon && txx5 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										$r = sxx5 > nape.Config.epsilon && sxx5 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t5 = txx5;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t5 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t5;
										cx_ite4 = beg_ite;
										break;
									} else max = t5;
								}
							}
							u1 = v5;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u2 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v6 = itm2;
						var cx2 = 0.0;
						var cy2 = 0.0;
						var T2 = max;
						cx2 = u2.x + (v6.x - u2.x) * T2;
						cy2 = u2.y + (v6.y - u2.y) * T2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx2,cy2,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx2,cy2,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex1 = ite2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex1.x,ex1.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex1);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a3 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b5 = ite2;
						var u3 = ite1;
						var itm1 = ite1.next;
						if(itm1 == null) itm1 = s1.polygon.gverts.next;
						var max1 = -1.0;
						var itmo1 = null;
						var indo1 = 0;
						var icnt1 = 0;
						var beg_ite1 = itm1;
						var cx_ite5 = itm1;
						do {
							var v7 = cx_ite5;
							var t6 = 0.0;
							if((function($this) {
								var $r;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								{
									_sx6 = u3.x - a3.x;
									_sy6 = u3.y - a3.y;
								}
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								{
									_vx6 = v7.x - u3.x;
									_vy6 = v7.y - u3.y;
								}
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								{
									_qx6 = b5.x - a3.x;
									_qy6 = b5.y - a3.y;
								}
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								$r = den6 * den6 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									$r = txx6 > nape.Config.epsilon && txx6 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										$r = sxx6 > nape.Config.epsilon && sxx6 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t6 = txx6;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t6 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t6;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t6;
								}
							}
							u3 = v7;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite5 != beg_ite1) {
							var v8 = cx_ite5;
							var t7 = 0.0;
							if((function($this) {
								var $r;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								{
									_sx7 = u3.x - a3.x;
									_sy7 = u3.y - a3.y;
								}
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								{
									_vx7 = v8.x - u3.x;
									_vy7 = v8.y - u3.y;
								}
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								{
									_qx7 = b5.x - a3.x;
									_qy7 = b5.y - a3.y;
								}
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								$r = den7 * den7 > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									$r = txx7 > nape.Config.epsilon && txx7 < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										$r = sxx7 > nape.Config.epsilon && sxx7 < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t7 = txx7;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t7 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t7;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t7;
								}
							}
							u3 = v8;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						}
						if(itmo1 == null) break;
						var u4 = itmo1;
						var itm21 = itmo1.next;
						if(itm21 == null) itm21 = s1.polygon.gverts.next;
						var v9 = itm21;
						var cx3 = 0.0;
						var cy3 = 0.0;
						var T3 = max1;
						cx3 = u4.x + (v9.x - u4.x) * T3;
						cy3 = u4.y + (v9.y - u4.y) * T3;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx3,cy3,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx3,cy3,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite1 = itmo1;
						ind11 = indo1;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
					var area = 0.0;
					var COMx = 0.0;
					var COMy = 0.0;
					COMx = 0;
					COMy = 0;
					area = 0.0;
					var cx_ite6 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
					var u5 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					var v10 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					while(cx_ite6 != null) {
						var w = cx_ite6.elt;
						area += v10.x * (w.y - u5.y);
						var cf = w.y * v10.x - w.x * v10.y;
						COMx += (v10.x + w.x) * cf;
						COMy += (v10.y + w.y) * cf;
						u5 = v10;
						v10 = w;
						cx_ite6 = cx_ite6.next;
					}
					cx_ite6 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
					var w1 = cx_ite6.elt;
					area += v10.x * (w1.y - u5.y);
					var cf1 = w1.y * v10.x - w1.x * v10.y;
					COMx += (v10.x + w1.x) * cf1;
					COMy += (v10.y + w1.y) * cf1;
					u5 = v10;
					v10 = w1;
					cx_ite6 = cx_ite6.next;
					var w2 = cx_ite6.elt;
					area += v10.x * (w2.y - u5.y);
					var cf2 = w2.y * v10.x - w2.x * v10.y;
					COMx += (v10.x + w2.x) * cf2;
					COMy += (v10.y + w2.y) * cf2;
					area *= 0.5;
					var ia = 1 / (6 * area);
					var t8 = ia;
					COMx *= t8;
					COMy *= t8;
					arb.overlap = -area;
					arb.centroidx = COMx;
					arb.centroidy = COMy;
					null;
					return true;
				} else return false;
			} else return false;
		} else return false;
	} else {
		var inte = new Array();
		var total1 = true;
		var a0 = null;
		var vi = null;
		var max2 = -1e+100;
		var cont1 = true;
		var vite = s2.polygon.gverts.next;
		var ind3 = 0;
		var cx_ite7 = s2.polygon.edges.head;
		while(cx_ite7 != null) {
			var a4 = cx_ite7.elt;
			var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
			if(dist > a4.gprojection + s1.circle.radius) {
				cont1 = false;
				break;
			} else if(dist + s1.circle.radius > a4.gprojection + nape.Config.epsilon) {
				total1 = false;
				inte[ind3] = true;
			}
			dist -= a4.gprojection + s1.circle.radius;
			if(dist > max2) {
				max2 = dist;
				a0 = a4;
				vi = vite;
			}
			vite = vite.next;
			ind3++;
			cx_ite7 = cx_ite7.next;
		}
		if(cont1) {
			if(total1) {
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
				return true;
			} else {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					{
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}(this)):dt >= v11.y * a0.gnormx - v11.x * a0.gnormy?(function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = v11.x - s1.circle.worldCOMx;
						py1 = v11.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this)):true) {
					var ins = new Array();
					var ind4 = 0;
					var total2 = true;
					var vi1 = null;
					var vind = 0;
					var cx_ite8 = s2.polygon.gverts.next;
					while(cx_ite8 != null) {
						var v12 = cx_ite8;
						var dist1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(v12.x,v12.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
						if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) total2 = false; else {
							vind = ind4;
							vi1 = cx_ite8;
						}
						ind4++;
						cx_ite8 = cx_ite8.next;
					}
					if(total2) {
						s2.polygon.validate_worldCOM();
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
						return true;
					} else {
						while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
							var p1 = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
							if(!p1._inuse) {
								var o1 = p1;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1._isimmutable = null;
								o1._validate = null;
								o1._invalidate = null;
								o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
								zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
							}
						}
						zpp_nape.geom.ZPP_Collide.flowsegs.clear();
						var fst_vert1 = null;
						var state = 1;
						if(vi1 == null) {
							vi1 = s2.polygon.gverts.next;
							state = 2;
						} else zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert1 = vi1);
						while(state != 0) if(state == 1) {
							vi1 = vi1.next;
							if(vi1 == null) vi1 = s2.polygon.gverts.next;
							vind++;
							if(vind >= s2.polygon.edgeCnt) vind = 0;
							if(ins[vind]) {
								if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,vi1.x,vi1.y) < nape.Config.epsilon) break;
								zpp_nape.geom.ZPP_Collide.flowpoly.add(vi1);
							} else {
								var u6 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
								var v13 = vi1;
								var tval;
								var vx = 0.0;
								var vy = 0.0;
								vx = v13.x - u6.x;
								vy = v13.y - u6.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = u6.x - s1.circle.worldCOMx;
								qy = u6.y - s1.circle.worldCOMy;
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t9 = (-B - D) * A;
								if(t9 < nape.Config.epsilon) tval = (-B + D) * A; else tval = t9;
								var cx4 = 0.0;
								var cy4 = 0.0;
								var T4 = tval;
								cx4 = u6.x + (v13.x - u6.x) * T4;
								cy4 = u6.y + (v13.y - u6.y) * T4;
								if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx4,cy4) < nape.Config.epsilon) break;
								zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx4,cy4,null));
								state = 2;
							}
						} else if(state == 2) {
							var vi2 = vi1.next;
							if(vi2 == null) vi2 = s2.polygon.gverts.next;
							var u7 = vi1;
							state = 0;
							var beg_ite2 = vi2;
							var cx_ite9 = vi2;
							do {
								var v14 = cx_ite9;
								var vind2 = vind + 1;
								if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
								if(inte[vind]) {
									if(ins[vind2]) {
										var tval1;
										var vx1 = 0.0;
										var vy1 = 0.0;
										vx1 = v14.x - u7.x;
										vy1 = v14.y - u7.y;
										var qx1 = 0.0;
										var qy1 = 0.0;
										qx1 = u7.x - s1.circle.worldCOMx;
										qy1 = u7.y - s1.circle.worldCOMy;
										var A1 = vx1 * vx1 + vy1 * vy1;
										var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
										var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
										var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
										A1 = 1 / (2 * A1);
										var t10 = (-B1 - D1) * A1;
										if(t10 < nape.Config.epsilon) tval1 = (-B1 + D1) * A1; else tval1 = t10;
										var cx5 = 0.0;
										var cy5 = 0.0;
										var T5 = tval1;
										cx5 = u7.x + (v14.x - u7.x) * T5;
										cy5 = u7.y + (v14.y - u7.y) * T5;
										if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx5,cy5) < nape.Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx5,cy5,null);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t0 = 0.0;
										var t11 = 0.0;
										var two;
										var vx2 = 0.0;
										var vy2 = 0.0;
										vx2 = v14.x - u7.x;
										vy2 = v14.y - u7.y;
										var qx2 = 0.0;
										var qy2 = 0.0;
										qx2 = u7.x - s1.circle.worldCOMx;
										qy2 = u7.y - s1.circle.worldCOMy;
										var A2 = vx2 * vx2 + vy2 * vy2;
										var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
										var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
										var D2 = B2 * B2 - 4 * A2 * C2;
										if(D2 * D2 < nape.Config.epsilon) {
											if(D2 < 0) t0 = 10.0; else t0 = t11 = -B2 / (2 * A2);
											two = false;
										} else {
											D2 = Math.sqrt(D2);
											A2 = 1 / (2 * A2);
											t0 = (-B2 - D2) * A2;
											t11 = (-B2 + D2) * A2;
											two = true;
										}
										if(t0 < 1 - nape.Config.epsilon && t11 > nape.Config.epsilon) {
											var cx6 = 0.0;
											var cy6 = 0.0;
											var T6 = t0;
											cx6 = u7.x + (v14.x - u7.x) * T6;
											cy6 = u7.y + (v14.y - u7.y) * T6;
											if(fst_vert1 != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx6,cy6) < nape.Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp1 = zpp_nape.geom.ZPP_Vec2.get(cx6,cy6,null);
											if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
												zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
												zpp_nape.geom.ZPP_Collide.flowsegs.add(cp1);
											}
											zpp_nape.geom.ZPP_Collide.flowpoly.add(cp1);
											if(fst_vert1 == null) fst_vert1 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
											if(two) {
												var cx7 = 0.0;
												var cy7 = 0.0;
												var T7 = t11;
												cx7 = u7.x + (v14.x - u7.x) * T7;
												cy7 = u7.y + (v14.y - u7.y) * T7;
												zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx7,cy7,null));
											}
										}
									}
								}
								u7 = v14;
								vi1 = cx_ite9;
								vind = vind2;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							} while(false);
							while(cx_ite9 != beg_ite2) {
								var v15 = cx_ite9;
								var vind21 = vind + 1;
								if(vind21 == s2.polygon.edgeCnt) vind21 = 0;
								if(inte[vind]) {
									if(ins[vind21]) {
										var tval2;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v15.x - u7.x;
										vy3 = v15.y - u7.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = u7.x - s1.circle.worldCOMx;
										qy3 = u7.y - s1.circle.worldCOMy;
										var A3 = vx3 * vx3 + vy3 * vy3;
										var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
										var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
										var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
										A3 = 1 / (2 * A3);
										var t12 = (-B3 - D3) * A3;
										if(t12 < nape.Config.epsilon) tval2 = (-B3 + D3) * A3; else tval2 = t12;
										var cx8 = 0.0;
										var cy8 = 0.0;
										var T8 = tval2;
										cx8 = u7.x + (v15.x - u7.x) * T8;
										cy8 = u7.y + (v15.y - u7.y) * T8;
										if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx8,cy8) < nape.Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp2 = zpp_nape.geom.ZPP_Vec2.get(cx8,cy8,null);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
										zpp_nape.geom.ZPP_Collide.flowsegs.add(cp2);
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp2);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t01 = 0.0;
										var t13 = 0.0;
										var two1;
										var vx4 = 0.0;
										var vy4 = 0.0;
										vx4 = v15.x - u7.x;
										vy4 = v15.y - u7.y;
										var qx4 = 0.0;
										var qy4 = 0.0;
										qx4 = u7.x - s1.circle.worldCOMx;
										qy4 = u7.y - s1.circle.worldCOMy;
										var A4 = vx4 * vx4 + vy4 * vy4;
										var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
										var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
										var D4 = B4 * B4 - 4 * A4 * C4;
										if(D4 * D4 < nape.Config.epsilon) {
											if(D4 < 0) t01 = 10.0; else t01 = t13 = -B4 / (2 * A4);
											two1 = false;
										} else {
											D4 = Math.sqrt(D4);
											A4 = 1 / (2 * A4);
											t01 = (-B4 - D4) * A4;
											t13 = (-B4 + D4) * A4;
											two1 = true;
										}
										if(t01 < 1 - nape.Config.epsilon && t13 > nape.Config.epsilon) {
											var cx9 = 0.0;
											var cy9 = 0.0;
											var T9 = t01;
											cx9 = u7.x + (v15.x - u7.x) * T9;
											cy9 = u7.y + (v15.y - u7.y) * T9;
											if(fst_vert1 != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx9,cy9) < nape.Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp3 = zpp_nape.geom.ZPP_Vec2.get(cx9,cy9,null);
											if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
												zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
												zpp_nape.geom.ZPP_Collide.flowsegs.add(cp3);
											}
											zpp_nape.geom.ZPP_Collide.flowpoly.add(cp3);
											if(fst_vert1 == null) fst_vert1 = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
											if(two1) {
												var cx10 = 0.0;
												var cy10 = 0.0;
												var T10 = t13;
												cx10 = u7.x + (v15.x - u7.x) * T10;
												cy10 = u7.y + (v15.y - u7.y) * T10;
												zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx10,cy10,null));
											}
										}
									}
								}
								u7 = v15;
								vi1 = cx_ite9;
								vind = vind21;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							}
						}
						if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) return false; else if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next == null) {
							var all = true;
							var cx_ite10 = s2.polygon.edges.head;
							while(cx_ite10 != null) {
								var e = cx_ite10.elt;
								var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist2 > e.gprojection) {
									all = false;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(all) {
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
								return true;
							} else return false;
						} else {
							var COMx1 = 0;
							var COMy1 = 0;
							var area1 = 0.0;
							if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
								var parea = 0.0;
								var pCOMx = 0.0;
								var pCOMy = 0.0;
								pCOMx = 0;
								pCOMy = 0;
								parea = 0.0;
								var cx_ite11 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
								var u8 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								var v16 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								while(cx_ite11 != null) {
									var w3 = cx_ite11.elt;
									parea += v16.x * (w3.y - u8.y);
									var cf3 = w3.y * v16.x - w3.x * v16.y;
									pCOMx += (v16.x + w3.x) * cf3;
									pCOMy += (v16.y + w3.y) * cf3;
									u8 = v16;
									v16 = w3;
									cx_ite11 = cx_ite11.next;
								}
								cx_ite11 = zpp_nape.geom.ZPP_Collide.flowpoly.head;
								var w4 = cx_ite11.elt;
								parea += v16.x * (w4.y - u8.y);
								var cf4 = w4.y * v16.x - w4.x * v16.y;
								pCOMx += (v16.x + w4.x) * cf4;
								pCOMy += (v16.y + w4.y) * cf4;
								u8 = v16;
								v16 = w4;
								cx_ite11 = cx_ite11.next;
								var w5 = cx_ite11.elt;
								parea += v16.x * (w5.y - u8.y);
								var cf5 = w5.y * v16.x - w5.x * v16.y;
								pCOMx += (v16.x + w5.x) * cf5;
								pCOMy += (v16.y + w5.y) * cf5;
								parea *= 0.5;
								var ia1 = 1 / (6 * parea);
								var t14 = ia1;
								pCOMx *= t14;
								pCOMy *= t14;
								var t15 = -parea;
								COMx1 += pCOMx * t15;
								COMy1 += pCOMy * t15;
								area1 -= parea;
							} else {
								zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
								zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.elt);
							}
							while(!(zpp_nape.geom.ZPP_Collide.flowsegs.head == null)) {
								var u9 = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
								var v17 = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
								var dx = 0.0;
								var dy = 0.0;
								dx = v17.x - u9.x;
								dy = v17.y - u9.y;
								var nx = 0.0;
								var ny = 0.0;
								nx = dx;
								ny = dy;
								var d = nx * nx + ny * ny;
								var imag = 1.0 / Math.sqrt(d);
								var t16 = imag;
								nx *= t16;
								ny *= t16;
								var t17 = nx;
								nx = -ny;
								ny = t17;
								var cx11 = 0.0;
								var cy11 = 0.0;
								cx11 = u9.x + v17.x;
								cy11 = u9.y + v17.y;
								var t18 = 0.5;
								cx11 *= t18;
								cy11 *= t18;
								var t19 = 1.0;
								cx11 -= s1.circle.worldCOMx * t19;
								cy11 -= s1.circle.worldCOMy * t19;
								var xd = nx * cx11 + ny * cy11;
								var carea = 0.0;
								var ccom = 0.0;
								var X = xd;
								var cos = X / s1.circle.radius;
								var sin = Math.sqrt(1 - cos * cos);
								var theta = Math.acos(cos);
								carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
								ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
								cx11 = s1.circle.worldCOMx;
								cy11 = s1.circle.worldCOMy;
								var t20 = ccom;
								cx11 += nx * t20;
								cy11 += ny * t20;
								var t21 = carea;
								COMx1 += cx11 * t21;
								COMy1 += cy11 * t21;
								area1 += carea;
							}
							var t22 = 1.0 / area1;
							COMx1 *= t22;
							COMy1 *= t22;
							arb.overlap = area1;
							arb.centroidx = COMx1;
							arb.centroidy = COMy1;
							null;
							return true;
						}
					}
				} else return false;
			}
		} else return false;
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) return false; else if(ds < nape.Config.epsilon * nape.Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area2 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area2;
					var ya = (y1 * area11 + (d1 - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
					null;
				}
			}
			return true;
		}
	}
};
zpp_nape.geom.ZPP_Collide.prototype.__class__ = zpp_nape.geom.ZPP_Collide;
zpp_nape.geom.ZPP_Convex = $hxClasses['zpp_nape.geom.ZPP_Convex'] = function() { };
zpp_nape.geom.ZPP_Convex.__name__ = ["zpp_nape","geom","ZPP_Convex"];
zpp_nape.geom.ZPP_Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
};
zpp_nape.geom.ZPP_Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			nite = nite.next;
		} while(nite != L);
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var pright = p1.prev;
			var ppre = null;
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				var pleft;
				if(cx_ite.next == null) pleft = p1.next; else pleft = cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Convex.isinner(pleft,p1,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var q = pdiag;
				var qright = q.prev;
				var qpre = null;
				var cx_ite1 = q.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p1) {
						var qleft;
						if(cx_ite1.next == null) qleft = q.next; else qleft = cx_ite1.next.elt;
						removable = zpp_nape.geom.ZPP_Convex.isinner(qleft,q,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p1.diagonals.erase(ppre);
					q.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
};
zpp_nape.geom.ZPP_Convex.prototype.__class__ = zpp_nape.geom.ZPP_Convex;
zpp_nape.geom.ZPP_ConvexRayResult = $hxClasses['zpp_nape.geom.ZPP_ConvexRayResult'] = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
zpp_nape.geom.ZPP_ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_nape.geom.ZPP_ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.rayPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.RayResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.ray = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.ray;
		zpp_nape.geom.ZPP_ConvexRayResult.rayPool = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
};
zpp_nape.geom.ZPP_ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.convexPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.ConvexResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.convex = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.convex;
		zpp_nape.geom.ZPP_ConvexRayResult.convexPool = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
};
zpp_nape.geom.ZPP_ConvexRayResult.prototype.normal = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.shape = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.convex = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.position = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.ray = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.inner = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.next = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.toiDistance = null;
zpp_nape.geom.ZPP_ConvexRayResult.prototype.disposed = function() {
	if(this.next != null) throw "Error: This object has been disposed of and cannot be used";
};
zpp_nape.geom.ZPP_ConvexRayResult.prototype.free = function() {
	this.normal.zpp_inner._immutable = false;
	this.normal.dispose();
	if(this.position != null) {
		this.position.zpp_inner._immutable = false;
		this.position.dispose();
	}
	this.shape = null;
	this.toiDistance = 0.0;
	if(this.convex != null) {
		this.next = zpp_nape.geom.ZPP_ConvexRayResult.convexPool;
		zpp_nape.geom.ZPP_ConvexRayResult.convexPool = this;
	} else {
		this.next = zpp_nape.geom.ZPP_ConvexRayResult.rayPool;
		zpp_nape.geom.ZPP_ConvexRayResult.rayPool = this;
	}
};
zpp_nape.geom.ZPP_ConvexRayResult.prototype.__class__ = zpp_nape.geom.ZPP_ConvexRayResult;
zpp_nape.geom.ZPP_CutVert = $hxClasses['zpp_nape.geom.ZPP_CutVert'] = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
zpp_nape.geom.ZPP_CutVert.__name__ = ["zpp_nape","geom","ZPP_CutVert"];
zpp_nape.geom.ZPP_CutVert.path = function(poly) {
	var ret;
	if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutVert(); else {
		ret = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
};
zpp_nape.geom.ZPP_CutVert.prototype.prev = null;
zpp_nape.geom.ZPP_CutVert.prototype.next = null;
zpp_nape.geom.ZPP_CutVert.prototype.posx = null;
zpp_nape.geom.ZPP_CutVert.prototype.posy = null;
zpp_nape.geom.ZPP_CutVert.prototype.vert = null;
zpp_nape.geom.ZPP_CutVert.prototype.value = null;
zpp_nape.geom.ZPP_CutVert.prototype.positive = null;
zpp_nape.geom.ZPP_CutVert.prototype.parent = null;
zpp_nape.geom.ZPP_CutVert.prototype.rank = null;
zpp_nape.geom.ZPP_CutVert.prototype.used = null;
zpp_nape.geom.ZPP_CutVert.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_CutVert.prototype.free = function() {
	this.vert = null;
	this.parent = null;
};
zpp_nape.geom.ZPP_CutVert.prototype.__class__ = zpp_nape.geom.ZPP_CutVert;
zpp_nape.geom.ZPP_CutInt = $hxClasses['zpp_nape.geom.ZPP_CutInt'] = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
zpp_nape.geom.ZPP_CutInt.__name__ = ["zpp_nape","geom","ZPP_CutInt"];
zpp_nape.geom.ZPP_CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) vertex = false;
	if(virtualint == null) virtualint = false;
	var ret;
	if(zpp_nape.geom.ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutInt(); else {
		ret = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
};
zpp_nape.geom.ZPP_CutInt.prototype.next = null;
zpp_nape.geom.ZPP_CutInt.prototype.time = null;
zpp_nape.geom.ZPP_CutInt.prototype.virtualint = null;
zpp_nape.geom.ZPP_CutInt.prototype.vertex = null;
zpp_nape.geom.ZPP_CutInt.prototype.path0 = null;
zpp_nape.geom.ZPP_CutInt.prototype.end = null;
zpp_nape.geom.ZPP_CutInt.prototype.start = null;
zpp_nape.geom.ZPP_CutInt.prototype.path1 = null;
zpp_nape.geom.ZPP_CutInt.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_CutInt.prototype.free = function() {
	this.end = this.start = null;
	this.path0 = this.path1 = null;
};
zpp_nape.geom.ZPP_CutInt.prototype.__class__ = zpp_nape.geom.ZPP_CutInt;
zpp_nape.geom.ZPP_Cutter = $hxClasses['zpp_nape.geom.ZPP_Cutter'] = function() { };
zpp_nape.geom.ZPP_Cutter.__name__ = ["zpp_nape","geom","ZPP_Cutter"];
zpp_nape.geom.ZPP_Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	if(_start != null && _start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	_start.zpp_inner.validate();
	px = _start.zpp_inner.x;
	if(_start != null && _start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	_start.zpp_inner.validate();
	py = _start.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.x;
		return $r;
	}(this)) - px;
	dy = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.y;
		return $r;
	}(this)) - py;
	var min;
	if(bstart) min = 0; else min = Math.NEGATIVE_INFINITY;
	var max;
	if(bend) max = 1; else max = Math.POSITIVE_INFINITY;
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	do {
		var c;
		if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) c = new zpp_nape.geom.ZPP_CutVert(); else {
			c = zpp_nape.geom.ZPP_CutVert.zpp_pool;
			zpp_nape.geom.ZPP_CutVert.zpp_pool = c.next;
			c.next = null;
		}
		null;
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) clashes = true;
		var obj = c;
		if(verts == null) verts = obj.prev = obj.next = obj; else {
			obj.prev = verts;
			obj.next = verts.next;
			verts.next.prev = obj;
			verts.next = obj;
		}
		verts = obj;
		p = p.next;
	} while(p != P);
	if(clashes) {
		var start = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			do {
				var p1 = nite;
				if(p1.value != 0.0) {
					start = p1;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var d = nx * nx + ny * ny;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		nx *= t;
		ny *= t;
		var t1 = nx;
		nx = -ny;
		ny = t1;
		var pre = null;
		var p2 = start;
		do {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				continue;
			}
			var prod = pre.value * p2.value;
			if(prod == 0) {
				p2 = p2.next;
				continue;
			}
			var a = pre.next;
			var positive;
			if(prod > 0) positive = pre.positive; else {
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				midx = a.posx + b.posx;
				midy = a.posy + b.posy;
				var t2 = 0.5;
				midx *= t2;
				midy *= t2;
				var x = midx + nx * 1e-8;
				var y = midy + ny * 1e-8;
				var ret = false;
				var F1 = P;
				var L1 = P;
				if(F1 != null) {
					var nite1 = F1;
					do {
						var p3 = nite1;
						var q = p3.prev;
						if((p3.y < y && q.y >= y || q.y < y && p3.y >= y) && (p3.x <= x || q.x <= x)) {
							if(p3.x + (y - p3.y) / (q.y - p3.y) * (q.x - p3.x) < x) ret = !ret;
						}
						nite1 = nite1.next;
					} while(nite1 != L1);
				}
				positive = ret;
			}
			var F2 = a;
			var L2 = p2;
			if(F2 != null) {
				var nite2 = F2;
				do {
					var q1 = nite2;
					q1.positive = positive;
					nite2 = nite2.next;
				} while(nite2 != L2);
			}
			pre = p2;
			p2 = p2.next;
		} while(p2 != start);
		do {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				continue;
			}
			var prod1 = pre.value * p2.value;
			if(prod1 == 0) {
				p2 = p2.next;
				continue;
			}
			var a1 = pre.next;
			var positive1;
			if(prod1 > 0) positive1 = pre.positive; else {
				var b1 = a1.next;
				var midx1 = 0.0;
				var midy1 = 0.0;
				midx1 = a1.posx + b1.posx;
				midy1 = a1.posy + b1.posy;
				var t3 = 0.5;
				midx1 *= t3;
				midy1 *= t3;
				var x1 = midx1 + nx * 1e-8;
				var y1 = midy1 + ny * 1e-8;
				var ret1 = false;
				var F3 = P;
				var L3 = P;
				if(F3 != null) {
					var nite3 = F3;
					do {
						var p4 = nite3;
						var q2 = p4.prev;
						if((p4.y < y1 && q2.y >= y1 || q2.y < y1 && p4.y >= y1) && (p4.x <= x1 || q2.x <= x1)) {
							if(p4.x + (y1 - p4.y) / (q2.y - p4.y) * (q2.x - p4.x) < x1) ret1 = !ret1;
						}
						nite3 = nite3.next;
					} while(nite3 != L3);
				}
				positive1 = ret1;
			}
			var F4 = a1;
			var L4 = p2;
			if(F4 != null) {
				var nite4 = F4;
				do {
					var q3 = nite4;
					q3.positive = positive1;
					nite4 = nite4.next;
				} while(nite4 != L4);
			}
			pre = p2;
			p2 = p2.next;
		} while(false);
	}
	if(zpp_nape.geom.ZPP_Cutter.ints == null) zpp_nape.geom.ZPP_Cutter.ints = new zpp_nape.util.ZNPList_ZPP_CutInt();
	if(zpp_nape.geom.ZPP_Cutter.paths == null) zpp_nape.geom.ZPP_Cutter.paths = new zpp_nape.util.ZNPList_ZPP_CutVert();
	var start1 = null;
	var obj1 = zpp_nape.geom.ZPP_GeomVert.get(verts.posx,verts.posy);
	if(start1 == null) start1 = obj1.prev = obj1.next = obj1; else {
		obj1.next = start1;
		obj1.prev = start1.prev;
		start1.prev.next = obj1;
		start1.prev = obj1;
	}
	obj1;
	var origin = start1;
	var firstpath = zpp_nape.geom.ZPP_CutVert.path(start1);
	zpp_nape.geom.ZPP_Cutter.paths.add(firstpath);
	var i = verts;
	do {
		var j = i.next;
		var pj = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
		if(i.positive == j.positive) {
			var obj2 = pj;
			if(start1 == null) start1 = obj2.prev = obj2.next = obj2; else {
				obj2.next = start1;
				obj2.prev = start1.prev;
				start1.prev.next = obj2;
				start1.prev = obj2;
			}
			obj2;
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,null,null,null,null,true,null));
				var obj3 = pj;
				if(start1 == null) start1 = obj3.prev = obj3.next = obj3; else {
					obj3.next = start1;
					obj3.prev = start1.prev;
					start1.prev.next = obj3;
					start1.prev = obj3;
				}
				obj3;
			} else if(i.value == 0) {
				var endof = start1.prev;
				start1 = null;
				var obj4 = zpp_nape.geom.ZPP_GeomVert.get(endof.x,endof.y);
				if(start1 == null) start1 = obj4.prev = obj4.next = obj4; else {
					obj4.next = start1;
					obj4.prev = start1.prev;
					start1.prev.next = obj4;
					start1.prev = obj4;
				}
				obj4;
				var obj5 = pj;
				if(start1 == null) start1 = obj5.prev = obj5.next = obj5; else {
					obj5.next = start1;
					obj5.prev = start1.prev;
					start1.prev.next = obj5;
					start1.prev = obj5;
				}
				obj5;
				var prepath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof,start1,prepath,postpath,true,null));
			} else if(j.value == 0) {
				var obj6 = pj;
				if(start1 == null) start1 = obj6.prev = obj6.next = obj6; else {
					obj6.next = start1;
					obj6.prev = start1.prev;
					start1.prev.next = obj6;
					start1.prev = obj6;
				}
				obj6;
				var endof1 = start1.prev;
				start1 = null;
				var obj7 = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
				if(start1 == null) start1 = obj7.prev = obj7.next = obj7; else {
					obj7.next = start1;
					obj7.prev = start1.prev;
					start1.prev.next = obj7;
					start1.prev = obj7;
				}
				obj7;
				var prepath1 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath1 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof1,start1,prepath1,postpath1,true,null));
			} else {
				var t4 = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				var t5 = t4;
				qx += ux * t5;
				qy += uy * t5;
				var obj8 = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start1 == null) start1 = obj8.prev = obj8.next = obj8; else {
					obj8.next = start1;
					obj8.prev = start1.prev;
					start1.prev.next = obj8;
					start1.prev = obj8;
				}
				obj8;
				var endof2 = start1.prev;
				start1 = null;
				var obj9 = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start1 == null) start1 = obj9.prev = obj9.next = obj9; else {
					obj9.next = start1;
					obj9.prev = start1.prev;
					start1.prev.next = obj9;
					start1.prev = obj9;
				}
				obj9;
				var obj10 = pj;
				if(start1 == null) start1 = obj10.prev = obj10.next = obj10; else {
					obj10.next = start1;
					obj10.prev = start1.prev;
					start1.prev.next = obj10;
					start1.prev = obj10;
				}
				obj10;
				var prepath2 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start1));
				var postpath2 = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof2,start1,prepath2,postpath2,false,null));
			}
		}
		i = i.next;
	} while(i != verts);
	var endof3 = start1.prev;
	endof3.next.prev = origin.prev;
	origin.prev.next = endof3.next;
	endof3.next = origin;
	origin.prev = endof3;
	var lastpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
	var xr;
	if(firstpath == firstpath.parent) xr = firstpath; else {
		var obj11 = firstpath;
		var stack = null;
		while(obj11 != obj11.parent) {
			var nxt = obj11.parent;
			obj11.parent = stack;
			stack = obj11;
			obj11 = nxt;
		}
		while(stack != null) {
			var nxt1 = stack.parent;
			stack.parent = obj11;
			stack = nxt1;
		}
		xr = obj11;
	}
	var yr;
	if(lastpath == lastpath.parent) yr = lastpath; else {
		var obj12 = lastpath;
		var stack1 = null;
		while(obj12 != obj12.parent) {
			var nxt2 = obj12.parent;
			obj12.parent = stack1;
			stack1 = obj12;
			obj12 = nxt2;
		}
		while(stack1 != null) {
			var nxt3 = stack1.parent;
			stack1.parent = obj12;
			stack1 = nxt3;
		}
		yr = obj12;
	}
	if(xr != yr) {
		if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = zpp_nape.geom.ZPP_Cutter.ints;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt4 = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt4 = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else if(left.elt.time < right.elt.time) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else {
						nxt4 = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt4; else head = nxt4;
					tail = nxt4;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.ints.head == null)) {
		var i1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		var j1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j1.virtualint) {
			i1.end.next.prev = j1.start.prev;
			j1.start.prev.next = i1.end.next;
			i1.end.next = j1.start;
			j1.start.prev = i1.end;
			j1.end.next.prev = i1.start.prev;
			i1.start.prev.next = j1.end.next;
			j1.end.next = i1.start;
			i1.start.prev = j1.end;
			var xr1;
			if(i1.path0 == i1.path0.parent) xr1 = i1.path0; else {
				var obj13 = i1.path0;
				var stack2 = null;
				while(obj13 != obj13.parent) {
					var nxt5 = obj13.parent;
					obj13.parent = stack2;
					stack2 = obj13;
					obj13 = nxt5;
				}
				while(stack2 != null) {
					var nxt6 = stack2.parent;
					stack2.parent = obj13;
					stack2 = nxt6;
				}
				xr1 = obj13;
			}
			var yr1;
			if(j1.path1 == j1.path1.parent) yr1 = j1.path1; else {
				var obj14 = j1.path1;
				var stack3 = null;
				while(obj14 != obj14.parent) {
					var nxt7 = obj14.parent;
					obj14.parent = stack3;
					stack3 = obj14;
					obj14 = nxt7;
				}
				while(stack3 != null) {
					var nxt8 = stack3.parent;
					stack3.parent = obj14;
					stack3 = nxt8;
				}
				yr1 = obj14;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
			var xr2;
			if(i1.path1 == i1.path1.parent) xr2 = i1.path1; else {
				var obj15 = i1.path1;
				var stack4 = null;
				while(obj15 != obj15.parent) {
					var nxt9 = obj15.parent;
					obj15.parent = stack4;
					stack4 = obj15;
					obj15 = nxt9;
				}
				while(stack4 != null) {
					var nxt10 = stack4.parent;
					stack4.parent = obj15;
					stack4 = nxt10;
				}
				xr2 = obj15;
			}
			var yr2;
			if(j1.path0 == j1.path0.parent) yr2 = j1.path0; else {
				var obj16 = j1.path0;
				var stack5 = null;
				while(obj16 != obj16.parent) {
					var nxt11 = obj16.parent;
					obj16.parent = stack5;
					stack5 = obj16;
					obj16 = nxt11;
				}
				while(stack5 != null) {
					var nxt12 = stack5.parent;
					stack5.parent = obj16;
					stack5 = nxt12;
				}
				yr2 = obj16;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		} else if(i1.virtualint && !j1.virtualint) {
			if(j1.end != null && j1.end.prev == j1.end) {
				j1.end.next = j1.end.prev = null;
				var o = j1.end;
				if(o.wrap != null) {
					o.wrap.zpp_inner._inuse = false;
					o.wrap.dispose();
					o.wrap = null;
				}
				o.prev = o.next = null;
				o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				j1.end = null;
			} else {
				var retnodes = j1.end.prev;
				j1.end.prev.next = j1.end.next;
				j1.end.next.prev = j1.end.prev;
				j1.end.next = j1.end.prev = null;
				var o1 = j1.end;
				if(o1.wrap != null) {
					o1.wrap.zpp_inner._inuse = false;
					o1.wrap.dispose();
					o1.wrap = null;
				}
				o1.prev = o1.next = null;
				o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
				j1.end = null;
				j1.end = retnodes;
			}
			if(!j1.vertex) {
				if(j1.end != j1.path0.vert) {
					j1.start.x = j1.end.x;
					j1.start.y = j1.end.y;
					if(j1.end != null && j1.end.prev == j1.end) {
						j1.end.next = j1.end.prev = null;
						var o2 = j1.end;
						if(o2.wrap != null) {
							o2.wrap.zpp_inner._inuse = false;
							o2.wrap.dispose();
							o2.wrap = null;
						}
						o2.prev = o2.next = null;
						o2.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o2;
						j1.end = null;
					} else {
						var retnodes1 = j1.end.prev;
						j1.end.prev.next = j1.end.next;
						j1.end.next.prev = j1.end.prev;
						j1.end.next = j1.end.prev = null;
						var o3 = j1.end;
						if(o3.wrap != null) {
							o3.wrap.zpp_inner._inuse = false;
							o3.wrap.dispose();
							o3.wrap = null;
						}
						o3.prev = o3.next = null;
						o3.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o3;
						j1.end = null;
						j1.end = retnodes1;
					}
				} else {
					var n = j1.start.next;
					j1.start.x = n.x;
					j1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o4 = n;
						if(o4.wrap != null) {
							o4.wrap.zpp_inner._inuse = false;
							o4.wrap.dispose();
							o4.wrap = null;
						}
						o4.prev = o4.next = null;
						o4.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o4;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o5 = n;
						if(o5.wrap != null) {
							o5.wrap.zpp_inner._inuse = false;
							o5.wrap.dispose();
							o5.wrap = null;
						}
						o5.prev = o5.next = null;
						o5.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o5;
					}
				}
			}
			j1.end.next.prev = j1.start.prev;
			j1.start.prev.next = j1.end.next;
			j1.end.next = j1.start;
			j1.start.prev = j1.end;
			var xr3;
			if(j1.path0 == j1.path0.parent) xr3 = j1.path0; else {
				var obj17 = j1.path0;
				var stack6 = null;
				while(obj17 != obj17.parent) {
					var nxt13 = obj17.parent;
					obj17.parent = stack6;
					stack6 = obj17;
					obj17 = nxt13;
				}
				while(stack6 != null) {
					var nxt14 = stack6.parent;
					stack6.parent = obj17;
					stack6 = nxt14;
				}
				xr3 = obj17;
			}
			var yr3;
			if(j1.path1 == j1.path1.parent) yr3 = j1.path1; else {
				var obj18 = j1.path1;
				var stack7 = null;
				while(obj18 != obj18.parent) {
					var nxt15 = obj18.parent;
					obj18.parent = stack7;
					stack7 = obj18;
					obj18 = nxt15;
				}
				while(stack7 != null) {
					var nxt16 = stack7.parent;
					stack7.parent = obj18;
					stack7 = nxt16;
				}
				yr3 = obj18;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		} else if(j1.virtualint && !i1.virtualint) {
			if(i1.end != null && i1.end.prev == i1.end) {
				i1.end.next = i1.end.prev = null;
				var o6 = i1.end;
				if(o6.wrap != null) {
					o6.wrap.zpp_inner._inuse = false;
					o6.wrap.dispose();
					o6.wrap = null;
				}
				o6.prev = o6.next = null;
				o6.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o6;
				i1.end = null;
			} else {
				var retnodes2 = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				var o7 = i1.end;
				if(o7.wrap != null) {
					o7.wrap.zpp_inner._inuse = false;
					o7.wrap.dispose();
					o7.wrap = null;
				}
				o7.prev = o7.next = null;
				o7.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
				zpp_nape.geom.ZPP_GeomVert.zpp_pool = o7;
				i1.end = null;
				i1.end = retnodes2;
			}
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					if(i1.end != null && i1.end.prev == i1.end) {
						i1.end.next = i1.end.prev = null;
						var o8 = i1.end;
						if(o8.wrap != null) {
							o8.wrap.zpp_inner._inuse = false;
							o8.wrap.dispose();
							o8.wrap = null;
						}
						o8.prev = o8.next = null;
						o8.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o8;
						i1.end = null;
					} else {
						var retnodes3 = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						var o9 = i1.end;
						if(o9.wrap != null) {
							o9.wrap.zpp_inner._inuse = false;
							o9.wrap.dispose();
							o9.wrap = null;
						}
						o9.prev = o9.next = null;
						o9.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o9;
						i1.end = null;
						i1.end = retnodes3;
					}
				} else {
					var n1 = i1.start.next;
					i1.start.x = n1.x;
					i1.start.y = n1.y;
					if(n1 != null && n1.prev == n1) {
						n1.next = n1.prev = null;
						var o10 = n1;
						if(o10.wrap != null) {
							o10.wrap.zpp_inner._inuse = false;
							o10.wrap.dispose();
							o10.wrap = null;
						}
						o10.prev = o10.next = null;
						o10.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o10;
						n1 = null;
					} else {
						n1.prev.next = n1.next;
						n1.next.prev = n1.prev;
						n1.next = n1.prev = null;
						var o11 = n1;
						if(o11.wrap != null) {
							o11.wrap.zpp_inner._inuse = false;
							o11.wrap.dispose();
							o11.wrap = null;
						}
						o11.prev = o11.next = null;
						o11.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o11;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr4;
			if(i1.path0 == i1.path0.parent) xr4 = i1.path0; else {
				var obj19 = i1.path0;
				var stack8 = null;
				while(obj19 != obj19.parent) {
					var nxt17 = obj19.parent;
					obj19.parent = stack8;
					stack8 = obj19;
					obj19 = nxt17;
				}
				while(stack8 != null) {
					var nxt18 = stack8.parent;
					stack8.parent = obj19;
					stack8 = nxt18;
				}
				xr4 = obj19;
			}
			var yr4;
			if(i1.path1 == i1.path1.parent) yr4 = i1.path1; else {
				var obj20 = i1.path1;
				var stack9 = null;
				while(obj20 != obj20.parent) {
					var nxt19 = obj20.parent;
					obj20.parent = stack9;
					stack9 = obj20;
					obj20 = nxt19;
				}
				while(stack9 != null) {
					var nxt20 = stack9.parent;
					stack9.parent = obj20;
					stack9 = nxt20;
				}
				yr4 = obj20;
			}
			if(xr4 != yr4) {
				if(xr4.rank < yr4.rank) xr4.parent = yr4; else if(xr4.rank > yr4.rank) yr4.parent = xr4; else {
					yr4.parent = xr4;
					xr4.rank++;
				}
			}
		}
		var o12 = i1;
		o12.end = o12.start = null;
		o12.path0 = o12.path1 = null;
		o12.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o12;
		var o13 = j1;
		o13.end = o13.start = null;
		o13.path0 = o13.path1 = null;
		o13.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o13;
	}
	var ret2;
	if(output == null) ret2 = new nape.geom.GeomPolyList(); else ret2 = output;
	var cx_ite = zpp_nape.geom.ZPP_Cutter.paths.head;
	while(cx_ite != null) {
		var p5 = cx_ite.elt;
		var poly;
		if(p5 == p5.parent) poly = p5; else {
			var obj21 = p5;
			var stack10 = null;
			while(obj21 != obj21.parent) {
				var nxt21 = obj21.parent;
				obj21.parent = stack10;
				stack10 = obj21;
				obj21 = nxt21;
			}
			while(stack10 != null) {
				var nxt22 = stack10.parent;
				stack10.parent = obj21;
				stack10 = nxt22;
			}
			poly = obj21;
		}
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p6 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p6 != poly.vert)) {
			skip = false;
			if(p6.x == p6.next.x && p6.y == p6.next.y) {
				if(p6 == poly.vert) {
					if(p6.next == p6) poly.vert = null; else poly.vert = p6.next;
					skip = true;
				}
				if(p6 != null && p6.prev == p6) {
					p6.next = p6.prev = null;
					p6 = p6 = null;
				} else {
					var retnodes4 = p6.next;
					p6.prev.next = p6.next;
					p6.next.prev = p6.prev;
					p6.next = p6.prev = null;
					p6 = null;
					p6 = retnodes4;
				}
			} else p6 = p6.next;
		}
		if(poly.vert != null) {
			var gp = nape.geom.GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret2.zpp_inner.reverse_flag) ret2.push(gp); else ret2.unshift(gp);
		}
		cx_ite = cx_ite.next;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.paths.head == null)) {
		var p7 = zpp_nape.geom.ZPP_Cutter.paths.pop_unsafe();
		var o14 = p7;
		o14.vert = null;
		o14.parent = null;
		o14.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o14;
	}
	while(!(verts == null)) if(verts != null && verts.prev == verts) {
		verts.next = verts.prev = null;
		var o15 = verts;
		o15.vert = null;
		o15.parent = null;
		o15.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o15;
		verts = verts = null;
	} else {
		var retnodes5 = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		var o16 = verts;
		o16.vert = null;
		o16.parent = null;
		o16.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o16;
		verts = null;
		verts = retnodes5;
	}
	return ret2;
};
zpp_nape.geom.ZPP_Cutter.prototype.__class__ = zpp_nape.geom.ZPP_Cutter;
zpp_nape.geom.ZPP_Geom = $hxClasses['zpp_nape.geom.ZPP_Geom'] = function() { };
zpp_nape.geom.ZPP_Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
zpp_nape.geom.ZPP_Geom.validateShape = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
zpp_nape.geom.ZPP_Geom.prototype.__class__ = zpp_nape.geom.ZPP_Geom;
zpp_nape.geom.ZPP_GeomVert = $hxClasses['zpp_nape.geom.ZPP_GeomVert'] = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_nape.geom.ZPP_GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_nape.geom.ZPP_GeomVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVert(); else {
		ret = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_GeomVert.prototype.x = null;
zpp_nape.geom.ZPP_GeomVert.prototype.y = null;
zpp_nape.geom.ZPP_GeomVert.prototype.prev = null;
zpp_nape.geom.ZPP_GeomVert.prototype.next = null;
zpp_nape.geom.ZPP_GeomVert.prototype.wrap = null;
zpp_nape.geom.ZPP_GeomVert.prototype.forced = null;
zpp_nape.geom.ZPP_GeomVert.prototype.free = function() {
	if(this.wrap != null) {
		this.wrap.zpp_inner._inuse = false;
		this.wrap.dispose();
		this.wrap = null;
	}
	this.prev = this.next = null;
};
zpp_nape.geom.ZPP_GeomVert.prototype.alloc = function() {
	this.forced = false;
};
zpp_nape.geom.ZPP_GeomVert.prototype.wrapper = function() {
	if(this.wrap == null) {
		this.wrap = nape.geom.Vec2.get(this.x,this.y,null);
		this.wrap.zpp_inner._inuse = true;
		this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
		this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
	}
	return this.wrap;
};
zpp_nape.geom.ZPP_GeomVert.prototype.modwrap = function(n) {
	this.x = n.x;
	this.y = n.y;
};
zpp_nape.geom.ZPP_GeomVert.prototype.getwrap = function() {
	this.wrap.zpp_inner.x = this.x;
	this.wrap.zpp_inner.y = this.y;
};
zpp_nape.geom.ZPP_GeomVert.prototype.__class__ = zpp_nape.geom.ZPP_GeomVert;
zpp_nape.geom.ZPP_GeomPoly = $hxClasses['zpp_nape.geom.ZPP_GeomPoly'] = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
zpp_nape.geom.ZPP_GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_nape.geom.ZPP_GeomPoly.prototype.outer = null;
zpp_nape.geom.ZPP_GeomPoly.prototype.vertices = null;
zpp_nape.geom.ZPP_GeomPoly.prototype.__class__ = zpp_nape.geom.ZPP_GeomPoly;
zpp_nape.geom.ZPP_GeomVertexIterator = $hxClasses['zpp_nape.geom.ZPP_GeomVertexIterator'] = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = true;
	this.outer = new nape.geom.GeomVertexIterator();
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
};
zpp_nape.geom.ZPP_GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
zpp_nape.geom.ZPP_GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVertexIterator(); else {
		ret = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
};
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.ptr = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.start = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.first = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.forward = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.outer = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.next = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.free = function() {
	this.outer.zpp_inner = null;
	this.ptr = this.start = null;
};
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.__class__ = zpp_nape.geom.ZPP_GeomVertexIterator;
zpp_nape.geom.ZPP_MarchSpan = $hxClasses['zpp_nape.geom.ZPP_MarchSpan'] = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
zpp_nape.geom.ZPP_MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
zpp_nape.geom.ZPP_MarchSpan.prototype.parent = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.rank = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.out = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.next = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.free = function() {
	this.parent = this;
};
zpp_nape.geom.ZPP_MarchSpan.prototype.alloc = function() {
	this.out = false;
	this.rank = 0;
};
zpp_nape.geom.ZPP_MarchSpan.prototype.__class__ = zpp_nape.geom.ZPP_MarchSpan;
zpp_nape.geom.ZPP_MarchPair = $hxClasses['zpp_nape.geom.ZPP_MarchPair'] = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
zpp_nape.geom.ZPP_MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
zpp_nape.geom.ZPP_MarchPair.prototype.p1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.key1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.okey1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.p2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.key2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.okey2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.pr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.keyr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.okeyr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.pd = null;
zpp_nape.geom.ZPP_MarchPair.prototype.span1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.span2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.spanr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.next = null;
zpp_nape.geom.ZPP_MarchPair.prototype.free = function() {
	this.p1 = this.p2 = this.pr = this.pd = null;
	this.span1 = this.span2 = this.spanr = null;
};
zpp_nape.geom.ZPP_MarchPair.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_MarchPair.prototype.__class__ = zpp_nape.geom.ZPP_MarchPair;
zpp_nape.geom.ZPP_MarchingSquares = $hxClasses['zpp_nape.geom.ZPP_MarchingSquares'] = function() {
};
zpp_nape.geom.ZPP_MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
zpp_nape.geom.ZPP_MarchingSquares.isos = null;
zpp_nape.geom.ZPP_MarchingSquares.ints = null;
zpp_nape.geom.ZPP_MarchingSquares.map = null;
zpp_nape.geom.ZPP_MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp;
	xp = (bx1 - bx0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = xp | 0;
	var yp;
	yp = (by1 - by0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = yp | 0;
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchingSquares.map == null) zpp_nape.geom.ZPP_MarchingSquares.map = new zpp_nape.util.ZNPArray2_ZPP_MarchPair(xn,yn); else zpp_nape.geom.ZPP_MarchingSquares.map.resize(xn,yn,null);
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.isos == null) zpp_nape.geom.ZPP_MarchingSquares.isos = new zpp_nape.util.ZNPArray2_Float(xn + 1,yn + 1); else zpp_nape.geom.ZPP_MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	var _g1 = 0;
	var _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc;
		if(y == 0) yc = by0; else if(y <= yn) yc = by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y; else yc = by1;
		var _g3 = 0;
		var _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc;
			if(x == 0) xc = bx0; else if(x <= xn) xc = bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x; else xc = bx1;
			zpp_nape.geom.ZPP_MarchingSquares.isos.set(x,y,iso(xc,yc));
		}
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.ints == null) zpp_nape.geom.ZPP_MarchingSquares.ints = new zpp_nape.util.ZNPArray2_ZPP_GeomVert(xn + 1,(yn << 1) + 1); else zpp_nape.geom.ZPP_MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	var spans = null;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) spans = new zpp_nape.geom.ZPP_MarchSpan(); else {
			spans = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
			zpp_nape.geom.ZPP_MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g4 = 0;
	while(_g4 < yn) {
		var y1 = _g4++;
		var y0 = py;
		var y11;
		if(y1 == yn - 1) y11 = by1; else y11 = by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y1 + 1);
		py = y11;
		var px = bx0;
		var pre = null;
		var _g11 = 0;
		while(_g11 < xn) {
			var x1 = _g11++;
			var x0 = px;
			var x11;
			if(x1 == xn - 1) x11 = bx1; else x11 = bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x1 + 1);
			px = x11;
			var fstx = x1 == 0 || !combine;
			var fsty = y1 == 0 || !combine;
			var sndx = x1 == xn - 1 || !combine;
			var sndy = y1 == yn - 1 || !combine;
			var pp = zpp_nape.geom.ZPP_MarchingSquares.me.marchSquare(iso,zpp_nape.geom.ZPP_MarchingSquares.isos,zpp_nape.geom.ZPP_MarchingSquares.ints,x0,y0,x11,y11,x1,y1,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd;
				if(pp.p2 != null && pp.okey2 != 14) pd = pp.p2; else pd = pp.p1;
				if(((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0) pp.pd = pd.prev; else pp.pd = pd.prev.prev;
				zpp_nape.geom.ZPP_MarchingSquares.map.set(x1,y1,pp);
				if(pre != null && zpp_nape.geom.ZPP_MarchingSquares.me.combLeft(pp.key1)) {
					zpp_nape.geom.ZPP_MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span1 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span1 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					pp.span1.alloc();
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span2 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span2 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					pp.span2.alloc();
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else pp.spanr = pp.span1;
				if(zpp_nape.geom.ZPP_MarchingSquares.me.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p2);
				var o = pp;
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
				o.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = o;
			}
		}
	}
	if(!combine) return;
	var _g5 = 1;
	while(_g5 < yn) {
		var y2 = _g5++;
		var pre1 = null;
		var _g12 = 0;
		while(_g12 < xn) {
			var x2 = _g12++;
			var b = zpp_nape.geom.ZPP_MarchingSquares.map.get(x2,y2);
			if(b == null) {
				pre1 = null;
				continue;
			}
			var bkey;
			if(b.p2 != null && b.okey2 == 14) bkey = b.okey2; else bkey = b.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combUp(bkey)) {
				pre1 = null;
				continue;
			}
			var a = zpp_nape.geom.ZPP_MarchingSquares.map.get(x2,y2 - 1);
			if(a == null) {
				pre1 = null;
				continue;
			}
			var akey;
			if(a.p2 != null && a.okey2 == 56) akey = a.okey2; else akey = a.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combDown(akey)) {
				pre1 = null;
				continue;
			}
			var ad;
			if(a.p2 != null && a.okey2 == 56) ad = a.span2; else ad = a.span1;
			var bu;
			if(b.p2 != null && b.okey2 == 14) bu = b.span2; else bu = b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj1 = bu;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				$r = obj1;
				return $r;
			}(this)))) {
				if(pre1 != bu) zpp_nape.geom.ZPP_MarchingSquares.me.combUD_virtual(a,b);
			} else {
				var xr;
				if(ad == ad.parent) xr = ad; else {
					var obj2 = ad;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr = obj2;
				}
				var yr;
				if(bu == bu.parent) yr = bu; else {
					var obj3 = bu;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr = obj3;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_nape.geom.ZPP_MarchingSquares.me.combUD(a,b);
			}
			var key;
			if(bu == b.span2) key = b.okey2; else key = b.okey1;
			if((key & 4) != 0) pre1 = bu; else pre1 = null;
		}
	}
	var _g6 = 0;
	while(_g6 < yn) {
		var y3 = _g6++;
		var _g13 = 0;
		while(_g13 < xn) {
			var x3 = _g13++;
			var p = zpp_nape.geom.ZPP_MarchingSquares.map.get(x3,y3);
			if(p == null) continue;
			var root;
			if(p.span1 == p.span1.parent) root = p.span1; else {
				var obj4 = p.span1;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(!root.out) {
				root.out = true;
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				if(p.span2 == p.span2.parent) root = p.span2; else {
					var obj5 = p.span2;
					var stack5 = null;
					while(obj5 != obj5.parent) {
						var nxt10 = obj5.parent;
						obj5.parent = stack5;
						stack5 = obj5;
						obj5 = nxt10;
					}
					while(stack5 != null) {
						var nxt11 = stack5.parent;
						stack5.parent = obj5;
						stack5 = nxt11;
					}
					root = obj5;
				}
				if(!root.out) {
					root.out = true;
					zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p2);
				}
			}
			var o1 = p;
			o1.p1 = o1.p2 = o1.pr = o1.pd = null;
			o1.span1 = o1.span2 = o1.spanr = null;
			o1.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
			zpp_nape.geom.ZPP_MarchPair.zpp_pool = o1;
			zpp_nape.geom.ZPP_MarchingSquares.map.set(x3,y3,null);
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		var o2 = t;
		o2.parent = o2;
		o2.next = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = o2;
	}
};
zpp_nape.geom.ZPP_MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.output = function(ret,poly) {
	if(poly == null || poly.next == poly || poly.next == poly.prev?true:(function($this) {
		var $r;
		var a;
		{
			var area = 0.0;
			var F = poly;
			var L = poly;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			a = area * 0.5;
		}
		$r = a * a < nape.Config.epsilon * nape.Config.epsilon;
		return $r;
	}(this))) {
		while(!(poly == null)) if(poly != null && poly.prev == poly) {
			poly.next = poly.prev = null;
			poly = poly = null;
		} else {
			var retnodes = poly.next;
			poly.prev.next = poly.next;
			poly.next.prev = poly.prev;
			poly.next = poly.prev = null;
			poly = null;
			poly = retnodes;
		}
		return;
	}
	var gp = nape.geom.GeomPoly.get();
	gp.zpp_inner.vertices = poly;
	if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.linkright = function(poly,key) {
	var kind = key & 7;
	if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.linkleft = function(poly,key) {
	if((key & 1) == 0) return poly.prev; else return poly;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.linkdown = function(poly,key) {
	if((key & 128) == 0) return poly.prev; else return poly.prev.prev;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.linkup = function(poly,key) {
	return poly;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combLR = function(a,b) {
	var ap = this.linkright(a.pr,a.okeyr);
	var bp = this.linkleft(b.p1,b.okey1);
	var ap2 = ap.next;
	var bp2 = bp.prev;
	if((a.keyr & 4) != 0) {
		if(b.pr == b.p1) b.pr = ap.prev;
		b.p1 = ap.prev;
		ap.prev.next = bp.next;
		bp.next.prev = ap.prev;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	} else {
		ap.next = bp.next;
		bp.next.prev = ap;
	}
	var o1 = bp;
	if(o1.wrap != null) {
		o1.wrap.zpp_inner._inuse = false;
		o1.wrap.dispose();
		o1.wrap = null;
	}
	o1.prev = o1.next = null;
	o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
	if((a.keyr & 16) != 0) {
		b.pd = ap2.next;
		ap2.next.prev = bp2.prev;
		bp2.prev.next = ap2.next;
		var o2 = ap2;
		if(o2.wrap != null) {
			o2.wrap.zpp_inner._inuse = false;
			o2.wrap.dispose();
			o2.wrap = null;
		}
		o2.prev = o2.next = null;
		o2.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o2;
	} else {
		ap2.prev = bp2.prev;
		bp2.prev.next = ap2;
	}
	var o3 = bp2;
	if(o3.wrap != null) {
		o3.wrap.zpp_inner._inuse = false;
		o3.wrap.dispose();
		o3.wrap = null;
	}
	o3.prev = o3.next = null;
	o3.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o3;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combUD = function(a,b) {
	var ad;
	if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
	var bu;
	if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
	var ap = a.pd;
	var bp = bu;
	var ap2 = ap.prev;
	var bp2 = bp.next;
	bp.next = ap.next;
	ap.next.prev = bp;
	var o = ap;
	if(o.wrap != null) {
		o.wrap.zpp_inner._inuse = false;
		o.wrap.dispose();
		o.wrap = null;
	}
	o.prev = o.next = null;
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	bp2.prev = ap2.prev;
	ap2.prev.next = bp2;
	if(ap2 == a.p1) a.p1 = bp2;
	var o1 = ap2;
	if(o1.wrap != null) {
		o1.wrap.zpp_inner._inuse = false;
		o1.wrap.dispose();
		o1.wrap = null;
	}
	o1.prev = o1.next = null;
	o1.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o1;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combUD_virtual = function(a,b) {
	var ad;
	if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
	var bu;
	if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
	var ap = a.pd;
	var bp = bu;
	var ap2 = ap.prev;
	var bp2 = bp.next;
	ap.forced = bp.forced = ap2.forced = bp2.forced = true;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combLeft = function(key) {
	var flag = key & 1 | (key & 192) >> 5;
	return this.comb(flag);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combRight = function(key) {
	var flag = (key & 28) >> 2;
	return this.comb(flag);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combUp = function(key) {
	var flag = key & 7;
	return this.comb(flag);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.combDown = function(key) {
	var flag = (key & 112) >> 4;
	return this.comb(flag);
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.comb = function(flag) {
	var cnt = 0;
	if((flag & 1) != 0) cnt++;
	if((flag & 2) != 0) cnt++;
	if((flag & 4) != 0) cnt++;
	return cnt >= 2;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.marchSquare = function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
	var key = 0;
	var v0 = isos.list[yn * isos.width + xn];
	if(v0 < 0) key |= 8;
	var v1 = isos.list[yn * isos.width + (xn + 1)];
	if(v1 < 0) key |= 4;
	var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
	if(v2 < 0) key |= 2;
	var v3 = isos.list[(yn + 1) * isos.width + xn];
	if(v3 < 0) key |= 1;
	if(key == 0) return null; else {
		var ret;
		if(zpp_nape.geom.ZPP_MarchPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_MarchPair(); else {
			ret = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
			zpp_nape.geom.ZPP_MarchPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		if(key != 10 && key != 5) {
			var val = zpp_nape.geom.ZPP_MarchingSquares.look_march[key];
			ret.okey1 = val;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				if((val & 1 << i) != 0) {
					var p = null;
					if(i == 0) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
						if(fstx || fsty) p.forced = true;
					} else if(i == 2) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
						if(sndx || fsty) p.forced = true;
					} else if(i == 4) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
						if(sndx || sndy) p.forced = true;
					} else if(i == 6) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
						if(fstx || sndy) p.forced = true;
					} else if(i == 1) {
						p = ints.list[(yn << 1) * ints.width + xn];
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
							ints.list[(yn << 1) * ints.width + xn] = p;
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(fsty) p.forced = true;
						if(p.x == x0 || p.x == x1) {
							if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
						}
					} else if(i == 5) {
						p = ints.list[((yn << 1) + 2) * ints.width + xn];
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
							ints.list[((yn << 1) + 2) * ints.width + xn] = p;
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(sndy) p.forced = true;
						if(p.x == x0 || p.x == x1) {
							if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
						}
					} else if(i == 3) {
						p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
							ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(sndx) p.forced = true;
						if(p.y == y0 || p.y == y1) {
							if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
						}
					} else {
						p = ints.list[((yn << 1) + 1) * ints.width + xn];
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
							ints.list[((yn << 1) + 1) * ints.width + xn] = p;
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(fstx) p.forced = true;
						if(p.y == y0 || p.y == y1) {
							if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
						}
					}
					var obj = p;
					if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
						obj.prev = ret.p1;
						obj.next = ret.p1.next;
						ret.p1.next.prev = obj;
						ret.p1.next = obj;
					}
					ret.p1 = obj;
				}
			}
			ret.p1 = ret.p1.next;
			ret.key1 = val;
			if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
				val = 0;
				ret.key1 = 0;
				ret.p1 = null;
			}
			if(val == 0) ret = null; else {
				ret.pr = ret.p1;
				ret.okeyr = ret.okey1;
				ret.keyr = ret.key1;
			}
		} else {
			var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
			if(key == 10) {
				if(mid) {
					var val1 = 187;
					ret.okey1 = val1;
					var _g1 = 0;
					while(_g1 < 8) {
						var i1 = _g1++;
						if((val1 & 1 << i1) != 0) {
							var p1 = null;
							if(i1 == 0) {
								p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p1.forced = true;
							} else if(i1 == 2) {
								p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p1.forced = true;
							} else if(i1 == 4) {
								p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p1.forced = true;
							} else if(i1 == 6) {
								p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p1.forced = true;
							} else if(i1 == 1) {
								p1 = ints.list[(yn << 1) * ints.width + xn];
								if(p1 == null) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p1;
								} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
								if(fsty) p1.forced = true;
								if(p1.x == x0 || p1.x == x1) {
									if(p1.x == x0 && (val1 & 1) != 0 || p1.x == x1 && (val1 & 4) != 0) val1 ^= 2;
								}
							} else if(i1 == 5) {
								p1 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p1 == null) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p1;
								} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
								if(sndy) p1.forced = true;
								if(p1.x == x0 || p1.x == x1) {
									if(p1.x == x0 && (val1 & 64) != 0 || p1.x == x1 && (val1 & 16) != 0) val1 ^= 32;
								}
							} else if(i1 == 3) {
								p1 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p1 == null) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p1;
								} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
								if(sndx) p1.forced = true;
								if(p1.y == y0 || p1.y == y1) {
									if(p1.y == y0 && (val1 & 4) != 0 || p1.y == y1 && (val1 & 16) != 0) val1 ^= 8;
								}
							} else {
								p1 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p1 == null) {
									p1 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p1;
								} else p1 = zpp_nape.geom.ZPP_GeomVert.get(p1.x,p1.y);
								if(fstx) p1.forced = true;
								if(p1.y == y0 || p1.y == y1) {
									if(p1.y == y0 && (val1 & 1) != 0 || p1.y == y1 && (val1 & 64) != 0) val1 ^= 128;
								}
							}
							var obj1 = p1;
							if(ret.p1 == null) ret.p1 = obj1.prev = obj1.next = obj1; else {
								obj1.prev = ret.p1;
								obj1.next = ret.p1.next;
								ret.p1.next.prev = obj1;
								ret.p1.next = obj1;
							}
							ret.p1 = obj1;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val1;
					if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
						val1 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val1 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val2 = 131;
					ret.okey1 = val2;
					var _g2 = 0;
					while(_g2 < 8) {
						var i2 = _g2++;
						if((val2 & 1 << i2) != 0) {
							var p2 = null;
							if(i2 == 0) {
								p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p2.forced = true;
							} else if(i2 == 2) {
								p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p2.forced = true;
							} else if(i2 == 4) {
								p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p2.forced = true;
							} else if(i2 == 6) {
								p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p2.forced = true;
							} else if(i2 == 1) {
								p2 = ints.list[(yn << 1) * ints.width + xn];
								if(p2 == null) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p2;
								} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
								if(fsty) p2.forced = true;
								if(p2.x == x0 || p2.x == x1) {
									if(p2.x == x0 && (val2 & 1) != 0 || p2.x == x1 && (val2 & 4) != 0) val2 ^= 2;
								}
							} else if(i2 == 5) {
								p2 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p2 == null) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p2;
								} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
								if(sndy) p2.forced = true;
								if(p2.x == x0 || p2.x == x1) {
									if(p2.x == x0 && (val2 & 64) != 0 || p2.x == x1 && (val2 & 16) != 0) val2 ^= 32;
								}
							} else if(i2 == 3) {
								p2 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p2 == null) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p2;
								} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
								if(sndx) p2.forced = true;
								if(p2.y == y0 || p2.y == y1) {
									if(p2.y == y0 && (val2 & 4) != 0 || p2.y == y1 && (val2 & 16) != 0) val2 ^= 8;
								}
							} else {
								p2 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p2 == null) {
									p2 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p2;
								} else p2 = zpp_nape.geom.ZPP_GeomVert.get(p2.x,p2.y);
								if(fstx) p2.forced = true;
								if(p2.y == y0 || p2.y == y1) {
									if(p2.y == y0 && (val2 & 1) != 0 || p2.y == y1 && (val2 & 64) != 0) val2 ^= 128;
								}
							}
							var obj2 = p2;
							if(ret.p1 == null) ret.p1 = obj2.prev = obj2.next = obj2; else {
								obj2.prev = ret.p1;
								obj2.next = ret.p1.next;
								ret.p1.next.prev = obj2;
								ret.p1.next = obj2;
							}
							ret.p1 = obj2;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val2;
					if(val2 == 1 || val2 == 4 || val2 == 16 || val2 == 64 || val2 == 3 || val2 == 12 || val2 == 48 || val2 == 192 || val2 == 129 || val2 == 6 || val2 == 24 || val2 == 96 || val2 == 5 || val2 == 20 || val2 == 80 || val2 == 65 || val2 == 17 || val2 == 68) {
						val2 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val2 != 0) {
						var val3 = 56;
						ret.okey2 = val3;
						var _g3 = 0;
						while(_g3 < 8) {
							var i3 = _g3++;
							if((val3 & 1 << i3) != 0) {
								var p3 = null;
								if(i3 == 0) {
									p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p3.forced = true;
								} else if(i3 == 2) {
									p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p3.forced = true;
								} else if(i3 == 4) {
									p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p3.forced = true;
								} else if(i3 == 6) {
									p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p3.forced = true;
								} else if(i3 == 1) {
									p3 = ints.list[(yn << 1) * ints.width + xn];
									if(p3 == null) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p3;
									} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
									if(fsty) p3.forced = true;
									if(p3.x == x0 || p3.x == x1) {
										if(p3.x == x0 && (val3 & 1) != 0 || p3.x == x1 && (val3 & 4) != 0) val3 ^= 2;
									}
								} else if(i3 == 5) {
									p3 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p3 == null) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p3;
									} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
									if(sndy) p3.forced = true;
									if(p3.x == x0 || p3.x == x1) {
										if(p3.x == x0 && (val3 & 64) != 0 || p3.x == x1 && (val3 & 16) != 0) val3 ^= 32;
									}
								} else if(i3 == 3) {
									p3 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p3 == null) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p3;
									} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
									if(sndx) p3.forced = true;
									if(p3.y == y0 || p3.y == y1) {
										if(p3.y == y0 && (val3 & 4) != 0 || p3.y == y1 && (val3 & 16) != 0) val3 ^= 8;
									}
								} else {
									p3 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p3 == null) {
										p3 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p3;
									} else p3 = zpp_nape.geom.ZPP_GeomVert.get(p3.x,p3.y);
									if(fstx) p3.forced = true;
									if(p3.y == y0 || p3.y == y1) {
										if(p3.y == y0 && (val3 & 1) != 0 || p3.y == y1 && (val3 & 64) != 0) val3 ^= 128;
									}
								}
								var obj3 = p3;
								if(ret.p2 == null) ret.p2 = obj3.prev = obj3.next = obj3; else {
									obj3.prev = ret.p2;
									obj3.next = ret.p2.next;
									ret.p2.next.prev = obj3;
									ret.p2.next = obj3;
								}
								ret.p2 = obj3;
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val3;
						if(val3 == 1 || val3 == 4 || val3 == 16 || val3 == 64 || val3 == 3 || val3 == 12 || val3 == 48 || val3 == 192 || val3 == 129 || val3 == 6 || val3 == 24 || val3 == 96 || val3 == 5 || val3 == 20 || val3 == 80 || val3 == 65 || val3 == 17 || val3 == 68) {
							val3 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val3 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val4 = 56;
						ret.okey1 = val4;
						var _g4 = 0;
						while(_g4 < 8) {
							var i4 = _g4++;
							if((val4 & 1 << i4) != 0) {
								var p4 = null;
								if(i4 == 0) {
									p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p4.forced = true;
								} else if(i4 == 2) {
									p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p4.forced = true;
								} else if(i4 == 4) {
									p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p4.forced = true;
								} else if(i4 == 6) {
									p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p4.forced = true;
								} else if(i4 == 1) {
									p4 = ints.list[(yn << 1) * ints.width + xn];
									if(p4 == null) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p4;
									} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
									if(fsty) p4.forced = true;
									if(p4.x == x0 || p4.x == x1) {
										if(p4.x == x0 && (val4 & 1) != 0 || p4.x == x1 && (val4 & 4) != 0) val4 ^= 2;
									}
								} else if(i4 == 5) {
									p4 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p4 == null) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p4;
									} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
									if(sndy) p4.forced = true;
									if(p4.x == x0 || p4.x == x1) {
										if(p4.x == x0 && (val4 & 64) != 0 || p4.x == x1 && (val4 & 16) != 0) val4 ^= 32;
									}
								} else if(i4 == 3) {
									p4 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p4 == null) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p4;
									} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
									if(sndx) p4.forced = true;
									if(p4.y == y0 || p4.y == y1) {
										if(p4.y == y0 && (val4 & 4) != 0 || p4.y == y1 && (val4 & 16) != 0) val4 ^= 8;
									}
								} else {
									p4 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p4 == null) {
										p4 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p4;
									} else p4 = zpp_nape.geom.ZPP_GeomVert.get(p4.x,p4.y);
									if(fstx) p4.forced = true;
									if(p4.y == y0 || p4.y == y1) {
										if(p4.y == y0 && (val4 & 1) != 0 || p4.y == y1 && (val4 & 64) != 0) val4 ^= 128;
									}
								}
								var obj4 = p4;
								if(ret.p1 == null) ret.p1 = obj4.prev = obj4.next = obj4; else {
									obj4.prev = ret.p1;
									obj4.next = ret.p1.next;
									ret.p1.next.prev = obj4;
									ret.p1.next = obj4;
								}
								ret.p1 = obj4;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val4;
						if(val4 == 1 || val4 == 4 || val4 == 16 || val4 == 64 || val4 == 3 || val4 == 12 || val4 == 48 || val4 == 192 || val4 == 129 || val4 == 6 || val4 == 24 || val4 == 96 || val4 == 5 || val4 == 20 || val4 == 80 || val4 == 65 || val4 == 17 || val4 == 68) {
							val4 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val4 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			} else if(mid) {
				var val5 = 238;
				ret.okey1 = val5;
				var _g5 = 0;
				while(_g5 < 8) {
					var i5 = _g5++;
					if((val5 & 1 << i5) != 0) {
						var p5 = null;
						if(i5 == 0) {
							p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p5.forced = true;
						} else if(i5 == 2) {
							p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p5.forced = true;
						} else if(i5 == 4) {
							p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p5.forced = true;
						} else if(i5 == 6) {
							p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p5.forced = true;
						} else if(i5 == 1) {
							p5 = ints.list[(yn << 1) * ints.width + xn];
							if(p5 == null) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p5;
							} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
							if(fsty) p5.forced = true;
							if(p5.x == x0 || p5.x == x1) {
								if(p5.x == x0 && (val5 & 1) != 0 || p5.x == x1 && (val5 & 4) != 0) val5 ^= 2;
							}
						} else if(i5 == 5) {
							p5 = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p5 == null) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p5;
							} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
							if(sndy) p5.forced = true;
							if(p5.x == x0 || p5.x == x1) {
								if(p5.x == x0 && (val5 & 64) != 0 || p5.x == x1 && (val5 & 16) != 0) val5 ^= 32;
							}
						} else if(i5 == 3) {
							p5 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p5 == null) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p5;
							} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
							if(sndx) p5.forced = true;
							if(p5.y == y0 || p5.y == y1) {
								if(p5.y == y0 && (val5 & 4) != 0 || p5.y == y1 && (val5 & 16) != 0) val5 ^= 8;
							}
						} else {
							p5 = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p5 == null) {
								p5 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p5;
							} else p5 = zpp_nape.geom.ZPP_GeomVert.get(p5.x,p5.y);
							if(fstx) p5.forced = true;
							if(p5.y == y0 || p5.y == y1) {
								if(p5.y == y0 && (val5 & 1) != 0 || p5.y == y1 && (val5 & 64) != 0) val5 ^= 128;
							}
						}
						var obj5 = p5;
						if(ret.p1 == null) ret.p1 = obj5.prev = obj5.next = obj5; else {
							obj5.prev = ret.p1;
							obj5.next = ret.p1.next;
							ret.p1.next.prev = obj5;
							ret.p1.next = obj5;
						}
						ret.p1 = obj5;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val5;
				if(val5 == 1 || val5 == 4 || val5 == 16 || val5 == 64 || val5 == 3 || val5 == 12 || val5 == 48 || val5 == 192 || val5 == 129 || val5 == 6 || val5 == 24 || val5 == 96 || val5 == 5 || val5 == 20 || val5 == 80 || val5 == 65 || val5 == 17 || val5 == 68) {
					val5 = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val5 == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var val6 = 224;
				ret.okey1 = val6;
				var _g6 = 0;
				while(_g6 < 8) {
					var i6 = _g6++;
					if((val6 & 1 << i6) != 0) {
						var p6 = null;
						if(i6 == 0) {
							p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p6.forced = true;
						} else if(i6 == 2) {
							p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p6.forced = true;
						} else if(i6 == 4) {
							p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p6.forced = true;
						} else if(i6 == 6) {
							p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p6.forced = true;
						} else if(i6 == 1) {
							p6 = ints.list[(yn << 1) * ints.width + xn];
							if(p6 == null) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p6;
							} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
							if(fsty) p6.forced = true;
							if(p6.x == x0 || p6.x == x1) {
								if(p6.x == x0 && (val6 & 1) != 0 || p6.x == x1 && (val6 & 4) != 0) val6 ^= 2;
							}
						} else if(i6 == 5) {
							p6 = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p6 == null) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p6;
							} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
							if(sndy) p6.forced = true;
							if(p6.x == x0 || p6.x == x1) {
								if(p6.x == x0 && (val6 & 64) != 0 || p6.x == x1 && (val6 & 16) != 0) val6 ^= 32;
							}
						} else if(i6 == 3) {
							p6 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p6 == null) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p6;
							} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
							if(sndx) p6.forced = true;
							if(p6.y == y0 || p6.y == y1) {
								if(p6.y == y0 && (val6 & 4) != 0 || p6.y == y1 && (val6 & 16) != 0) val6 ^= 8;
							}
						} else {
							p6 = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p6 == null) {
								p6 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p6;
							} else p6 = zpp_nape.geom.ZPP_GeomVert.get(p6.x,p6.y);
							if(fstx) p6.forced = true;
							if(p6.y == y0 || p6.y == y1) {
								if(p6.y == y0 && (val6 & 1) != 0 || p6.y == y1 && (val6 & 64) != 0) val6 ^= 128;
							}
						}
						var obj6 = p6;
						if(ret.p1 == null) ret.p1 = obj6.prev = obj6.next = obj6; else {
							obj6.prev = ret.p1;
							obj6.next = ret.p1.next;
							ret.p1.next.prev = obj6;
							ret.p1.next = obj6;
						}
						ret.p1 = obj6;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val6;
				if(val6 == 1 || val6 == 4 || val6 == 16 || val6 == 64 || val6 == 3 || val6 == 12 || val6 == 48 || val6 == 192 || val6 == 129 || val6 == 6 || val6 == 24 || val6 == 96 || val6 == 5 || val6 == 20 || val6 == 80 || val6 == 65 || val6 == 17 || val6 == 68) {
					val6 = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val6 != 0) {
					var val7 = 14;
					ret.okey2 = val7;
					var _g7 = 0;
					while(_g7 < 8) {
						var i7 = _g7++;
						if((val7 & 1 << i7) != 0) {
							var p7 = null;
							if(i7 == 0) {
								p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p7.forced = true;
							} else if(i7 == 2) {
								p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p7.forced = true;
							} else if(i7 == 4) {
								p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p7.forced = true;
							} else if(i7 == 6) {
								p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p7.forced = true;
							} else if(i7 == 1) {
								p7 = ints.list[(yn << 1) * ints.width + xn];
								if(p7 == null) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p7;
								} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
								if(fsty) p7.forced = true;
								if(p7.x == x0 || p7.x == x1) {
									if(p7.x == x0 && (val7 & 1) != 0 || p7.x == x1 && (val7 & 4) != 0) val7 ^= 2;
								}
							} else if(i7 == 5) {
								p7 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p7 == null) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p7;
								} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
								if(sndy) p7.forced = true;
								if(p7.x == x0 || p7.x == x1) {
									if(p7.x == x0 && (val7 & 64) != 0 || p7.x == x1 && (val7 & 16) != 0) val7 ^= 32;
								}
							} else if(i7 == 3) {
								p7 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p7 == null) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p7;
								} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
								if(sndx) p7.forced = true;
								if(p7.y == y0 || p7.y == y1) {
									if(p7.y == y0 && (val7 & 4) != 0 || p7.y == y1 && (val7 & 16) != 0) val7 ^= 8;
								}
							} else {
								p7 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p7 == null) {
									p7 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p7;
								} else p7 = zpp_nape.geom.ZPP_GeomVert.get(p7.x,p7.y);
								if(fstx) p7.forced = true;
								if(p7.y == y0 || p7.y == y1) {
									if(p7.y == y0 && (val7 & 1) != 0 || p7.y == y1 && (val7 & 64) != 0) val7 ^= 128;
								}
							}
							var obj7 = p7;
							if(ret.p2 == null) ret.p2 = obj7.prev = obj7.next = obj7; else {
								obj7.prev = ret.p2;
								obj7.next = ret.p2.next;
								ret.p2.next.prev = obj7;
								ret.p2.next = obj7;
							}
							ret.p2 = obj7;
						}
					}
					ret.p2 = ret.p2.next;
					ret.key2 = val7;
					if(val7 == 1 || val7 == 4 || val7 == 16 || val7 == 64 || val7 == 3 || val7 == 12 || val7 == 48 || val7 == 192 || val7 == 129 || val7 == 6 || val7 == 24 || val7 == 96 || val7 == 5 || val7 == 20 || val7 == 80 || val7 == 65 || val7 == 17 || val7 == 68) {
						val7 = 0;
						ret.key2 = 0;
						ret.p2 = null;
					}
					if(val7 == 0) {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					} else {
						ret.pr = ret.p2;
						ret.okeyr = ret.okey2;
						ret.keyr = ret.key2;
					}
				} else {
					var val8 = 14;
					ret.okey1 = val8;
					var _g8 = 0;
					while(_g8 < 8) {
						var i8 = _g8++;
						if((val8 & 1 << i8) != 0) {
							var p8 = null;
							if(i8 == 0) {
								p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p8.forced = true;
							} else if(i8 == 2) {
								p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p8.forced = true;
							} else if(i8 == 4) {
								p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p8.forced = true;
							} else if(i8 == 6) {
								p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p8.forced = true;
							} else if(i8 == 1) {
								p8 = ints.list[(yn << 1) * ints.width + xn];
								if(p8 == null) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p8;
								} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
								if(fsty) p8.forced = true;
								if(p8.x == x0 || p8.x == x1) {
									if(p8.x == x0 && (val8 & 1) != 0 || p8.x == x1 && (val8 & 4) != 0) val8 ^= 2;
								}
							} else if(i8 == 5) {
								p8 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p8 == null) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p8;
								} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
								if(sndy) p8.forced = true;
								if(p8.x == x0 || p8.x == x1) {
									if(p8.x == x0 && (val8 & 64) != 0 || p8.x == x1 && (val8 & 16) != 0) val8 ^= 32;
								}
							} else if(i8 == 3) {
								p8 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p8 == null) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p8;
								} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
								if(sndx) p8.forced = true;
								if(p8.y == y0 || p8.y == y1) {
									if(p8.y == y0 && (val8 & 4) != 0 || p8.y == y1 && (val8 & 16) != 0) val8 ^= 8;
								}
							} else {
								p8 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p8 == null) {
									p8 = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p8;
								} else p8 = zpp_nape.geom.ZPP_GeomVert.get(p8.x,p8.y);
								if(fstx) p8.forced = true;
								if(p8.y == y0 || p8.y == y1) {
									if(p8.y == y0 && (val8 & 1) != 0 || p8.y == y1 && (val8 & 64) != 0) val8 ^= 128;
								}
							}
							var obj8 = p8;
							if(ret.p1 == null) ret.p1 = obj8.prev = obj8.next = obj8; else {
								obj8.prev = ret.p1;
								obj8.next = ret.p1.next;
								ret.p1.next.prev = obj8;
								ret.p1.next = obj8;
							}
							ret.p1 = obj8;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val8;
					if(val8 == 1 || val8 == 4 || val8 == 16 || val8 == 64 || val8 == 3 || val8 == 12 || val8 == 48 || val8 == 192 || val8 == 129 || val8 == 6 || val8 == 24 || val8 == 96 || val8 == 5 || val8 == 20 || val8 == 80 || val8 == 65 || val8 == 17 || val8 == 68) {
						val8 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val8 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				}
			}
		}
		return ret;
	}
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.lerp = function(x0,x1,v0,v1) {
	if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
		var dv = v0 - v1;
		var t;
		if(dv * dv < nape.Config.epsilon * nape.Config.epsilon) t = 0.5; else t = v0 / dv;
		if(t < 0) t = 0; else if(t > 1) t = 1;
		return x0 + t * (x1 - x0);
	}
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.xlerp = function(x0,x1,y,v0,v1,iso,quality) {
	var xm = this.lerp(x0,x1,v0,v1);
	while(quality-- != 0 && x0 < xm && xm < x1) {
		var vm = iso(xm,y);
		if(vm == 0) break;
		if(v0 * vm < 0) {
			x1 = xm;
			v1 = vm;
		} else {
			x0 = xm;
			v0 = vm;
		}
		xm = this.lerp(x0,x1,v0,v1);
	}
	return xm;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.ylerp = function(y0,y1,x,v0,v1,iso,quality) {
	var ym = this.lerp(y0,y1,v0,v1);
	while(quality-- != 0 && y0 < ym && ym < y1) {
		var vm = iso(x,ym);
		if(vm == 0) break;
		if(v0 * vm < 0) {
			y1 = ym;
			v1 = vm;
		} else {
			y0 = ym;
			v0 = vm;
		}
		ym = this.lerp(y0,y1,v0,v1);
	}
	return ym;
};
zpp_nape.geom.ZPP_MarchingSquares.prototype.__class__ = zpp_nape.geom.ZPP_MarchingSquares;
zpp_nape.geom.ZPP_Mat23 = $hxClasses['zpp_nape.geom.ZPP_Mat23'] = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
zpp_nape.geom.ZPP_Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_nape.geom.ZPP_Mat23.get = function() {
	var ret;
	if(zpp_nape.geom.ZPP_Mat23.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Mat23(); else {
		ret = zpp_nape.geom.ZPP_Mat23.zpp_pool;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	return ret;
};
zpp_nape.geom.ZPP_Mat23.identity = function() {
	var ret = zpp_nape.geom.ZPP_Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
};
zpp_nape.geom.ZPP_Mat23.prototype.outer = null;
zpp_nape.geom.ZPP_Mat23.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.geom.Mat23();
		var o = this.outer.zpp_inner;
		o.next = zpp_nape.geom.ZPP_Mat23.zpp_pool;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.geom.ZPP_Mat23.prototype.a = null;
zpp_nape.geom.ZPP_Mat23.prototype.b = null;
zpp_nape.geom.ZPP_Mat23.prototype.c = null;
zpp_nape.geom.ZPP_Mat23.prototype.d = null;
zpp_nape.geom.ZPP_Mat23.prototype.tx = null;
zpp_nape.geom.ZPP_Mat23.prototype.ty = null;
zpp_nape.geom.ZPP_Mat23.prototype._invalidate = null;
zpp_nape.geom.ZPP_Mat23.prototype.invalidate = function() {
	if(this._invalidate != null) this._invalidate();
};
zpp_nape.geom.ZPP_Mat23.prototype.set = function(m) {
	this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
};
zpp_nape.geom.ZPP_Mat23.prototype.setas = function(a,b,c,d,tx,ty) {
	this.tx = tx;
	this.ty = ty;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
zpp_nape.geom.ZPP_Mat23.prototype.next = null;
zpp_nape.geom.ZPP_Mat23.prototype.free = function() {
};
zpp_nape.geom.ZPP_Mat23.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_Mat23.prototype.__class__ = zpp_nape.geom.ZPP_Mat23;
zpp_nape.geom.ZPP_MatMN = $hxClasses['zpp_nape.geom.ZPP_MatMN'] = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = new Array();
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
zpp_nape.geom.ZPP_MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_nape.geom.ZPP_MatMN.prototype.outer = null;
zpp_nape.geom.ZPP_MatMN.prototype.m = null;
zpp_nape.geom.ZPP_MatMN.prototype.n = null;
zpp_nape.geom.ZPP_MatMN.prototype.x = null;
zpp_nape.geom.ZPP_MatMN.prototype.__class__ = zpp_nape.geom.ZPP_MatMN;
zpp_nape.geom.ZPP_Monotone = $hxClasses['zpp_nape.geom.ZPP_Monotone'] = function() { };
zpp_nape.geom.ZPP_Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
zpp_nape.geom.ZPP_Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_nape.geom.ZPP_Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
};
zpp_nape.geom.ZPP_Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_nape.geom.ZPP_Monotone.bisector(p);
		var qo = zpp_nape.geom.ZPP_Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t1 = 1.0;
		qo.x += q.x * t1;
		qo.y += q.y * t1;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		var o1 = qo;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
		return ret;
	}
};
zpp_nape.geom.ZPP_Monotone.above = function(p,q) {
	return zpp_nape.geom.ZPP_Monotone.below(q,p);
};
zpp_nape.geom.ZPP_Monotone.left_vertex = function(p) {
	var pre = p.prev;
	return pre.y > p.y || pre.y == p.y && p.next.y < p.y;
};
zpp_nape.geom.ZPP_Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y) min = p;
			if(p.y > max.y) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F1 = min.next;
		var L1 = max;
		if(F1 != null) {
			var nite1 = F1;
			do {
				var p1 = nite1;
				if(p1.y < pre.y) {
					ret = false;
					break;
				}
				pre = p1;
				nite1 = nite1.next;
			} while(nite1 != L1);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F2 = min.prev;
		var L2 = max;
		if(F2 != null) {
			var nite2 = F2;
			do {
				var p2 = nite2;
				if(p2.y < pre.y) {
					ret = false;
					break;
				}
				pre = p2;
				nite2 = nite2.prev;
			} while(nite2 != L2);
		}
	}
	return ret;
};
zpp_nape.geom.ZPP_Monotone.sharedPPoly = null;
zpp_nape.geom.ZPP_Monotone.getShared = function() {
	if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_Monotone.sharedPPoly;
};
zpp_nape.geom.ZPP_Monotone.decompose = function(P,poly) {
	if(poly == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(P); else poly.init(P);
	if(poly.vertices == null) return poly;
	if(zpp_nape.geom.ZPP_Monotone.queue == null) zpp_nape.geom.ZPP_Monotone.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			zpp_nape.geom.ZPP_Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			if(zpp_nape.geom.ZPP_Monotone.below(p.prev,p)) {
				if(zpp_nape.geom.ZPP_Monotone.below(p.next,p)) {
					if(cx) p.type = 0; else p.type = 3;
				} else p.type = 4;
			} else if(zpp_nape.geom.ZPP_Monotone.below(p,p.next)) {
				if(cx) p.type = 1; else p.type = 2;
			} else p.type = 4;
			nite = nite.next;
		} while(nite != L);
	}
	var xxlist = zpp_nape.geom.ZPP_Monotone.queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(zpp_nape.geom.ZPP_Monotone.edges == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) zpp_nape.geom.ZPP_Monotone.edges = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			zpp_nape.geom.ZPP_Monotone.edges = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = zpp_nape.geom.ZPP_Monotone.edges.next;
			zpp_nape.geom.ZPP_Monotone.edges.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Monotone.edges.lt = zpp_nape.geom.ZPP_PartitionVertex.edge_lt;
		zpp_nape.geom.ZPP_Monotone.edges.swapped = zpp_nape.geom.ZPP_PartitionVertex.edge_swap;
	}
	while(!(zpp_nape.geom.ZPP_Monotone.queue.head == null)) {
		var v = zpp_nape.geom.ZPP_Monotone.queue.pop_unsafe();
		var _g = v.type;
		switch(_g) {
		case 0:
			v.helper = v;
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper == null) throw "Fatal error (1): Polygon is not weakly-simple and clockwise";
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e.node);
			e.helper = null;
			break;
		case 3:
			var e1;
			var ret = null;
			if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
				var set_ite = zpp_nape.geom.ZPP_Monotone.edges.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			e1 = ret;
			if(e1 != null) {
				if(e1.helper == null) throw "Fatal error (2): Polygon is not weakly-simple and clockwise";
				poly.add_diagonal(v,e1.helper);
				e1.helper = v;
			}
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 2:
			var e2 = v.prev;
			if(e2.helper == null) throw "Fatal error (3): Polygon is not weakly-simple and clockwise";
			if(e2.helper.type == 2) poly.add_diagonal(v,e2.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e2.node);
			e2.helper = null;
			var e3;
			var ret1 = null;
			if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
				var set_ite1 = zpp_nape.geom.ZPP_Monotone.edges.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var elt1 = set_ite1.data;
					if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt1,v)) {
						ret1 = elt1;
						break;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			e3 = ret1;
			if(e3 != null) {
				if(e3.helper == null) throw "Fatal error (4): Polygon is not weakly-simple and clockwise";
				if(e3.helper.type == 2) poly.add_diagonal(v,e3.helper);
				e3.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_nape.geom.ZPP_Monotone.left_vertex(v)) {
				if(pre.helper == null) throw "Fatal error (5): Polygon is not weakly-simple and clockwise";
				if(pre.helper.type == 2) poly.add_diagonal(v,pre.helper);
				zpp_nape.geom.ZPP_Monotone.edges.remove_node(pre.node);
				pre.helper = null;
				v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var e4;
				var ret2 = null;
				if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
					var set_ite2 = zpp_nape.geom.ZPP_Monotone.edges.parent;
					while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
					while(set_ite2 != null) {
						var elt2 = set_ite2.data;
						if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt2,v)) {
							ret2 = elt2;
							break;
						}
						if(set_ite2.next != null) {
							set_ite2 = set_ite2.next;
							while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
						} else {
							while(set_ite2.parent != null && set_ite2 == set_ite2.parent.next) set_ite2 = set_ite2.parent;
							set_ite2 = set_ite2.parent;
						}
					}
				}
				e4 = ret2;
				if(e4 == null || e4.helper == null) throw "Fatal error (6): Polygon is not weakly-simple and clockwise";
				if(e4.helper.type == 2) poly.add_diagonal(v,e4.helper);
				e4.helper = v;
			}
			break;
		}
	}
	return poly;
};
zpp_nape.geom.ZPP_Monotone.prototype.__class__ = zpp_nape.geom.ZPP_Monotone;
zpp_nape.geom.ZPP_PartitionVertex = $hxClasses['zpp_nape.geom.ZPP_PartitionVertex'] = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = zpp_nape.geom.ZPP_PartitionVertex.nextId++;
	this.diagonals = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
};
zpp_nape.geom.ZPP_PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
zpp_nape.geom.ZPP_PartitionVertex.get = function(x) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
		ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x.x;
	ret.y = x.y;
	return ret;
};
zpp_nape.geom.ZPP_PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
};
zpp_nape.geom.ZPP_PartitionVertex.vert_lt = function(edge,vert) {
	if(vert == edge || vert == edge.next) return true; else if(edge.y == edge.next.y) return (function($this) {
		var $r;
		var x = edge.x;
		var y = edge.next.x;
		$r = x < y?x:y;
		return $r;
	}(this)) <= vert.x; else return zpp_nape.geom.ZPP_PartitionVertex.rightdistance(edge,vert) <= 0.0;
};
zpp_nape.geom.ZPP_PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) return false;
	if(p == q.next) return !zpp_nape.geom.ZPP_PartitionVertex.vert_lt(p,q); else if(q == p.next) return zpp_nape.geom.ZPP_PartitionVertex.vert_lt(q,p); else if(p.y == p.next.y) if(q.y == q.next.y) return (function($this) {
		var $r;
		var x = p.x;
		var y = p.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var x1 = q.x;
		var y1 = q.next.x;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)); else return zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p) > 0.0 || zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next) > 0.0; else {
		var qRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q);
		var qNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) return (function($this) {
			var $r;
			var x2 = p.x;
			var y2 = p.next.x;
			$r = x2 > y2?x2:y2;
			return $r;
		}(this)) > (function($this) {
			var $r;
			var x3 = q.x;
			var y3 = q.next.x;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this));
		if(qRight * qNextRight >= 0) return qRight < 0 || qNextRight < 0;
		var pRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p);
		var pNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) return pRight > 0 || pNextRight > 0;
		return false;
	}
};
zpp_nape.geom.ZPP_PartitionVertex.prototype.id = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.mag = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.x = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.y = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.forced = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.diagonals = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.type = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.helper = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.rightchain = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.next = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.prev = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_PartitionVertex.prototype.free = function() {
	this.helper = null;
};
zpp_nape.geom.ZPP_PartitionVertex.prototype.copy = function() {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
		ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = this.x;
	ret.y = this.y;
	ret.forced = this.forced;
	return ret;
};
zpp_nape.geom.ZPP_PartitionVertex.prototype.sort = function() {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	var vorient;
	ux = this.prev.x - this.x;
	uy = this.prev.y - this.y;
	vx = this.next.x - this.x;
	vy = this.next.y - this.y;
	var ret = vy * ux - vx * uy;
	if(ret > 0) vorient = -1; else if(ret == 0) vorient = 0; else vorient = 1;
	var xxlist = this.diagonals;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(vorient == 1?(function($this) {
						var $r;
						{
							ux = left.elt.x - $this.x;
							uy = left.elt.y - $this.y;
						}
						{
							vx = right.elt.x - $this.x;
							vy = right.elt.y - $this.y;
						}
						var ret1 = vy * ux - vx * uy;
						$r = ret1 > 0?-1:ret1 == 0?0:1;
						return $r;
					}(this)) == 1:(function($this) {
						var $r;
						var d1;
						{
							ux = $this.prev.x - $this.x;
							uy = $this.prev.y - $this.y;
							vx = left.elt.x - $this.x;
							vy = left.elt.y - $this.y;
							var ret2 = vy * ux - vx * uy;
							if(ret2 > 0) d1 = -1; else if(ret2 == 0) d1 = 0; else d1 = 1;
						}
						var d2;
						{
							ux = $this.prev.x - $this.x;
							uy = $this.prev.y - $this.y;
							vx = right.elt.x - $this.x;
							vy = right.elt.y - $this.y;
							var ret3 = vy * ux - vx * uy;
							if(ret3 > 0) d2 = -1; else if(ret3 == 0) d2 = 0; else d2 = 1;
						}
						$r = d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)?(function($this) {
							var $r;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret4 = vy * ux - vx * uy;
							$r = ret4 > 0?-1:ret4 == 0?0:1;
							return $r;
						}($this)) == 1:d1 == -1 || d2 == -1?d2 == -1:d1 == 0 && d2 == 0?(function($this) {
							var $r;
							{
								ux = $this.x - $this.prev.x;
								uy = $this.y - $this.prev.y;
							}
							{
								vx = left.elt.x - $this.x;
								vy = left.elt.y - $this.y;
							}
							var d11 = ux * vx + uy * vy;
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var d21 = ux * vx + uy * vy;
							$r = d11 < 0 && d21 > 0?true:d21 < 0 && d11 > 0?false:true;
							return $r;
						}($this)):true;
						return $r;
					}(this))) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
};
zpp_nape.geom.ZPP_PartitionVertex.prototype.node = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.__class__ = zpp_nape.geom.ZPP_PartitionVertex;
zpp_nape.geom.ZPP_PartitionedPoly = $hxClasses['zpp_nape.geom.ZPP_PartitionedPoly'] = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
zpp_nape.geom.ZPP_PartitionedPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionedPoly"];
zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = null;
zpp_nape.geom.ZPP_PartitionedPoly.getSharedPP = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
};
zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = null;
zpp_nape.geom.ZPP_PartitionedPoly.getShared = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.vertices = null;
zpp_nape.geom.ZPP_PartitionedPoly.prototype.eq = function(a,b) {
	return zpp_nape.geom.ZPP_VecMath.vec_dsq(a.x,a.y,b.x,b.y) < nape.Config.epsilon * nape.Config.epsilon;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.next = null;
zpp_nape.geom.ZPP_PartitionedPoly.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.free = function() {
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.init = function(P) {
	if(P == null) return;
	var cw;
	cw = (function($this) {
		var $r;
		var area = 0.0;
		{
			var F = P;
			var L = P;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = area * 0.5;
		return $r;
	}(this)) > 0.0;
	var p = P;
	do {
		if(cw) {
			var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p);
			if(this.vertices == null) this.vertices = obj.prev = obj.next = obj; else {
				obj.prev = this.vertices;
				obj.next = this.vertices.next;
				this.vertices.next.prev = obj;
				this.vertices.next = obj;
			}
			this.vertices = obj;
		} else {
			var obj1 = zpp_nape.geom.ZPP_PartitionVertex.get(p);
			if(this.vertices == null) this.vertices = obj1.prev = obj1.next = obj1; else {
				obj1.next = this.vertices;
				obj1.prev = this.vertices.prev;
				this.vertices.prev.next = obj1;
				this.vertices.prev = obj1;
			}
			this.vertices = obj1;
		}
		this.vertices.forced = p.forced;
		p = p.next;
	} while(p != P);
	this.remove_collinear_vertices();
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.remove_collinear_vertices = function() {
	var p = this.vertices;
	var skip = true;
	while(skip || p != this.vertices) {
		skip = false;
		if(this.eq(p,p.next)) {
			if(p == this.vertices) {
				this.vertices = p.next;
				skip = true;
			}
			if(p.forced) p.next.forced = true;
			if(p != null && p.prev == p) {
				p.next = p.prev = null;
				var o = p;
				o.helper = null;
				null;
				o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				p = p = null;
			} else {
				var retnodes = p.next;
				p.prev.next = p.next;
				p.next.prev = p.prev;
				p.next = p.prev = null;
				var o1 = p;
				o1.helper = null;
				null;
				o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
				zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
				p = null;
				p = retnodes;
			}
			if(p == null) {
				this.vertices = null;
				break;
			}
		} else p = p.next;
	}
	if(this.vertices == null) return true;
	var removed;
	do {
		removed = false;
		p = this.vertices;
		skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			var pre = p.prev;
			var ux = 0.0;
			var uy = 0.0;
			ux = p.x - pre.x;
			uy = p.y - pre.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.next.x - p.x;
			vy = p.next.y - p.y;
			var crs = vy * ux - vx * uy;
			if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					var o2 = p;
					o2.helper = null;
					null;
					o2.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o2;
					p = p = null;
				} else {
					var retnodes1 = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					var o3 = p;
					o3.helper = null;
					null;
					o3.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o3;
					p = null;
					p = retnodes1;
				}
				removed = true;
				if(p == null) {
					removed = false;
					this.vertices = null;
					break;
				}
			}
		}
	} while(removed);
	return this.vertices == null;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.add_diagonal = function(p,q) {
	p.diagonals.add(q);
	q.diagonals.add(p);
	p.forced = q.forced = true;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.extract_partitions = function(ret) {
	if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
	if(this.vertices != null) {
		var F = this.vertices;
		var L = this.vertices;
		if(F != null) {
			var nite = F;
			do {
				var c = nite;
				c.sort();
				nite = nite.next;
			} while(nite != L);
		}
		this.pull_partitions(this.vertices,ret);
		while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
			this.vertices.next = this.vertices.prev = null;
			var o = this.vertices;
			o.helper = null;
			null;
			o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
			this.vertices = this.vertices = null;
		} else {
			var retnodes = this.vertices.next;
			this.vertices.prev.next = this.vertices.next;
			this.vertices.next.prev = this.vertices.prev;
			this.vertices.next = this.vertices.prev = null;
			var o1 = this.vertices;
			o1.helper = null;
			null;
			o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
			this.vertices = null;
			this.vertices = retnodes;
		}
		var pre = null;
		var cx_ite = ret.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p.remove_collinear_vertices()) {
				ret.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.pull_partitions = function(start,ret) {
	var poly;
	if(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(); else {
		poly = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = poly.next;
		poly.next = null;
	}
	null;
	var next = start;
	do {
		var obj = next.copy();
		if(poly.vertices == null) poly.vertices = obj.prev = obj.next = obj; else {
			obj.prev = poly.vertices;
			obj.next = poly.vertices.next;
			poly.vertices.next.prev = obj;
			poly.vertices.next = obj;
		}
		poly.vertices = obj;
		poly.vertices.forced = next.forced;
		if(!(next.diagonals.head == null)) {
			var diag = next.diagonals.inlined_pop_unsafe();
			if(diag == start) break; else next = this.pull_partitions(next,ret);
		} else next = next.next;
	} while(next != start);
	if((function($this) {
		var $r;
		var area = 0.0;
		{
			var F = poly.vertices;
			var L = poly.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = area * 0.5;
		return $r;
	}(this)) != 0) ret.add(poly);
	return next;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.extract = function(ret) {
	if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	if(this.vertices != null) {
		var F = this.vertices;
		var L = this.vertices;
		if(F != null) {
			var nite = F;
			do {
				var c = nite;
				c.sort();
				nite = nite.next;
			} while(nite != L);
		}
		this.pull(this.vertices,ret);
		while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
			this.vertices.next = this.vertices.prev = null;
			var o = this.vertices;
			o.helper = null;
			null;
			o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
			this.vertices = this.vertices = null;
		} else {
			var retnodes = this.vertices.next;
			this.vertices.prev.next = this.vertices.next;
			this.vertices.next.prev = this.vertices.prev;
			this.vertices.next = this.vertices.prev = null;
			var o1 = this.vertices;
			o1.helper = null;
			null;
			o1.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o1;
			this.vertices = null;
			this.vertices = retnodes;
		}
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.pull = function(start,ret) {
	var poly = null;
	var next = start;
	do {
		var obj = zpp_nape.geom.ZPP_GeomVert.get(next.x,next.y);
		if(poly == null) poly = obj.prev = obj.next = obj; else {
			obj.prev = poly;
			obj.next = poly.next;
			poly.next.prev = obj;
			poly.next = obj;
		}
		poly = obj;
		poly.forced = next.forced;
		if(!(next.diagonals.head == null)) {
			var diag = next.diagonals.inlined_pop_unsafe();
			if(diag == start) break; else next = this.pull(next,ret);
		} else next = next.next;
	} while(next != start);
	var area;
	var area1 = 0.0;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			area1 += v.x * (v.next.y - v.prev.y);
			nite = nite.next;
		} while(nite != L);
	}
	area = area1 * 0.5;
	if(area * area >= nape.Config.epsilon * nape.Config.epsilon) {
		if(!(function($this) {
			var $r;
			var p = poly;
			var skip = true;
			while(skip || p != poly) {
				skip = false;
				if(zpp_nape.geom.ZPP_VecMath.vec_dsq(p.x,p.y,p.next.x,p.next.y) < nape.Config.epsilon * nape.Config.epsilon) {
					if(p == poly) {
						poly = p.next;
						skip = true;
					}
					if(p.forced) p.next.forced = true;
					if(p != null && p.prev == p) {
						p.next = p.prev = null;
						p = p = null;
					} else {
						var retnodes = p.next;
						p.prev.next = p.next;
						p.next.prev = p.prev;
						p.next = p.prev = null;
						p = null;
						p = retnodes;
					}
					if(p == null) {
						poly = null;
						break;
					}
				} else p = p.next;
			}
			if(poly != null) {
				var removed;
				do {
					removed = false;
					p = poly;
					skip = true;
					while(skip || p != poly) {
						skip = false;
						var pre = p.prev;
						var ux = 0.0;
						var uy = 0.0;
						ux = p.x - pre.x;
						uy = p.y - pre.y;
						var vx = 0.0;
						var vy = 0.0;
						vx = p.next.x - p.x;
						vy = p.next.y - p.y;
						var crs = vy * ux - vx * uy;
						if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
							if(p == poly) {
								poly = p.next;
								skip = true;
							}
							if(p != null && p.prev == p) {
								p.next = p.prev = null;
								p = p = null;
							} else {
								var retnodes1 = p.next;
								p.prev.next = p.next;
								p.next.prev = p.prev;
								p.next = p.prev = null;
								p = null;
								p = retnodes1;
							}
							removed = true;
							if(p == null) {
								removed = false;
								poly = null;
								break;
							}
						}
					}
				} while(removed);
			}
			$r = poly == null;
			return $r;
		}(this))) ret.add(poly);
	}
	return next;
};
zpp_nape.geom.ZPP_PartitionedPoly.prototype.__class__ = zpp_nape.geom.ZPP_PartitionedPoly;
zpp_nape.geom.ZPP_Ray = $hxClasses['zpp_nape.geom.ZPP_Ray'] = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	this.origin = nape.geom.Vec2.get(null,null,null);
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	this.direction = nape.geom.Vec2.get(null,null,null);
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
zpp_nape.geom.ZPP_Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
zpp_nape.geom.ZPP_Ray.prototype.origin = null;
zpp_nape.geom.ZPP_Ray.prototype.direction = null;
zpp_nape.geom.ZPP_Ray.prototype.maxdist = null;
zpp_nape.geom.ZPP_Ray.prototype.userData = null;
zpp_nape.geom.ZPP_Ray.prototype.originx = null;
zpp_nape.geom.ZPP_Ray.prototype.originy = null;
zpp_nape.geom.ZPP_Ray.prototype.dirx = null;
zpp_nape.geom.ZPP_Ray.prototype.diry = null;
zpp_nape.geom.ZPP_Ray.prototype.idirx = null;
zpp_nape.geom.ZPP_Ray.prototype.idiry = null;
zpp_nape.geom.ZPP_Ray.prototype.normalx = null;
zpp_nape.geom.ZPP_Ray.prototype.normaly = null;
zpp_nape.geom.ZPP_Ray.prototype.absnormalx = null;
zpp_nape.geom.ZPP_Ray.prototype.absnormaly = null;
zpp_nape.geom.ZPP_Ray.prototype.origin_invalidate = function(x) {
	this.originx = x.x;
	this.originy = x.y;
};
zpp_nape.geom.ZPP_Ray.prototype.direction_invalidate = function(x) {
	this.dirx = x.x;
	this.diry = x.y;
	this.zip_dir = true;
};
zpp_nape.geom.ZPP_Ray.prototype.zip_dir = null;
zpp_nape.geom.ZPP_Ray.prototype.invalidate_dir = function() {
	this.zip_dir = true;
};
zpp_nape.geom.ZPP_Ray.prototype.validate_dir = function() {
	if(this.zip_dir) {
		this.zip_dir = false;
		if(this.dirx * this.dirx + this.diry * this.diry < nape.Config.epsilon) throw "Error: Ray::direction is degenerate";
		var d = this.dirx * this.dirx + this.diry * this.diry;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		this.dirx *= t;
		this.diry *= t;
		this.idirx = 1 / this.dirx;
		this.idiry = 1 / this.diry;
		this.normalx = -this.diry;
		this.normaly = this.dirx;
		var x = this.normalx;
		if(x < 0) this.absnormalx = -x; else this.absnormalx = x;
		var x1 = this.normaly;
		if(x1 < 0) this.absnormaly = -x1; else this.absnormaly = x1;
	}
};
zpp_nape.geom.ZPP_Ray.prototype.rayAABB = function() {
	var x0 = this.originx;
	var x1 = x0;
	var y0 = this.originy;
	var y1 = y0;
	if(this.maxdist >= Math.POSITIVE_INFINITY) {
		if(this.dirx > 0) x1 = Math.POSITIVE_INFINITY; else if(this.dirx < 0) x1 = Math.NEGATIVE_INFINITY;
		if(this.diry > 0) y1 = Math.POSITIVE_INFINITY; else if(this.diry < 0) y1 = Math.NEGATIVE_INFINITY;
	} else {
		x1 += this.maxdist * this.dirx;
		y1 += this.maxdist * this.diry;
	}
	if(x1 < x0) {
		var t = x0;
		x0 = x1;
		x1 = t;
	}
	if(y1 < y0) {
		var t1 = y0;
		y0 = y1;
		y1 = t1;
	}
	var rayab = zpp_nape.geom.ZPP_AABB.get(x0,y0,x1,y1);
	return rayab;
};
zpp_nape.geom.ZPP_Ray.prototype.aabbtest = function(a) {
	var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
	var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
	return (function($this) {
		var $r;
		var x = dot1;
		$r = x < 0?-x:x;
		return $r;
	}(this)) < dot2;
};
zpp_nape.geom.ZPP_Ray.prototype.aabbsect = function(a) {
	var cx = this.originx >= a.minx && this.originx <= a.maxx;
	var cy = this.originy >= a.miny && this.originy <= a.maxy;
	if(cx && cy) return 0.0; else {
		var ret = -1.0;
		do {
			if(this.dirx >= 0 && this.originx >= a.maxx) break;
			if(this.dirx <= 0 && this.originx <= a.minx) break;
			if(this.diry >= 0 && this.originy >= a.maxy) break;
			if(this.diry <= 0 && this.originy <= a.miny) break;
			if(this.dirx > 0) {
				var t = (a.minx - this.originx) * this.idirx;
				if(t >= 0 && t <= this.maxdist) {
					var y = this.originy + t * this.diry;
					if(y >= a.miny && y <= a.maxy) {
						ret = t;
						break;
					}
				}
			} else if(this.dirx < 0) {
				var t1 = (a.maxx - this.originx) * this.idirx;
				if(t1 >= 0 && t1 <= this.maxdist) {
					var y1 = this.originy + t1 * this.diry;
					if(y1 >= a.miny && y1 <= a.maxy) {
						ret = t1;
						break;
					}
				}
			}
			if(this.diry > 0) {
				var t2 = (a.miny - this.originy) * this.idiry;
				if(t2 >= 0 && t2 <= this.maxdist) {
					var x = this.originx + t2 * this.dirx;
					if(x >= a.minx && x <= a.maxx) {
						ret = t2;
						break;
					}
				}
			} else if(this.diry < 0) {
				var t3 = (a.maxy - this.originy) * this.idiry;
				if(t3 >= 0 && t3 <= this.maxdist) {
					var x1 = this.originx + t3 * this.dirx;
					if(x1 >= a.minx && x1 <= a.maxx) {
						ret = t3;
						break;
					}
				}
			}
		} while(false);
		return ret;
	}
};
zpp_nape.geom.ZPP_Ray.prototype.circlesect = function(c,inner,mint) {
	if(c.zip_worldCOM) {
		if(c.body != null) {
			c.zip_worldCOM = false;
			if(c.zip_localCOM) {
				c.zip_localCOM = false;
				if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
				if(c.wrap_localCOM != null) {
					c.wrap_localCOM.zpp_inner.x = c.localCOMx;
					c.wrap_localCOM.zpp_inner.y = c.localCOMy;
				}
			}
			c.body.validate_axis();
			c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
			c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
		}
	}
	var acx = 0.0;
	var acy = 0.0;
	acx = this.originx - c.worldCOMx;
	acy = this.originy - c.worldCOMy;
	var A = this.dirx * this.dirx + this.diry * this.diry;
	var B = 2 * (acx * this.dirx + acy * this.diry);
	var C = acx * acx + acy * acy - c.radius * c.radius;
	var det = B * B - 4 * A * C;
	if(det == 0) {
		var t = -B / 2 * A;
		if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
			var nx = 0.0;
			var ny = 0.0;
			nx = this.originx;
			ny = this.originy;
			var t1 = t;
			nx += this.dirx * t1;
			ny += this.diry * t1;
			var t2 = 1.0;
			nx -= c.worldCOMx * t2;
			ny -= c.worldCOMy * t2;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t3 = imag;
			nx *= t3;
			ny *= t3;
			if(C <= 0) {
				nx = -nx;
				ny = -ny;
			}
			return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
		} else return null;
	} else {
		det = Math.sqrt(det);
		A = 1 / (2 * A);
		var t0 = (-B - det) * A;
		var t11 = (-B + det) * A;
		if(t0 > 0) {
			if(t0 < mint && t0 <= this.maxdist) {
				var nx1 = 0.0;
				var ny1 = 0.0;
				nx1 = this.originx;
				ny1 = this.originy;
				var t4 = t0;
				nx1 += this.dirx * t4;
				ny1 += this.diry * t4;
				var t5 = 1.0;
				nx1 -= c.worldCOMx * t5;
				ny1 -= c.worldCOMy * t5;
				var d1 = nx1 * nx1 + ny1 * ny1;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t6 = imag1;
				nx1 *= t6;
				ny1 *= t6;
				return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),t0,false,c.outer);
			} else return null;
		} else if(t11 > 0 && inner) {
			if(t11 < mint && t11 <= this.maxdist) {
				var nx2 = 0.0;
				var ny2 = 0.0;
				nx2 = this.originx;
				ny2 = this.originy;
				var t7 = t11;
				nx2 += this.dirx * t7;
				ny2 += this.diry * t7;
				var t8 = 1.0;
				nx2 -= c.worldCOMx * t8;
				ny2 -= c.worldCOMy * t8;
				var d2 = nx2 * nx2 + ny2 * ny2;
				var imag2 = 1.0 / Math.sqrt(d2);
				var t9 = imag2;
				nx2 *= t9;
				ny2 *= t9;
				nx2 = -nx2;
				ny2 = -ny2;
				return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx2,ny2,null),t11,true,c.outer);
			} else return null;
		} else return null;
	}
};
zpp_nape.geom.ZPP_Ray.prototype.circlesect2 = function(c,inner,list) {
	if(c.zip_worldCOM) {
		if(c.body != null) {
			c.zip_worldCOM = false;
			if(c.zip_localCOM) {
				c.zip_localCOM = false;
				if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
				if(c.wrap_localCOM != null) {
					c.wrap_localCOM.zpp_inner.x = c.localCOMx;
					c.wrap_localCOM.zpp_inner.y = c.localCOMy;
				}
			}
			c.body.validate_axis();
			c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
			c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
		}
	}
	var acx = 0.0;
	var acy = 0.0;
	acx = this.originx - c.worldCOMx;
	acy = this.originy - c.worldCOMy;
	var A = this.dirx * this.dirx + this.diry * this.diry;
	var B = 2 * (acx * this.dirx + acy * this.diry);
	var C = acx * acx + acy * acy - c.radius * c.radius;
	var det = B * B - 4 * A * C;
	if(det == 0) {
		var t = -B / 2 * A;
		if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
			var nx = 0.0;
			var ny = 0.0;
			nx = this.originx;
			ny = this.originy;
			var t1 = t;
			nx += this.dirx * t1;
			ny += this.diry * t1;
			var t2 = 1.0;
			nx -= c.worldCOMx * t2;
			ny -= c.worldCOMy * t2;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t3 = imag;
			nx *= t3;
			ny *= t3;
			if(C <= 0) {
				nx = -nx;
				ny = -ny;
			}
			var res = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if((function($this) {
					var $r;
					if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = res.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,res);
		}
	} else {
		det = Math.sqrt(det);
		A = 1 / (2 * A);
		var t0 = (-B - det) * A;
		var t11 = (-B + det) * A;
		if(t0 > 0 && t0 <= this.maxdist) {
			var nx1 = 0.0;
			var ny1 = 0.0;
			nx1 = this.originx;
			ny1 = this.originy;
			var t4 = t0;
			nx1 += this.dirx * t4;
			ny1 += this.diry * t4;
			var t5 = 1.0;
			nx1 -= c.worldCOMx * t5;
			ny1 -= c.worldCOMy * t5;
			var d1 = nx1 * nx1 + ny1 * ny1;
			var imag1 = 1.0 / Math.sqrt(d1);
			var t6 = imag1;
			nx1 *= t6;
			ny1 *= t6;
			var res1 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),t0,false,c.outer);
			var pre1 = null;
			var cx_ite1 = list.zpp_inner.inner.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if((function($this) {
					var $r;
					if(res1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = res1.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j1.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			list.zpp_inner.inner.inlined_insert(pre1,res1);
		}
		if(t11 > 0 && t11 <= this.maxdist && inner) {
			var nx2 = 0.0;
			var ny2 = 0.0;
			nx2 = this.originx;
			ny2 = this.originy;
			var t7 = t11;
			nx2 += this.dirx * t7;
			ny2 += this.diry * t7;
			var t8 = 1.0;
			nx2 -= c.worldCOMx * t8;
			ny2 -= c.worldCOMy * t8;
			var d2 = nx2 * nx2 + ny2 * ny2;
			var imag2 = 1.0 / Math.sqrt(d2);
			var t9 = imag2;
			nx2 *= t9;
			ny2 *= t9;
			nx2 = -nx2;
			ny2 = -ny2;
			var res2 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx2,ny2,null),t11,true,c.outer);
			var pre2 = null;
			var cx_ite2 = list.zpp_inner.inner.head;
			while(cx_ite2 != null) {
				var j2 = cx_ite2.elt;
				if((function($this) {
					var $r;
					if(res2.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = res2.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j2.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j2.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre2 = cx_ite2;
				cx_ite2 = cx_ite2.next;
			}
			list.zpp_inner.inner.inlined_insert(pre2,res2);
		}
	}
};
zpp_nape.geom.ZPP_Ray.prototype.polysect = function(p,inner,mint) {
	var min = mint;
	var edge = null;
	var ei = p.edges.head;
	var cx_cont = true;
	var cx_itei = p.gverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx = 0.0;
			var _vy = 0.0;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx = 0.0;
			var _sy = 0.0;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > nape.Config.epsilon) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
						min = sxx;
						edge = ei.elt;
					}
				}
			}
		}
		ei = ei.next;
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	if(cx_cont) do {
		cx_itej = p.gverts.next;
		var v1 = cx_itej;
		var e1 = ei.elt;
		if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
			var _vx1 = 0.0;
			var _vy1 = 0.0;
			_vx1 = v1.x - u.x;
			_vy1 = v1.y - u.y;
			var _sx1 = 0.0;
			var _sy1 = 0.0;
			_sx1 = u.x - this.originx;
			_sy1 = u.y - this.originy;
			var den1 = _vy1 * this.dirx - _vx1 * this.diry;
			if(den1 * den1 > nape.Config.epsilon) {
				den1 = 1 / den1;
				var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
				if(sxx1 > 0 && sxx1 < min && sxx1 <= this.maxdist) {
					var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
					if(txx1 > -nape.Config.epsilon && txx1 < 1 + nape.Config.epsilon) {
						min = sxx1;
						edge = ei.elt;
					}
				}
			}
		}
		ei = ei.next;
	} while(false);
	if(edge != null) {
		var nx = 0.0;
		var ny = 0.0;
		nx = edge.gnormx;
		ny = edge.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
	} else return null;
};
zpp_nape.geom.ZPP_Ray.prototype.polysect2 = function(p,inner,list) {
	var min = Math.POSITIVE_INFINITY;
	var max = -1.0;
	var edge = null;
	var edgemax = null;
	var ei = p.edges.head;
	var cx_cont = true;
	var cx_itei = p.gverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx = 0.0;
			var _vy = 0.0;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx = 0.0;
			var _sy = 0.0;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > nape.Config.epsilon) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
						if(sxx < min) {
							min = sxx;
							edge = ei.elt;
						}
						if(sxx > max) {
							max = sxx;
							edgemax = ei.elt;
						}
					}
				}
			}
		}
		ei = ei.next;
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	if(cx_cont) do {
		cx_itej = p.gverts.next;
		var v1 = cx_itej;
		var e1 = ei.elt;
		if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
			var _vx1 = 0.0;
			var _vy1 = 0.0;
			_vx1 = v1.x - u.x;
			_vy1 = v1.y - u.y;
			var _sx1 = 0.0;
			var _sy1 = 0.0;
			_sx1 = u.x - this.originx;
			_sy1 = u.y - this.originy;
			var den1 = _vy1 * this.dirx - _vx1 * this.diry;
			if(den1 * den1 > nape.Config.epsilon) {
				den1 = 1 / den1;
				var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
				if(sxx1 > 0 && sxx1 <= this.maxdist && (sxx1 < min || sxx1 > max)) {
					var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
					if(txx1 > -nape.Config.epsilon && txx1 < 1 + nape.Config.epsilon) {
						if(sxx1 < min) {
							min = sxx1;
							edge = ei.elt;
						}
						if(sxx1 > max) {
							max = sxx1;
							edgemax = ei.elt;
						}
					}
				}
			}
		}
		ei = ei.next;
	} while(false);
	if(edge != null) {
		var nx = 0.0;
		var ny = 0.0;
		nx = edge.gnormx;
		ny = edge.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		var ret = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
		var pre = null;
		var cx_ite = list.zpp_inner.inner.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if((function($this) {
				var $r;
				if(ret.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
				$r = ret.zpp_inner.toiDistance;
				return $r;
			}(this)) < (function($this) {
				var $r;
				if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
				$r = j.zpp_inner.toiDistance;
				return $r;
			}(this))) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		list.zpp_inner.inner.inlined_insert(pre,ret);
	}
	if(edgemax != null && edge != edgemax) {
		var nx1 = 0.0;
		var ny1 = 0.0;
		nx1 = edgemax.gnormx;
		ny1 = edgemax.gnormy;
		var inner2 = nx1 * this.dirx + ny1 * this.diry > 0;
		if(inner2) {
			nx1 = -nx1;
			ny1 = -ny1;
		}
		var ret1 = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx1,ny1,null),max,inner2,p.outer);
		var pre1 = null;
		var cx_ite1 = list.zpp_inner.inner.head;
		while(cx_ite1 != null) {
			var j1 = cx_ite1.elt;
			if((function($this) {
				var $r;
				if(ret1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
				$r = ret1.zpp_inner.toiDistance;
				return $r;
			}(this)) < (function($this) {
				var $r;
				if(j1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
				$r = j1.zpp_inner.toiDistance;
				return $r;
			}(this))) break;
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		list.zpp_inner.inner.inlined_insert(pre1,ret1);
	}
};
zpp_nape.geom.ZPP_Ray.prototype.__class__ = zpp_nape.geom.ZPP_Ray;
zpp_nape.geom.ZPP_SimpleVert = $hxClasses['zpp_nape.geom.ZPP_SimpleVert'] = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleVert();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.links = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.links = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	null;
	this.links.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
};
zpp_nape.geom.ZPP_SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
zpp_nape.geom.ZPP_SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_nape.geom.ZPP_SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_SimpleVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleVert(); else {
		ret = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_SimpleVert.prototype.forced = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.x = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.y = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.links = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.id = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.next = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.node = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.free = function() {
	this.links.clear();
	this.node = null;
	this.forced = false;
};
zpp_nape.geom.ZPP_SimpleVert.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_SimpleVert.prototype.__class__ = zpp_nape.geom.ZPP_SimpleVert;
zpp_nape.geom.ZPP_SimpleSeg = $hxClasses['zpp_nape.geom.ZPP_SimpleSeg'] = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleSeg();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	null;
	this.vertices.lt = $bind(this,this.less_xy);
};
zpp_nape.geom.ZPP_SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
zpp_nape.geom.ZPP_SimpleSeg.get = function(left,right) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleSeg(); else {
		ret = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
};
zpp_nape.geom.ZPP_SimpleSeg.prototype.left = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.right = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.vertices = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.id = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.next = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.free = function() {
	this.left = this.right = null;
	this.prev = null;
	this.node = null;
	this.vertices.clear();
};
zpp_nape.geom.ZPP_SimpleSeg.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_SimpleSeg.prototype.prev = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.node = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.less_xy = function(a,b) {
	return a.x < b.x || a.x == b.x && a.y < b.y;
};
zpp_nape.geom.ZPP_SimpleSeg.prototype.__class__ = zpp_nape.geom.ZPP_SimpleSeg;
zpp_nape.geom.ZPP_SimpleEvent = $hxClasses['zpp_nape.geom.ZPP_SimpleEvent'] = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
zpp_nape.geom.ZPP_SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
zpp_nape.geom.ZPP_SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_nape.geom.ZPP_SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
};
zpp_nape.geom.ZPP_SimpleEvent.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleEvent(); else {
		ret = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vertex = v;
	return ret;
};
zpp_nape.geom.ZPP_SimpleEvent.prototype.type = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.vertex = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.segment = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.segment2 = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.node = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.next = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.free = function() {
	this.vertex = null;
	this.segment = this.segment2 = null;
	this.node = null;
};
zpp_nape.geom.ZPP_SimpleEvent.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_SimpleEvent.prototype.__class__ = zpp_nape.geom.ZPP_SimpleEvent;
zpp_nape.geom.ZPP_SimpleSweep = $hxClasses['zpp_nape.geom.ZPP_SimpleSweep'] = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) this.tree = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
		this.tree = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	null;
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
zpp_nape.geom.ZPP_SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
zpp_nape.geom.ZPP_SimpleSweep.prototype.sweepx = null;
zpp_nape.geom.ZPP_SimpleSweep.prototype.tree = null;
zpp_nape.geom.ZPP_SimpleSweep.prototype.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.edge_lt = function(p,q) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	var flip;
	if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) if(p.left.x == p.right.x) {
		if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
	} else return (function($this) {
		var $r;
		flip = p.right.x < p.left.x;
		{
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
		}
		{
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
		var $r;
		flip = q.right.x < q.left.x;
		{
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
		}
		{
			vx = p.left.x - q.left.x;
			vy = p.left.y - q.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0); else if(p.left == q.left) if(p.left.x == p.right.x) {
		if(p.left.y < p.right.y) return p.left.y > q.right.y; else return p.right.y > q.right.y;
	} else return (function($this) {
		var $r;
		flip = p.right.x < p.left.x;
		{
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
		}
		{
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0; else if(p.right == q.right) if(p.left.x == p.right.x) {
		if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
	} else return (function($this) {
		var $r;
		flip = p.right.x < p.left.x;
		{
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
		}
		{
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0;
	if(p.left.x == p.right.x) {
		if(q.left.x == q.right.x) {
			var pmax;
			if(p.left.y < p.right.y) pmax = p.right; else pmax = p.left;
			var qmax;
			if(q.left.y < q.right.y) qmax = q.right; else qmax = q.left;
			return pmax.y > qmax.y;
		} else {
			var plrg;
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.left.x - q.left.x;
			vy = p.left.y - q.left.y;
			if(flip) plrg = uy * vx - ux * vy; else plrg = vy * ux - vx * uy;
			var aplrg;
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.right.x - q.left.x;
			vy = p.right.y - q.left.y;
			if(flip) aplrg = uy * vx - ux * vy; else aplrg = vy * ux - vx * uy;
			if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
		}
	} else if(q.left.x == q.right.x) {
		var qlrg;
		flip = p.right.x < p.left.x;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		vx = q.left.x - p.left.x;
		vy = q.left.y - p.left.y;
		if(flip) qlrg = uy * vx - ux * vy; else qlrg = vy * ux - vx * uy;
		var aqlrg;
		flip = p.right.x < p.left.x;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		vx = q.right.x - p.left.x;
		vy = q.right.y - p.left.y;
		if(flip) aqlrg = uy * vx - ux * vy; else aqlrg = vy * ux - vx * uy;
		if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
	} else {
		var qlrg1;
		qlrg1 = (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0.0;
		var aqlrg1;
		aqlrg1 = (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0.0;
		if(qlrg1 == aqlrg1) return qlrg1; else {
			var plrg1;
			plrg1 = (function($this) {
				var $r;
				flip = q.right.x < q.left.x;
				{
					ux = q.right.x - q.left.x;
					uy = q.right.y - q.left.y;
				}
				{
					vx = p.left.x - q.left.x;
					vy = p.left.y - q.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) >= 0.0;
			var aplrg1;
			aplrg1 = (function($this) {
				var $r;
				flip = q.right.x < q.left.x;
				{
					ux = q.right.x - q.left.x;
					uy = q.right.y - q.left.y;
				}
				{
					vx = p.right.x - q.left.x;
					vy = p.right.y - q.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) >= 0.0;
			if(plrg1 == aplrg1) return plrg1;
			var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
			var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
			return py > qy;
		}
	}
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.clear = function() {
	this.tree.clear();
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.add = function(e) {
	e.node = this.tree.insert(e);
	var nxt = this.tree.successor_node(e.node);
	var pre = this.tree.predecessor_node(e.node);
	if(nxt != null) {
		e.next = nxt.data;
		nxt.data.prev = e;
	}
	if(pre != null) {
		e.prev = pre.data;
		pre.data.next = e;
	}
	return e;
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.remove = function(e) {
	var nxt = this.tree.successor_node(e.node);
	var pre = this.tree.predecessor_node(e.node);
	if(nxt != null) nxt.data.prev = e.prev;
	if(pre != null) pre.data.next = e.next;
	this.tree.remove_node(e.node);
	e.node = null;
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.intersect = function(p,q) {
	if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
		var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
		var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
		if(lsign * rsign > 0) return false; else {
			var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
			var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
			if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
		}
	}
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.intersection = function(p,q) {
	if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
		var ux = 0.0;
		var uy = 0.0;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		var vx = 0.0;
		var vy = 0.0;
		vx = q.right.x - q.left.x;
		vy = q.right.y - q.left.y;
		var denom = vy * ux - vx * uy;
		if(denom == 0.0) return null;
		denom = 1 / denom;
		var cx = 0.0;
		var cy = 0.0;
		cx = q.left.x - p.left.x;
		cy = q.left.y - p.left.y;
		var t = (vy * cx - vx * cy) * denom;
		if(t < 0 || t > 1) return null;
		var s = (uy * cx - ux * cy) * denom;
		if(s < 0 || s > 1) return null;
		var vet;
		if(s == 0 || s == 1 || t == 0 || t == 1) {
			var cases = s == 0;
			if(s == 1 && cases) throw "corner case 1a"; else if(s == 1) cases = true;
			if(t == 0 && cases) throw "corner case 1b"; else if(t == 0) cases = true;
			if(t == 1 && cases) throw "corner case 1c";
			if(s == 0) vet = q.left; else if(s == 1) vet = q.right; else if(t == 0) vet = p.left; else vet = p.right;
		} else vet = zpp_nape.geom.ZPP_SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
		var ret = zpp_nape.geom.ZPP_SimpleEvent.get(vet);
		ret.type = 0;
		ret.segment = p;
		ret.segment2 = q;
		return ret;
	}
};
zpp_nape.geom.ZPP_SimpleSweep.prototype.__class__ = zpp_nape.geom.ZPP_SimpleSweep;
zpp_nape.geom.ZPP_Simple = $hxClasses['zpp_nape.geom.ZPP_Simple'] = function() { };
zpp_nape.geom.ZPP_Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
zpp_nape.geom.ZPP_Simple.decompose = function(poly,rets) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	if(zpp_nape.geom.ZPP_Simple.vertices == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) zpp_nape.geom.ZPP_Simple.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			zpp_nape.geom.ZPP_Simple.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = zpp_nape.geom.ZPP_Simple.vertices.next;
			zpp_nape.geom.ZPP_Simple.vertices.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.vertices.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
		zpp_nape.geom.ZPP_Simple.vertices.swapped = zpp_nape.geom.ZPP_SimpleVert.swap_nodes;
	}
	if(zpp_nape.geom.ZPP_Simple.queue == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.queue = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.queue = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.queue.next;
			zpp_nape.geom.ZPP_Simple.queue.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.queue.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
		zpp_nape.geom.ZPP_Simple.queue.swapped = zpp_nape.geom.ZPP_SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y);
			var vx;
			var cur = zpp_nape.geom.ZPP_Simple.vertices.parent;
			while(cur != null) if(zpp_nape.geom.ZPP_Simple.vertices.lt(vert,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.vertices.lt(cur.data,vert)) cur = cur.next; else break;
			vx = cur;
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = zpp_nape.geom.ZPP_Simple.vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
				var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(vert);
				var seg;
				if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				zpp_nape.geom.ZPP_Simple.queue.insert(e1);
				zpp_nape.geom.ZPP_Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e11 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
	var e21 = zpp_nape.geom.ZPP_SimpleEvent.get(fst);
	var seg1;
	if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		seg1 = zpp_nape.geom.ZPP_SimpleSeg.get(pre,fst);
	} else {
		e11.type = 2;
		e21.type = 1;
		seg1 = zpp_nape.geom.ZPP_SimpleSeg.get(fst,pre);
	}
	e11.segment = e21.segment = seg1;
	zpp_nape.geom.ZPP_Simple.queue.insert(e11);
	zpp_nape.geom.ZPP_Simple.queue.insert(e21);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(zpp_nape.geom.ZPP_Simple.ints == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.ints = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.ints = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.ints.next;
			zpp_nape.geom.ZPP_Simple.ints.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.ints.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
	}
	while(!zpp_nape.geom.ZPP_Simple.queue.empty()) {
		var e = zpp_nape.geom.ZPP_Simple.queue.pop_front();
		zpp_nape.geom.ZPP_Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_nape.geom.ZPP_Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.next.id,s.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.next.id))) {
				var intx = zpp_nape.geom.ZPP_Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex;
						var cur1 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur1 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx,cur1.data)) cur1 = cur1.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur1.data,intx)) cur1 = cur1.next; else break;
						ex = cur1;
						if(ex == null) {
							var vx1;
							var cur2 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur2 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx,cur2.data)) cur2 = cur2.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur2.data,intx)) cur2 = cur2.next; else break;
							vx1 = cur2;
							if(vx1 != null) {
								var o1 = intx.vertex;
								o1.links.clear();
								o1.node = null;
								o1.forced = false;
								o1.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o1;
								intx.vertex = vx1.data.vertex;
								vx1.data = intx;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.next.id,s.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx.segment || intx.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o2 = intx.vertex;
							o2.links.clear();
							o2.node = null;
							o2.forced = false;
							o2.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o2;
							var o3 = intx;
							o3.vertex = null;
							o3.segment = o3.segment2 = null;
							o3.node = null;
							o3.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o3;
						}
					} else {
						var o4 = intx.vertex;
						o4.links.clear();
						o4.node = null;
						o4.forced = false;
						o4.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o4;
						var o5 = intx;
						o5.vertex = null;
						o5.segment = o5.segment2 = null;
						o5.node = null;
						o5.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o5;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.prev.id,s.id))) {
				var intx1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(s,s.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex1;
						var cur3 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur3 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx1,cur3.data)) cur3 = cur3.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur3.data,intx1)) cur3 = cur3.next; else break;
						ex1 = cur3;
						if(ex1 == null) {
							var vx2;
							var cur4 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur4 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx1,cur4.data)) cur4 = cur4.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur4.data,intx1)) cur4 = cur4.next; else break;
							vx2 = cur4;
							if(vx2 != null) {
								var o6 = intx1.vertex;
								o6.links.clear();
								o6.node = null;
								o6.forced = false;
								o6.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o6;
								intx1.vertex = vx2.data.vertex;
								vx2.data = intx1;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx1);
							}
							if(s.id < s.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.prev.id,s.id,true));
						} else {
							var x1 = ex1.data;
							if(x1.segment != intx1.segment || intx1.segment2 != x1.segment2) throw "corner case 2, shiiiit.";
							var o7 = intx1.vertex;
							o7.links.clear();
							o7.node = null;
							o7.forced = false;
							o7.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o7;
							var o8 = intx1;
							o8.vertex = null;
							o8.segment = o8.segment2 = null;
							o8.node = null;
							o8.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o8;
						}
					} else {
						var o9 = intx1.vertex;
						o9.links.clear();
						o9.node = null;
						o9.forced = false;
						o9.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o9;
						var o10 = intx1;
						o10.vertex = null;
						o10.segment = o10.segment2 = null;
						o10.node = null;
						o10.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o10;
					}
				}
			}
		} else if(e.type == 2) {
			var s1 = e.segment;
			if(s1.node != null) {
				var nxt = s1.next;
				var pre1 = s1.prev;
				zpp_nape.geom.ZPP_Simple.sweep.remove(s1);
				var o11 = s1;
				o11.left = o11.right = null;
				o11.prev = null;
				o11.node = null;
				o11.vertices.clear();
				o11.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
				zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o11;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_nape.geom.ZPP_Simple.inthash.has(nxt.id,pre1.id):zpp_nape.geom.ZPP_Simple.inthash.has(pre1.id,nxt.id))) {
					var intx2 = zpp_nape.geom.ZPP_Simple.sweep.intersection(nxt,pre1);
					if(intx2 != null) {
						if(intx2.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
							var ex2;
							var cur5 = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur5 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx2,cur5.data)) cur5 = cur5.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur5.data,intx2)) cur5 = cur5.next; else break;
							ex2 = cur5;
							if(ex2 == null) {
								var vx3;
								var cur6 = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur6 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx2,cur6.data)) cur6 = cur6.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur6.data,intx2)) cur6 = cur6.next; else break;
								vx3 = cur6;
								if(vx3 != null) {
									var o12 = intx2.vertex;
									o12.links.clear();
									o12.node = null;
									o12.forced = false;
									o12.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
									zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o12;
									intx2.vertex = vx3.data.vertex;
									vx3.data = intx2;
									zpp_nape.geom.ZPP_Simple.queue.insert(intx2);
								} else {
									zpp_nape.geom.ZPP_Simple.queue.insert(intx2);
									zpp_nape.geom.ZPP_Simple.ints.insert(intx2);
								}
								if(nxt.id < pre1.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(nxt.id,pre1.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(pre1.id,nxt.id,true));
							} else {
								var x2 = ex2.data;
								if(x2.segment != intx2.segment || intx2.segment2 != x2.segment2) throw "corner case 2, shiiiit.";
								var o13 = intx2.vertex;
								o13.links.clear();
								o13.node = null;
								o13.forced = false;
								o13.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o13;
								var o14 = intx2;
								o14.vertex = null;
								o14.segment = o14.segment2 = null;
								o14.node = null;
								o14.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
								zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o14;
							}
						} else {
							var o15 = intx2.vertex;
							o15.links.clear();
							o15.node = null;
							o15.forced = false;
							o15.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o15;
							var o16 = intx2;
							o16.vertex = null;
							o16.segment = o16.segment2 = null;
							o16.node = null;
							o16.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o16;
						}
					}
				}
			}
		} else {
			var intx3 = e.vertex;
			var pnull = intx3.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew;
			anew = (function($this) {
				var $r;
				var cur7 = a.vertices.parent;
				while(cur7 != null) if(a.vertices.lt(intx3,cur7.data)) cur7 = cur7.prev; else if(a.vertices.lt(cur7.data,intx3)) cur7 = cur7.next; else break;
				$r = cur7;
				return $r;
			}(this)) == null;
			var bnew;
			bnew = (function($this) {
				var $r;
				var cur8 = b.vertices.parent;
				while(cur8 != null) if(b.vertices.lt(intx3,cur8.data)) cur8 = cur8.prev; else if(b.vertices.lt(cur8.data,intx3)) cur8 = cur8.next; else break;
				$r = cur8;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert(intx3);
				var naleft;
				if(intx3 == a.left) naleft = intx3; else naleft = a.vertices.predecessor_node(aint).data;
				var naright;
				if(intx3 == a.right) naright = intx3; else naright = a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx3 != naleft) naleft.links.insert(intx3);
				naright.links.remove(naleft);
				if(intx3 != naright) naright.links.insert(intx3);
				if(intx3 != naleft) intx3.links.insert(naleft);
				if(intx3 != naright) intx3.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert(intx3);
				var nbleft;
				if(intx3 == b.left) nbleft = intx3; else nbleft = b.vertices.predecessor_node(bint).data;
				var nbright;
				if(intx3 == b.right) nbright = intx3; else nbright = b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx3 != nbleft) nbleft.links.insert(intx3);
				nbright.links.remove(nbleft);
				if(intx3 != nbright) nbright.links.insert(intx3);
				if(intx3 != nbleft) intx3.links.insert(nbleft);
				if(intx3 != nbright) intx3.links.insert(nbright);
			}
			if(pnull) intx3.node = zpp_nape.geom.ZPP_Simple.vertices.insert(intx3);
			intx3.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_nape.geom.ZPP_Simple.inthash.has(b.next.id,b.id):zpp_nape.geom.ZPP_Simple.inthash.has(b.id,b.next.id))) {
				var intx4 = zpp_nape.geom.ZPP_Simple.sweep.intersection(b.next,b);
				if(intx4 != null) {
					if(intx4.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex3;
						var cur9 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur9 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx4,cur9.data)) cur9 = cur9.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur9.data,intx4)) cur9 = cur9.next; else break;
						ex3 = cur9;
						if(ex3 == null) {
							var vx4;
							var cur10 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur10 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx4,cur10.data)) cur10 = cur10.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur10.data,intx4)) cur10 = cur10.next; else break;
							vx4 = cur10;
							if(vx4 != null) {
								var o17 = intx4.vertex;
								o17.links.clear();
								o17.node = null;
								o17.forced = false;
								o17.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o17;
								intx4.vertex = vx4.data.vertex;
								vx4.data = intx4;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx4);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx4);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx4);
							}
							if(b.next.id < b.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.next.id,b.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.id,b.next.id,true));
						} else {
							var x3 = ex3.data;
							if(x3.segment != intx4.segment || intx4.segment2 != x3.segment2) throw "corner case 2, shiiiit.";
							var o18 = intx4.vertex;
							o18.links.clear();
							o18.node = null;
							o18.forced = false;
							o18.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o18;
							var o19 = intx4;
							o19.vertex = null;
							o19.segment = o19.segment2 = null;
							o19.node = null;
							o19.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o19;
						}
					} else {
						var o20 = intx4.vertex;
						o20.links.clear();
						o20.node = null;
						o20.forced = false;
						o20.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o20;
						var o21 = intx4;
						o21.vertex = null;
						o21.segment = o21.segment2 = null;
						o21.node = null;
						o21.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o21;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(a.id,a.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(a.prev.id,a.id))) {
				var intx5 = zpp_nape.geom.ZPP_Simple.sweep.intersection(a,a.prev);
				if(intx5 != null) {
					if(intx5.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex4;
						var cur11 = zpp_nape.geom.ZPP_Simple.queue.parent;
						while(cur11 != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx5,cur11.data)) cur11 = cur11.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur11.data,intx5)) cur11 = cur11.next; else break;
						ex4 = cur11;
						if(ex4 == null) {
							var vx5;
							var cur12 = zpp_nape.geom.ZPP_Simple.ints.parent;
							while(cur12 != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx5,cur12.data)) cur12 = cur12.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur12.data,intx5)) cur12 = cur12.next; else break;
							vx5 = cur12;
							if(vx5 != null) {
								var o22 = intx5.vertex;
								o22.links.clear();
								o22.node = null;
								o22.forced = false;
								o22.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o22;
								intx5.vertex = vx5.data.vertex;
								vx5.data = intx5;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx5);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx5);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx5);
							}
							if(a.id < a.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.id,a.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.prev.id,a.id,true));
						} else {
							var x4 = ex4.data;
							if(x4.segment != intx5.segment || intx5.segment2 != x4.segment2) throw "corner case 2, shiiiit.";
							var o23 = intx5.vertex;
							o23.links.clear();
							o23.node = null;
							o23.forced = false;
							o23.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o23;
							var o24 = intx5;
							o24.vertex = null;
							o24.segment = o24.segment2 = null;
							o24.node = null;
							o24.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o24;
						}
					} else {
						var o25 = intx5.vertex;
						o25.links.clear();
						o25.node = null;
						o25.forced = false;
						o25.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o25;
						var o26 = intx5;
						o26.vertex = null;
						o26.segment = o26.segment2 = null;
						o26.node = null;
						o26.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o26;
					}
				}
			}
			zpp_nape.geom.ZPP_Simple.ints.remove(e);
		}
		var o27 = e;
		o27.vertex = null;
		o27.segment = o27.segment2 = null;
		o27.node = null;
		o27.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o27;
	}
	var _g1 = 0;
	var _g = zpp_nape.geom.ZPP_Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_nape.geom.ZPP_Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t1 = n.hnext;
			n.hnext = null;
			var o28 = n;
			o28.next = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
			zpp_nape.util.Hashable2_Boolfalse.zpp_pool = o28;
			n = t1;
		}
		zpp_nape.geom.ZPP_Simple.inthash.table[i] = null;
	}
	if(rets == null) rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	while(!zpp_nape.geom.ZPP_Simple.vertices.empty()) zpp_nape.geom.ZPP_Simple.clip_polygon(zpp_nape.geom.ZPP_Simple.vertices,rets);
	return rets;
};
zpp_nape.geom.ZPP_Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn;
	if(pren.prev == null) nxtn = pren.next; else nxtn = pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux = 0.0;
		var uy = 0.0;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx = 0.0;
		var vy = 0.0;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	var obj = zpp_nape.geom.ZPP_GeomVert.get(cur.x,cur.y);
	if(ret == null) ret = obj.prev = obj.next = obj; else {
		obj.prev = ret;
		obj.next = ret.next;
		ret.next.prev = obj;
		ret.next = obj;
	}
	ret = obj;
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			break;
		}
		var obj1 = zpp_nape.geom.ZPP_GeomVert.get(nxt.x,nxt.y);
		if(ret == null) ret = obj1.prev = obj1.next = obj1; else {
			obj1.prev = ret;
			obj1.next = ret.next;
			ret.next.prev = obj1;
			ret.next = obj1;
		}
		ret = obj1;
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o1 = cur;
				o1.links.clear();
				o1.node = null;
				o1.forced = false;
				o1.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o1;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						var ux1 = 0.0;
						var uy1 = 0.0;
						ux1 = nxt.x - cur.x;
						uy1 = nxt.y - cur.y;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = p.x - nxt.x;
						vy1 = p.y - nxt.y;
						minl = vy1 * ux1 - vx1 * uy1;
					} else {
						var nleft;
						var ux2 = 0.0;
						var uy2 = 0.0;
						ux2 = nxt.x - cur.x;
						uy2 = nxt.y - cur.y;
						var vx2 = 0.0;
						var vy2 = 0.0;
						vx2 = p.x - nxt.x;
						vy2 = p.y - nxt.y;
						nleft = vy2 * ux2 - vx2 * uy2;
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft;
							var ux3 = 0.0;
							var uy3 = 0.0;
							ux3 = nxt.x - p.x;
							uy3 = nxt.y - p.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = min.x - nxt.x;
							vy3 = min.y - nxt.y;
							pleft = vy3 * ux3 - vx3 * uy3;
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o2 = cur;
				o2.links.clear();
				o2.node = null;
				o2.forced = false;
				o2.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o2;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o3 = fst;
	o3.links.clear();
	o3.node = null;
	o3.forced = false;
	o3.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
	zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o3;
	rets.add(ret);
};
zpp_nape.geom.ZPP_Simple.isSimple = function(poly) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	var vertices = zpp_nape.geom.ZPP_Simple.list_vertices;
	if(vertices == null) vertices = zpp_nape.geom.ZPP_Simple.list_vertices = new zpp_nape.util.ZNPList_ZPP_SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = zpp_nape.geom.ZPP_Simple.list_queue;
	if(queue == null) queue = zpp_nape.geom.ZPP_Simple.list_queue = new zpp_nape.util.ZNPList_ZPP_SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v1 = cx_ite.elt;
		var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
		var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v1));
		e1.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = e2.segment = zpp_nape.geom.ZPP_SimpleSeg.get(u,v1);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = e2.segment = zpp_nape.geom.ZPP_SimpleSeg.get(v1,u);
			return $r;
		}(this));
		u = v1;
		cx_ite = cx_ite.next;
	}
	var v2 = vertices.head.elt;
	var e11 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
	var e21 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v2));
	e11.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e11,e21)?(function($this) {
		var $r;
		e11.type = 1;
		e21.type = 2;
		$r = e21.segment = zpp_nape.geom.ZPP_SimpleSeg.get(u,v2);
		return $r;
	}(this)):(function($this) {
		var $r;
		e11.type = 2;
		e21.type = 1;
		$r = e21.segment = zpp_nape.geom.ZPP_SimpleSeg.get(v2,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_nape.geom.ZPP_Simple.sweep.add(seg);
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.next) || zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_nape.geom.ZPP_Simple.sweep.remove(seg);
			var o = seg;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o1 = e;
		o1.vertex = null;
		o1.segment = o1.segment2 = null;
		o1.node = null;
		o1.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o1;
	}
	while(!(queue.head == null)) {
		var e3 = queue.pop_unsafe();
		if(e3.type == 2) {
			var o2 = e3.segment;
			o2.left = o2.right = null;
			o2.prev = null;
			o2.node = null;
			o2.vertices.clear();
			o2.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o2;
		}
		var o3 = e3;
		o3.vertex = null;
		o3.segment = o3.segment2 = null;
		o3.node = null;
		o3.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o3;
	}
	zpp_nape.geom.ZPP_Simple.sweep.clear();
	while(!(vertices.head == null)) {
		var o4 = vertices.pop_unsafe();
		o4.links.clear();
		o4.node = null;
		o4.forced = false;
		o4.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o4;
	}
	return ret;
};
zpp_nape.geom.ZPP_Simple.prototype.__class__ = zpp_nape.geom.ZPP_Simple;
zpp_nape.geom.ZPP_SimplifyV = $hxClasses['zpp_nape.geom.ZPP_SimplifyV'] = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_nape.geom.ZPP_SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
zpp_nape.geom.ZPP_SimplifyV.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyV.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyV(); else {
		ret = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
};
zpp_nape.geom.ZPP_SimplifyV.prototype.x = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.y = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.next = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.prev = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.flag = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.forced = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.free = function() {
};
zpp_nape.geom.ZPP_SimplifyV.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_SimplifyV.prototype.__class__ = zpp_nape.geom.ZPP_SimplifyV;
zpp_nape.geom.ZPP_SimplifyP = $hxClasses['zpp_nape.geom.ZPP_SimplifyP'] = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
zpp_nape.geom.ZPP_SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
zpp_nape.geom.ZPP_SimplifyP.get = function(min,max) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyP(); else {
		ret = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.min = min;
	ret.max = max;
	return ret;
};
zpp_nape.geom.ZPP_SimplifyP.prototype.next = null;
zpp_nape.geom.ZPP_SimplifyP.prototype.min = null;
zpp_nape.geom.ZPP_SimplifyP.prototype.max = null;
zpp_nape.geom.ZPP_SimplifyP.prototype.free = function() {
	this.min = this.max = null;
};
zpp_nape.geom.ZPP_SimplifyP.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_SimplifyP.prototype.__class__ = zpp_nape.geom.ZPP_SimplifyP;
zpp_nape.geom.ZPP_Simplify = $hxClasses['zpp_nape.geom.ZPP_Simplify'] = function() { };
zpp_nape.geom.ZPP_Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
zpp_nape.geom.ZPP_Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
};
zpp_nape.geom.ZPP_Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
};
zpp_nape.geom.ZPP_Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return zpp_nape.geom.ZPP_VecMath.vec_dsq(v.x,v.y,b.x,b.y); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
};
zpp_nape.geom.ZPP_Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(zpp_nape.geom.ZPP_Simplify.stack == null) zpp_nape.geom.ZPP_Simplify.stack = new zpp_nape.util.ZNPList_ZPP_SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_nape.geom.ZPP_SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		var obj = v;
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		ret = obj;
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(zpp_nape.geom.ZPP_Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,max));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,max));
			}
		}
	} else zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,fst));
	while(!(zpp_nape.geom.ZPP_Simplify.stack.head == null)) {
		var cur1 = zpp_nape.geom.ZPP_Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_nape.geom.ZPP_Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min1,dv));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			var obj1 = zpp_nape.geom.ZPP_GeomVert.get(ret.x,ret.y);
			if(retp == null) retp = obj1.prev = obj1.next = obj1; else {
				obj1.prev = retp;
				obj1.next = retp.next;
				retp.next.prev = obj1;
				retp.next = obj1;
			}
			retp = obj1;
			retp.forced = ret.forced;
		}
		if(ret != null && ret.prev == ret) {
			ret.next = ret.prev = null;
			var o1 = ret;
			o1.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o1;
			ret = ret = null;
		} else {
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			var o2 = ret;
			o2.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o2;
			ret = null;
			ret = retnodes;
		}
	}
	return retp;
};
zpp_nape.geom.ZPP_Simplify.prototype.__class__ = zpp_nape.geom.ZPP_Simplify;
zpp_nape.geom.ZPP_ToiEvent = $hxClasses['zpp_nape.geom.ZPP_ToiEvent'] = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_nape.geom.ZPP_Vec2();
	this.c2 = new zpp_nape.geom.ZPP_Vec2();
	this.axis = new zpp_nape.geom.ZPP_Vec2();
};
zpp_nape.geom.ZPP_ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_nape.geom.ZPP_ToiEvent.prototype.next = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.alloc = function() {
	this.failed = false;
	this.s1 = this.s2 = null;
	this.arbiter = null;
};
zpp_nape.geom.ZPP_ToiEvent.prototype.free = function() {
};
zpp_nape.geom.ZPP_ToiEvent.prototype.toi = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.s1 = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.s2 = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.arbiter = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.frozen1 = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.frozen2 = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.c1 = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.c2 = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.axis = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.slipped = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.failed = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.kinematic = null;
zpp_nape.geom.ZPP_ToiEvent.prototype.__class__ = zpp_nape.geom.ZPP_ToiEvent;
zpp_nape.geom.ZPP_SweepDistance = $hxClasses['zpp_nape.geom.ZPP_SweepDistance'] = function() { };
zpp_nape.geom.ZPP_SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_nape.geom.ZPP_SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) userAPI = false;
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) ang1 = -ang1;
	var ang2 = b2.angvel;
	if(ang2 < 0) ang2 = -ang2;
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape.Config.dynamicSweepLinearThreshold * nape.Config.dynamicSweepLinearThreshold && angBias < nape.Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			if(userAPI) break;
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				if(userAPI) break;
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_nape.geom.ZPP_SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) ang1 = -ang1;
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_nape.geom.ZPP_SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t1 = new zpp_nape.geom.ZPP_Vec2(); else {
		t1 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t2 = new zpp_nape.geom.ZPP_Vec2(); else {
		t2 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ax = new zpp_nape.geom.ZPP_Vec2(); else {
		ax = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var dist = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,t1,t2,ax,min);
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	var o1 = t2;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o1;
	var o2 = ax;
	if(o2.outer != null) {
		o2.outer.zpp_inner = null;
		o2.outer = null;
	}
	o2._isimmutable = null;
	o2._validate = null;
	o2._invalidate = null;
	o2.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o2;
	return min;
};
zpp_nape.geom.ZPP_SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) upperBound = 1e100;
	if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						var t4 = 0;
						w1.x = v0.x + nx1 * t4;
						w1.y = v0.y + ny1 * t4;
						var t5 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t5;
						w2.y = circle.worldCOMy + ny1 * t5;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t6 = 1.0 / len2;
							nx2 *= t6;
							ny2 *= t6;
						}
						var t7 = 0;
						w1.x = v1.x + nx2 * t7;
						w1.y = v1.y + ny2 * t7;
						var t8 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t8;
						w2.y = circle.worldCOMy + ny2 * t8;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t9 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t9;
					w2.y = circle.worldCOMy + a0.gnormy * t9;
					var t10 = -best;
					w1.x = w2.x + a0.gnormx * t10;
					w1.y = w2.y + a0.gnormy * t10;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) min = k;
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) min1 = k1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q1;
					var q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) t11 = 0; else if(t11 > 1) t11 = 1;
						if(t21 < 0) t21 = 0; else if(t21 > 1) t21 = 1;
						if(s11 < 0) s11 = 0; else if(s11 > 1) s11 = 1;
						if(s21 < 0) s21 = 0; else if(s21 > 1) s21 = 1;
						var f1x = 0.0;
						var f1y = 0.0;
						var t12 = t11;
						f1x = v01.x + vx * t12;
						f1y = v01.y + vy * t12;
						var f2x = 0.0;
						var f2y = 0.0;
						var t13 = t21;
						f2x = v01.x + vx * t13;
						f2y = v01.y + vy * t13;
						var g1x = 0.0;
						var g1y = 0.0;
						var t14 = s11;
						g1x = q0.x + qx * t14;
						g1y = q0.y + qy * t14;
						var g2x = 0.0;
						var g2y = 0.0;
						var t15 = s21;
						g2x = q0.x + qx * t15;
						g2y = q0.y + qy * t15;
						var d1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g1x,g1y,v01.x,v01.y);
						var e2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g2x,g2y,v11.x,v11.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t16 = 1.0 / best1;
							axis.x *= t16;
							axis.y *= t16;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t17 = (-ax.tp1 - d0) * den;
						if(t17 > nape.Config.epsilon) {
							var t18 = t17;
							c0x += dvx * t18;
							c0y += dvy * t18;
						}
						var t19 = (-ax.tp0 - d11) * den;
						if(t19 < -nape.Config.epsilon) {
							var t20 = t19;
							c1x += dvx * t20;
							c1y += dvy * t20;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t22 = -c0d;
							w1.x = w2.x + ax.gnormx * t22;
							w1.y = w2.y + ax.gnormy * t22;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t23 = -c1d;
							w1.x = w2.x + ax.gnormx * t23;
							w1.y = w2.y + ax.gnormy * t23;
							return c1d;
						}
					}
				} else return upperBound;
			} else return upperBound;
		}
	}
};
zpp_nape.geom.ZPP_SweepDistance.prototype.__class__ = zpp_nape.geom.ZPP_SweepDistance;
zpp_nape.geom.ZPP_PartitionPair = $hxClasses['zpp_nape.geom.ZPP_PartitionPair'] = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
zpp_nape.geom.ZPP_PartitionPair.__name__ = ["zpp_nape","geom","ZPP_PartitionPair"];
zpp_nape.geom.ZPP_PartitionPair.get = function(a,b) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionPair(); else {
		ret = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_nape.geom.ZPP_PartitionPair.edge_lt = function(a,b) {
	return a.id < b.id || a.id == b.id && a.di < b.di;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.next = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.elem = function() {
	return this;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.begin = function() {
	return this.next;
};
zpp_nape.geom.ZPP_PartitionPair.prototype._inuse = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.modified = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.pushmod = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.length = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_add = function(o) {
	var temp;
	o._inuse = true;
	temp = o;
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.geom.ZPP_PartitionPair.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_insert = function(cur,o) {
	var temp;
	o._inuse = true;
	temp = o;
	if(cur == null) {
		temp.next = this.next;
		this.next = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.geom.ZPP_PartitionPair.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.clear = function() {
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_clear = function() {
};
zpp_nape.geom.ZPP_PartitionPair.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.size = function() {
	return this.length;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.geom.ZPP_PartitionPair.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		var npite = cx_ite;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.front = function() {
	return this.next;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it; else return null;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.free = function() {
	this.a = this.b = null;
	this.node = null;
};
zpp_nape.geom.ZPP_PartitionPair.prototype.alloc = function() {
};
zpp_nape.geom.ZPP_PartitionPair.prototype.a = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.b = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.id = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.di = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.node = null;
zpp_nape.geom.ZPP_PartitionPair.prototype.__class__ = zpp_nape.geom.ZPP_PartitionPair;
zpp_nape.geom.ZPP_Triangular = $hxClasses['zpp_nape.geom.ZPP_Triangular'] = function() { };
zpp_nape.geom.ZPP_Triangular.__name__ = ["zpp_nape","geom","ZPP_Triangular"];
zpp_nape.geom.ZPP_Triangular.lt = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_nape.geom.ZPP_Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
};
zpp_nape.geom.ZPP_Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	if((function($this) {
		var $r;
		{
			ux = C.x - B.x;
			uy = C.y - B.y;
		}
		{
			vx = B.x - A.x;
			vy = B.y - A.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = D.x - C.x;
			uy = D.y - C.y;
		}
		{
			vx = C.x - B.x;
			vy = C.y - B.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = A.x - D.x;
			uy = A.y - D.y;
		}
		{
			vx = D.x - C.x;
			vy = D.y - C.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = B.x - A.x;
			uy = B.y - A.y;
		}
		{
			vx = A.x - D.x;
			vy = A.y - D.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this))) return true;
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
	return B.x * (C.y * D.mag - C.mag * D.y) + B.y * (C.mag * D.x - C.x * D.mag) + B.mag * (C.x * D.y - C.y * D.x) + A.x * (C.mag * D.y - C.y * D.mag + B.mag * (C.y - D.y) + B.y * (D.mag - C.mag)) + A.y * (C.x * D.mag - C.mag * D.x + B.mag * (D.x - C.x) + B.x * (C.mag - D.mag)) + A.mag * (C.y * D.x - C.x * D.y + B.x * (D.y - C.y) + B.y * (C.x - D.x)) > 0;
};
zpp_nape.geom.ZPP_Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.edgeSet == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) zpp_nape.geom.ZPP_Triangular.edgeSet = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			zpp_nape.geom.ZPP_Triangular.edgeSet = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = zpp_nape.geom.ZPP_Triangular.edgeSet.next;
			zpp_nape.geom.ZPP_Triangular.edgeSet.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Triangular.edgeSet.lt = zpp_nape.geom.ZPP_PartitionPair.edge_lt;
		zpp_nape.geom.ZPP_Triangular.edgeSet.swapped = zpp_nape.geom.ZPP_PartitionPair.edge_swap;
	}
	var edgeStack;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) edgeStack = new zpp_nape.geom.ZPP_PartitionPair(); else {
		edgeStack = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	null;
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var q0 = p1.next;
			p1.diagonals.reverse();
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p1.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				var q1;
				if(cx_ite.next == null) q1 = p1.prev; else q1 = cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Triangular.delaunay(p1,q0,q,q1)) {
					var edge = zpp_nape.geom.ZPP_PartitionPair.get(p1,q);
					edgeStack.add(edge);
					edge.node = zpp_nape.geom.ZPP_Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
	while(!(edgeStack.next == null)) {
		var edge1 = edgeStack.pop_unsafe();
		var A = edge1.a;
		var C = edge1.b;
		var B = A.next;
		var D = null;
		var cx_ite1 = A.diagonals.head;
		while(cx_ite1 != null) {
			var p2 = cx_ite1.elt;
			if(p2 == C) {
				cx_ite1 = cx_ite1.next;
				if(cx_ite1 == null) D = A.prev; else D = cx_ite1.elt;
				break;
			}
			B = p2;
			cx_ite1 = cx_ite1.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) B.diagonals.add(D); else {
			var cx_ite2 = B.diagonals.head;
			while(cx_ite2 != null) {
				var p3 = cx_ite2.elt;
				if(p3 == C) {
					B.diagonals.insert(cx_ite2,D);
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
		if(A == D.next) D.diagonals.add(B); else {
			var cx_ite3 = D.diagonals.head;
			while(cx_ite3 != null) {
				var p4 = cx_ite3.elt;
				if(p4 == A) {
					D.diagonals.insert(cx_ite3,B);
					break;
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		zpp_nape.geom.ZPP_Triangular.edgeSet.remove_node(edge1.node);
		var o = edge1;
		o.a = o.b = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o;
	}
	var o1 = edgeStack;
	o1.a = o1.b = null;
	o1.node = null;
	o1.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
	zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o1;
};
zpp_nape.geom.ZPP_Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) min = p;
			if(max.y < p.y || max.y == p.y && max.x < p.x) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.queue == null) zpp_nape.geom.ZPP_Triangular.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var rp = max.prev;
	var lp = max.next;
	zpp_nape.geom.ZPP_Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		zpp_nape.geom.ZPP_Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		zpp_nape.geom.ZPP_Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	zpp_nape.geom.ZPP_Triangular.queue.add(min);
	if(zpp_nape.geom.ZPP_Triangular.stack == null) zpp_nape.geom.ZPP_Triangular.stack = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	zpp_nape.geom.ZPP_Triangular.stack.add(zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe());
	var pre = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
	zpp_nape.geom.ZPP_Triangular.stack.add(pre);
	while(true) {
		var p1 = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
		if(zpp_nape.geom.ZPP_Triangular.queue.head == null) break;
		if(p1.rightchain != zpp_nape.geom.ZPP_Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
				if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
				P.add_diagonal(s,p1);
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(pre);
		} else {
			var q = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
				var s1 = zpp_nape.geom.ZPP_Triangular.stack.head.elt;
				var right = zpp_nape.geom.ZPP_Triangular.right_turn(s1,q,p1);
				if(p1.rightchain && right >= 0 || !p1.rightchain && right <= 0) break;
				P.add_diagonal(s1,p1);
				q = s1;
				zpp_nape.geom.ZPP_Triangular.stack.pop();
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(q);
		}
		zpp_nape.geom.ZPP_Triangular.stack.add(p1);
		pre = p1;
	}
	if(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
		zpp_nape.geom.ZPP_Triangular.stack.pop();
		while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
			var s2 = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
			P.add_diagonal(max,s2);
		}
	}
	return P;
};
zpp_nape.geom.ZPP_Triangular.prototype.__class__ = zpp_nape.geom.ZPP_Triangular;
zpp_nape.geom.ZPP_Vec2 = $hxClasses['zpp_nape.geom.ZPP_Vec2'] = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_nape.geom.ZPP_Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Vec2(); else {
		ret = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype._invalidate = null;
zpp_nape.geom.ZPP_Vec2.prototype._validate = null;
zpp_nape.geom.ZPP_Vec2.prototype.validate = function() {
	if(this._validate != null) this._validate();
};
zpp_nape.geom.ZPP_Vec2.prototype.invalidate = function() {
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.geom.ZPP_Vec2.prototype._immutable = null;
zpp_nape.geom.ZPP_Vec2.prototype._isimmutable = null;
zpp_nape.geom.ZPP_Vec2.prototype.immutable = function() {
	if(this._immutable) throw "Error: Vec2 is immutable";
	if(this._isimmutable != null) this._isimmutable();
};
zpp_nape.geom.ZPP_Vec2.prototype.outer = null;
zpp_nape.geom.ZPP_Vec2.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.geom.Vec2();
		var o = this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.geom.ZPP_Vec2.prototype.weak = null;
zpp_nape.geom.ZPP_Vec2.prototype.free = function() {
	if(this.outer != null) {
		this.outer.zpp_inner = null;
		this.outer = null;
	}
	this._isimmutable = null;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_Vec2.prototype.alloc = function() {
	this.weak = false;
};
zpp_nape.geom.ZPP_Vec2.prototype.next = null;
zpp_nape.geom.ZPP_Vec2.prototype.elem = function() {
	return this;
};
zpp_nape.geom.ZPP_Vec2.prototype.begin = function() {
	return this.next;
};
zpp_nape.geom.ZPP_Vec2.prototype._inuse = null;
zpp_nape.geom.ZPP_Vec2.prototype.modified = null;
zpp_nape.geom.ZPP_Vec2.prototype.pushmod = null;
zpp_nape.geom.ZPP_Vec2.prototype.length = null;
zpp_nape.geom.ZPP_Vec2.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.geom.ZPP_Vec2.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_add = function(o) {
	var temp;
	o._inuse = true;
	temp = o;
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.geom.ZPP_Vec2.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.geom.ZPP_Vec2.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_insert = function(cur,o) {
	var temp;
	o._inuse = true;
	temp = o;
	if(cur == null) {
		temp.next = this.next;
		this.next = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.geom.ZPP_Vec2.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.geom.ZPP_Vec2.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.geom.ZPP_Vec2.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.geom.ZPP_Vec2.prototype.clear = function() {
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_clear = function() {
};
zpp_nape.geom.ZPP_Vec2.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.geom.ZPP_Vec2.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.geom.ZPP_Vec2.prototype.size = function() {
	return this.length;
};
zpp_nape.geom.ZPP_Vec2.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.geom.ZPP_Vec2.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		var npite = cx_ite;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.front = function() {
	return this.next;
};
zpp_nape.geom.ZPP_Vec2.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.geom.ZPP_Vec2.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it; else return null;
};
zpp_nape.geom.ZPP_Vec2.prototype.x = null;
zpp_nape.geom.ZPP_Vec2.prototype.y = null;
zpp_nape.geom.ZPP_Vec2.prototype.copy = function() {
	return zpp_nape.geom.ZPP_Vec2.get(this.x,this.y,null);
};
zpp_nape.geom.ZPP_Vec2.prototype.toString = function() {
	return "{ x: " + this.x + " y: " + this.y + " }";
};
zpp_nape.geom.ZPP_Vec2.prototype.__class__ = zpp_nape.geom.ZPP_Vec2;
zpp_nape.geom.ZPP_Vec3 = $hxClasses['zpp_nape.geom.ZPP_Vec3'] = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
zpp_nape.geom.ZPP_Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_nape.geom.ZPP_Vec3.prototype.outer = null;
zpp_nape.geom.ZPP_Vec3.prototype.x = null;
zpp_nape.geom.ZPP_Vec3.prototype.y = null;
zpp_nape.geom.ZPP_Vec3.prototype.z = null;
zpp_nape.geom.ZPP_Vec3.prototype.immutable = null;
zpp_nape.geom.ZPP_Vec3.prototype._validate = null;
zpp_nape.geom.ZPP_Vec3.prototype.validate = function() {
	if(this._validate != null) this._validate();
};
zpp_nape.geom.ZPP_Vec3.prototype.__class__ = zpp_nape.geom.ZPP_Vec3;
zpp_nape.geom.ZPP_VecMath = $hxClasses['zpp_nape.geom.ZPP_VecMath'] = function() { };
zpp_nape.geom.ZPP_VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
zpp_nape.geom.ZPP_VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
zpp_nape.geom.ZPP_VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
};
zpp_nape.geom.ZPP_VecMath.prototype.__class__ = zpp_nape.geom.ZPP_VecMath;
if(!zpp_nape.phys) zpp_nape.phys = {};
zpp_nape.phys.ZPP_Interactor = $hxClasses['zpp_nape.phys.ZPP_Interactor'] = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_nape.ZPP_ID.Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CallbackSet();
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.phys.ZPP_Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_nape.phys.ZPP_Interactor.get = function(i1,i2) {
	var id;
	if(i1.id < i2.id) id = i1.id; else id = i2.id;
	var di;
	if(i1.id < i2.id) di = i2.id; else di = i1.id;
	var xs;
	if(i1.cbsets.length < i2.cbsets.length) xs = i1.cbsets; else xs = i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.phys.ZPP_Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.outer_i = null;
zpp_nape.phys.ZPP_Interactor.prototype.id = null;
zpp_nape.phys.ZPP_Interactor.prototype.userData = null;
zpp_nape.phys.ZPP_Interactor.prototype.ishape = null;
zpp_nape.phys.ZPP_Interactor.prototype.ibody = null;
zpp_nape.phys.ZPP_Interactor.prototype.icompound = null;
zpp_nape.phys.ZPP_Interactor.prototype.isShape = function() {
	return this.ishape != null;
};
zpp_nape.phys.ZPP_Interactor.prototype.isBody = function() {
	return this.ibody != null;
};
zpp_nape.phys.ZPP_Interactor.prototype.isCompound = function() {
	return this.icompound != null;
};
zpp_nape.phys.ZPP_Interactor.prototype.__iaddedToSpace = function() {
	if(this.group != null) this.group.interactors.add(this);
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.interactors.add(this);
		cx_ite = cx_ite.next;
	}
	this.alloc_cbSet();
};
zpp_nape.phys.ZPP_Interactor.prototype.__iremovedFromSpace = function() {
	if(this.group != null) this.group.interactors.remove(this);
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.interactors.remove(this);
		cx_ite = cx_ite.next;
	}
	this.dealloc_cbSet();
};
zpp_nape.phys.ZPP_Interactor.prototype.wake = function() {
	if(this.ishape != null) {
		var body = this.ishape.body;
		if(body != null && body.space != null) body.space.non_inlined_wake(body);
		true;
	} else if(this.ibody != null) {
		if(this.ibody.space != null) this.ibody.space.non_inlined_wake(this.ibody); else false;
	} else {
		if(this.icompound.space != null) this.icompound.space.wakeCompound(this.icompound);
		true;
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.cbsets = null;
zpp_nape.phys.ZPP_Interactor.prototype.getSpace = function() {
	if(this.ishape != null) {
		if(this.ishape.body == null) return null; else return this.ishape.body.space;
	} else if(this.ibody != null) return this.ibody.space; else return this.icompound.space;
};
zpp_nape.phys.ZPP_Interactor.prototype.group = null;
zpp_nape.phys.ZPP_Interactor.prototype.cbTypes = null;
zpp_nape.phys.ZPP_Interactor.prototype.cbSet = null;
zpp_nape.phys.ZPP_Interactor.prototype.wrap_cbTypes = null;
zpp_nape.phys.ZPP_Interactor.prototype.setupcbTypes = function() {
	this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
	this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
	this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
	this.wrap_cbTypes.zpp_inner.dontremove = true;
	this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
};
zpp_nape.phys.ZPP_Interactor.prototype.immutable_cbTypes = function() {
	this.immutable_midstep("Interactor::cbTypes");
};
zpp_nape.phys.ZPP_Interactor.prototype.wrap_cbTypes_subber = function(pcb) {
	var cb = pcb.zpp_inner;
	if(this.cbTypes.has(cb)) {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if(space != null) {
			this.dealloc_cbSet();
			cb.interactors.remove(this);
		}
		this.cbTypes.remove(cb);
		if(space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.wrap_cbTypes_adder = function(cb) {
	this.insert_cbtype(cb.zpp_inner);
	return false;
};
zpp_nape.phys.ZPP_Interactor.prototype.insert_cbtype = function(cb) {
	if(!this.cbTypes.has(cb)) {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if(space != null) {
			this.dealloc_cbSet();
			cb.interactors.add(this);
		}
		var pre = null;
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(cb.id < j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.cbTypes.inlined_insert(pre,cb);
		if(space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.alloc_cbSet = function() {
	var space;
	if(this.ishape != null) {
		if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
	} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
	if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
		this.cbSet.count++;
		this.cbSet.interactors.add(this);
		this.cbSet.validate();
		space.freshInteractorType(this);
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.dealloc_cbSet = function() {
	var space;
	if(this.ishape != null) {
		if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
	} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
	if(this.cbSet != null) {
		this.cbSet.interactors.remove(this);
		space.nullInteractorType(this);
		if(--this.cbSet.count == 0) {
			space.cbsets.remove(this.cbSet);
			var o = this.cbSet;
			o.free();
			o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
		}
		this.cbSet = null;
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.setGroup = function(group) {
	if(this.group != group) {
		var inspace;
		inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
		if(inspace && this.group != null) this.group.interactors.remove(this);
		this.group = group;
		if(inspace && group != null) group.interactors.add(this);
		if(inspace) {
			if(this.ishape != null) this.ishape.body.wake(); else if(this.ibody != null) this.ibody.wake(); else this.icompound.wake();
		}
	}
};
zpp_nape.phys.ZPP_Interactor.prototype.immutable_midstep = function(n) {
	if(this.ibody != null) this.ibody.__immutable_midstep(n); else if(this.ishape != null) this.ishape.__immutable_midstep(n); else this.icompound.__imutable_midstep(n);
};
zpp_nape.phys.ZPP_Interactor.prototype.lookup_group = function() {
	var cur = this;
	while(cur != null && cur.group == null) if(cur.ishape != null) cur = cur.ishape.body; else if(cur.icompound != null) cur = cur.icompound.compound; else cur = cur.ibody.compound;
	if(cur == null) return null; else return cur.group;
};
zpp_nape.phys.ZPP_Interactor.prototype.copyto = function(ret) {
	ret.zpp_inner_i.group = this.group;
	var _g = this.outer_i.get_cbTypes().iterator();
	while(_g.hasNext()) {
		var cb;
		_g.zpp_critical = false;
		cb = _g.zpp_inner.at(_g.zpp_i++);
		((function($this) {
			var $r;
			if(ret.zpp_inner_i.wrap_cbTypes == null) ret.zpp_inner_i.setupcbTypes();
			$r = ret.zpp_inner_i.wrap_cbTypes;
			return $r;
		}(this))).add(cb);
	}
	if(this.userData != null) ret.zpp_inner_i.userData = Reflect.copy(this.userData);
};
zpp_nape.phys.ZPP_Interactor.prototype.__class__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Body = $hxClasses['zpp_nape.phys.ZPP_Body'] = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Math.POSITIVE_INFINITY;
	this.pre_posy = Math.POSITIVE_INFINITY;
	this.pre_rot = Math.POSITIVE_INFINITY;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
zpp_nape.phys.ZPP_Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_nape.phys.ZPP_Body.__super__ = zpp_nape.phys.ZPP_Interactor;
for(var k in zpp_nape.phys.ZPP_Interactor.prototype ) zpp_nape.phys.ZPP_Body.prototype[k] = zpp_nape.phys.ZPP_Interactor.prototype[k];
zpp_nape.phys.ZPP_Body.bodysetlt = function(a,b) {
	return a.id < b.id;
};
zpp_nape.phys.ZPP_Body.__static = function() {
	var ret = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_nape.phys.ZPP_Body.prototype.outer = null;
zpp_nape.phys.ZPP_Body.prototype.world = null;
zpp_nape.phys.ZPP_Body.prototype.type = null;
zpp_nape.phys.ZPP_Body.prototype.isStatic = function() {
	return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
};
zpp_nape.phys.ZPP_Body.prototype.isDynamic = function() {
	return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
};
zpp_nape.phys.ZPP_Body.prototype.isKinematic = function() {
	return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
};
zpp_nape.phys.ZPP_Body.prototype.invalidate_type = function() {
	this.invalidate_mass();
	this.invalidate_inertia();
};
zpp_nape.phys.ZPP_Body.prototype.compound = null;
zpp_nape.phys.ZPP_Body.prototype.shapes = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_shapes = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_shapes = function() {
	this.zip_aabb = true;
	this.zip_localCOM = true;
	this.zip_worldCOM = true;
	this.invalidate_mass();
	this.invalidate_inertia();
};
zpp_nape.phys.ZPP_Body.prototype.space = null;
zpp_nape.phys.ZPP_Body.prototype.arbiters = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_arbiters = null;
zpp_nape.phys.ZPP_Body.prototype.constraints = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_constraints = null;
zpp_nape.phys.ZPP_Body.prototype.component = null;
zpp_nape.phys.ZPP_Body.prototype.graph_depth = null;
zpp_nape.phys.ZPP_Body.prototype.init_bodysetlist = function() {
	if(zpp_nape.phys.ZPP_Body.bodyset == null) {
		zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
		zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
		zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
	}
};
zpp_nape.phys.ZPP_Body.prototype.connectedBodies_cont = function(b) {
	if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(b.zpp_inner)) {
		zpp_nape.phys.ZPP_Body.bodystack.add(b.zpp_inner);
		b.zpp_inner.graph_depth = zpp_nape.phys.ZPP_Body.cur_graph_depth + 1;
	}
};
zpp_nape.phys.ZPP_Body.prototype.connectedBodies = function(depth,output) {
	var _g = this;
	if(zpp_nape.phys.ZPP_Body.bodyset == null) {
		zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
		zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
		zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
	}
	null;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	zpp_nape.phys.ZPP_Body.bodystack.add(this);
	zpp_nape.phys.ZPP_Body.bodyset.insert(this);
	this.graph_depth = 0;
	while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
		var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
		if(cur.graph_depth == depth) continue;
		zpp_nape.phys.ZPP_Body.cur_graph_depth = cur.graph_depth;
		var cx_ite = cur.constraints.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			c.outer.visitBodies($bind(this,this.connectedBodies_cont));
			cx_ite = cx_ite.next;
		}
	}
	zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
		if(b != _g) ret.add(b.outer);
	});
	return ret;
};
zpp_nape.phys.ZPP_Body.prototype.interactingBodies = function(arbiter_type,depth,output) {
	var _g = this;
	if(zpp_nape.phys.ZPP_Body.bodyset == null) {
		zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
		zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
		zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
	}
	null;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	zpp_nape.phys.ZPP_Body.bodyset.insert(this);
	zpp_nape.phys.ZPP_Body.bodystack.add(this);
	this.graph_depth = 0;
	while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
		var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
		if(cur.graph_depth == depth) continue;
		var cx_ite = cur.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if((arb.type & arbiter_type) != 0) {
				var other;
				if(arb.b1 == cur) other = arb.b2; else other = arb.b1;
				if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(other)) {
					zpp_nape.phys.ZPP_Body.bodystack.add(other);
					other.graph_depth = cur.graph_depth + 1;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
		if(b != _g) ret.add(b.outer);
	});
	return ret;
};
zpp_nape.phys.ZPP_Body.prototype.atRest = function(dt) {
	if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) return this.component.sleeping; else {
		var linSq = nape.Config.linearSleepThreshold;
		linSq *= linSq;
		var cansleep;
		if(this.velx * this.velx + this.vely * this.vely > linSq) cansleep = false; else if(zpp_nape.geom.ZPP_VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt) cansleep = false; else {
			var dx = 0.0;
			var dy = 0.0;
			dx = this.aabb.maxx - this.aabb.minx;
			dy = this.aabb.maxy - this.aabb.miny;
			var idl = dx * dx + dy * dy;
			var angSq = nape.Config.angularSleepThreshold;
			angSq *= angSq;
			if(4 * this.angvel * this.angvel * idl > angSq) cansleep = false; else {
				var dr = this.rot - this.pre_rot;
				if(dr * dr * idl > angSq * dt * dt) cansleep = false; else cansleep = true;
			}
		}
		if(!cansleep) this.component.waket = this.space.stamp;
		return this.component.waket + nape.Config.sleepDelay < this.space.stamp;
	}
};
zpp_nape.phys.ZPP_Body.prototype.refreshArbiters = function() {
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		arb.invalidated = true;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.phys.ZPP_Body.prototype.sweepTime = null;
zpp_nape.phys.ZPP_Body.prototype.sweep_angvel = null;
zpp_nape.phys.ZPP_Body.prototype.sweepFrozen = null;
zpp_nape.phys.ZPP_Body.prototype.sweepRadius = null;
zpp_nape.phys.ZPP_Body.prototype.bullet = null;
zpp_nape.phys.ZPP_Body.prototype.bulletEnabled = null;
zpp_nape.phys.ZPP_Body.prototype.disableCCD = null;
zpp_nape.phys.ZPP_Body.prototype.sweepIntegrate = function(dt) {
	var delta = dt - this.sweepTime;
	if(delta != 0) {
		this.sweepTime = dt;
		var t = delta;
		this.posx += this.velx * t;
		this.posy += this.vely * t;
		if(this.angvel != 0) this.delta_rot(this.sweep_angvel * delta);
	}
};
zpp_nape.phys.ZPP_Body.prototype.sweepValidate = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
		s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
	} else {
		var p = s.polygon;
		var li = p.lverts.next;
		var cx_ite = p.gverts.next;
		while(cx_ite != null) {
			var g = cx_ite;
			var l = li;
			li = li.next;
			g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
			g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
			cx_ite = cx_ite.next;
		}
		var ite = p.edges.head;
		var cx_ite1 = p.gverts.next;
		var u = cx_ite1;
		cx_ite1 = cx_ite1.next;
		while(cx_ite1 != null) {
			var v = cx_ite1;
			var e = ite.elt;
			ite = ite.next;
			e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
			e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
			e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
			e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
			e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
			u = v;
			cx_ite1 = cx_ite1.next;
		}
		var v1 = p.gverts.next;
		var e1 = ite.elt;
		ite = ite.next;
		e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
		e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
		e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
		e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
		e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
	}
};
zpp_nape.phys.ZPP_Body.prototype.pre_posx = null;
zpp_nape.phys.ZPP_Body.prototype.pre_posy = null;
zpp_nape.phys.ZPP_Body.prototype.posx = null;
zpp_nape.phys.ZPP_Body.prototype.posy = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_pos = null;
zpp_nape.phys.ZPP_Body.prototype.velx = null;
zpp_nape.phys.ZPP_Body.prototype.vely = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_vel = null;
zpp_nape.phys.ZPP_Body.prototype.forcex = null;
zpp_nape.phys.ZPP_Body.prototype.forcey = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_force = null;
zpp_nape.phys.ZPP_Body.prototype.kinvelx = null;
zpp_nape.phys.ZPP_Body.prototype.kinvely = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_kinvel = null;
zpp_nape.phys.ZPP_Body.prototype.svelx = null;
zpp_nape.phys.ZPP_Body.prototype.svely = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_svel = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_pos = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			s.polygon.invalidate_gverts();
			s.polygon.invalidate_gaxi();
		}
		s.invalidate_worldCOM();
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
};
zpp_nape.phys.ZPP_Body.prototype.pos_invalidate = function(pos) {
	this.immutable_midstep("Body::position");
	if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.space != null) throw "Error: Cannot move a static object once inside a Space";
	if(!(this.posx == pos.x && this.posy == pos.y)) {
		this.posx = pos.x;
		this.posy = pos.y;
		this.invalidate_pos();
		this.wake();
	}
};
zpp_nape.phys.ZPP_Body.prototype.pos_validate = function() {
	this.wrap_pos.zpp_inner.x = this.posx;
	this.wrap_pos.zpp_inner.y = this.posy;
};
zpp_nape.phys.ZPP_Body.prototype.vel_invalidate = function(vel) {
	if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Static body cannot have its velocity set.";
	this.velx = vel.x;
	this.vely = vel.y;
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.vel_validate = function() {
	this.wrap_vel.zpp_inner.x = this.velx;
	this.wrap_vel.zpp_inner.y = this.vely;
};
zpp_nape.phys.ZPP_Body.prototype.kinvel_invalidate = function(vel) {
	this.kinvelx = vel.x;
	this.kinvely = vel.y;
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.kinvel_validate = function() {
	this.wrap_kinvel.zpp_inner.x = this.kinvelx;
	this.wrap_kinvel.zpp_inner.y = this.kinvely;
};
zpp_nape.phys.ZPP_Body.prototype.svel_invalidate = function(vel) {
	this.svelx = vel.x;
	this.svely = vel.y;
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.svel_validate = function() {
	this.wrap_svel.zpp_inner.x = this.svelx;
	this.wrap_svel.zpp_inner.y = this.svely;
};
zpp_nape.phys.ZPP_Body.prototype.force_invalidate = function(force) {
	if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Non-dynamic body cannot have force applied.";
	this.forcex = force.x;
	this.forcey = force.y;
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.force_validate = function() {
	this.wrap_force.zpp_inner.x = this.forcex;
	this.wrap_force.zpp_inner.y = this.forcey;
};
zpp_nape.phys.ZPP_Body.prototype.setupPosition = function() {
	this.wrap_pos = nape.geom.Vec2.get(this.posx,this.posy,null);
	this.wrap_pos.zpp_inner._inuse = true;
	if(this.world) this.wrap_pos.zpp_inner._immutable = true; else {
		this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
		this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
	}
};
zpp_nape.phys.ZPP_Body.prototype.setupVelocity = function() {
	this.wrap_vel = nape.geom.Vec2.get(this.velx,this.vely,null);
	this.wrap_vel.zpp_inner._inuse = true;
	if(this.world) this.wrap_vel.zpp_inner._immutable = true; else {
		this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
		this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
	}
};
zpp_nape.phys.ZPP_Body.prototype.setupkinvel = function() {
	this.wrap_kinvel = nape.geom.Vec2.get(this.kinvelx,this.kinvely,null);
	this.wrap_kinvel.zpp_inner._inuse = true;
	if(this.world) this.wrap_kinvel.zpp_inner._immutable = true; else {
		this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
		this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
	}
};
zpp_nape.phys.ZPP_Body.prototype.setupsvel = function() {
	this.wrap_svel = nape.geom.Vec2.get(this.svelx,this.svely,null);
	this.wrap_svel.zpp_inner._inuse = true;
	if(this.world) this.wrap_svel.zpp_inner._immutable = true; else {
		this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
		this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
	}
};
zpp_nape.phys.ZPP_Body.prototype.setupForce = function() {
	this.wrap_force = nape.geom.Vec2.get(this.forcex,this.forcey,null);
	this.wrap_force.zpp_inner._inuse = true;
	if(this.world) this.wrap_force.zpp_inner._immutable = true; else {
		this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
		this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
	}
};
zpp_nape.phys.ZPP_Body.prototype.cvel_validate = function() {
	this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
	this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
	this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
};
zpp_nape.phys.ZPP_Body.prototype.wrapcvel = null;
zpp_nape.phys.ZPP_Body.prototype.setup_cvel = function() {
	var me = this;
	this.wrapcvel = nape.geom.Vec3.get();
	this.wrapcvel.zpp_inner.immutable = true;
	this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
};
zpp_nape.phys.ZPP_Body.prototype.angvel = null;
zpp_nape.phys.ZPP_Body.prototype.torque = null;
zpp_nape.phys.ZPP_Body.prototype.kinangvel = null;
zpp_nape.phys.ZPP_Body.prototype.pre_rot = null;
zpp_nape.phys.ZPP_Body.prototype.rot = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_rot = function() {
	this.zip_axis = true;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			s.polygon.invalidate_gverts();
			s.polygon.invalidate_gaxi();
		}
		s.invalidate_worldCOM();
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
};
zpp_nape.phys.ZPP_Body.prototype.axisx = null;
zpp_nape.phys.ZPP_Body.prototype.axisy = null;
zpp_nape.phys.ZPP_Body.prototype.zip_axis = null;
zpp_nape.phys.ZPP_Body.prototype.validate_axis = function() {
	if(this.zip_axis) {
		this.zip_axis = false;
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
		null;
	}
};
zpp_nape.phys.ZPP_Body.prototype.quick_validate_axis = function() {
	this.axisx = Math.sin(this.rot);
	this.axisy = Math.cos(this.rot);
};
zpp_nape.phys.ZPP_Body.prototype.delta_rot = function(dr) {
	this.rot += dr;
	if(dr * dr > 0.0001) {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
		null;
	} else {
		var d2 = dr * dr;
		var p = 1 - 0.5 * d2;
		var m = 1 - d2 * d2 / 8;
		var nx = (p * this.axisx + dr * this.axisy) * m;
		this.axisy = (p * this.axisy - dr * this.axisx) * m;
		this.axisx = nx;
	}
};
zpp_nape.phys.ZPP_Body.prototype.kinematicDelaySleep = null;
zpp_nape.phys.ZPP_Body.prototype.mass = null;
zpp_nape.phys.ZPP_Body.prototype.zip_mass = null;
zpp_nape.phys.ZPP_Body.prototype.massMode = null;
zpp_nape.phys.ZPP_Body.prototype.imass = null;
zpp_nape.phys.ZPP_Body.prototype.smass = null;
zpp_nape.phys.ZPP_Body.prototype.cmass = null;
zpp_nape.phys.ZPP_Body.prototype.nomove = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_mass = function() {
	this.zip_mass = true;
	this.invalidate_gravMass();
};
zpp_nape.phys.ZPP_Body.prototype.validate_mass = function() {
	var exist = false;
	if(this.zip_mass || this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && exist) {
		this.zip_mass = false;
		if(this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
			this.cmass = 0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				s.refmaterial.density = s.material.density;
				s.validate_area_inertia();
				this.cmass += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
		}
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.nomove) {
			this.mass = this.cmass;
			this.imass = this.smass = 1.0 / this.mass;
		} else {
			this.mass = Math.POSITIVE_INFINITY;
			this.imass = this.smass = 0.0;
		}
		if(exist) this.invalidate_inertia();
	}
};
zpp_nape.phys.ZPP_Body.prototype.gravMass = null;
zpp_nape.phys.ZPP_Body.prototype.zip_gravMass = null;
zpp_nape.phys.ZPP_Body.prototype.gravMassMode = null;
zpp_nape.phys.ZPP_Body.prototype.gravMassScale = null;
zpp_nape.phys.ZPP_Body.prototype.zip_gravMassScale = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_gravMass = function() {
	if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) this.zip_gravMass = true;
	if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true;
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.validate_gravMass = function() {
	if(this.zip_gravMass) {
		this.zip_gravMass = false;
		this.validate_mass();
		if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) {
			this.validate_mass();
			this.gravMass = this.cmass;
		} else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) {
			this.validate_mass();
			this.gravMass = this.cmass * this.gravMassScale;
		}
	}
};
zpp_nape.phys.ZPP_Body.prototype.invalidate_gravMassScale = function() {
	if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true; else this.invalidate_gravMass();
};
zpp_nape.phys.ZPP_Body.prototype.validate_gravMassScale = function() {
	if(this.zip_gravMassScale) {
		this.zip_gravMassScale = false;
		if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) this.gravMassScale = 1.0; else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) {
			this.validate_mass();
			this.gravMassScale = this.gravMass / this.cmass;
		}
	}
};
zpp_nape.phys.ZPP_Body.prototype.inertiaMode = null;
zpp_nape.phys.ZPP_Body.prototype.inertia = null;
zpp_nape.phys.ZPP_Body.prototype.zip_inertia = null;
zpp_nape.phys.ZPP_Body.prototype.cinertia = null;
zpp_nape.phys.ZPP_Body.prototype.iinertia = null;
zpp_nape.phys.ZPP_Body.prototype.sinertia = null;
zpp_nape.phys.ZPP_Body.prototype.norotate = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_inertia = function() {
	this.zip_inertia = true;
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.validate_inertia = function() {
	var exist = false;
	if(this.zip_inertia || this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && exist) {
		this.zip_inertia = false;
		if(this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT) {
			this.cinertia = 0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				s.refmaterial.density = s.material.density;
				s.validate_area_inertia();
				this.cinertia += s.inertia * s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
		}
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.norotate) {
			this.inertia = this.cinertia;
			this.sinertia = this.iinertia = 1.0 / this.inertia;
		} else {
			this.inertia = Math.POSITIVE_INFINITY;
			this.sinertia = this.iinertia = 0;
		}
		if(exist) this.invalidate_inertia();
	}
};
zpp_nape.phys.ZPP_Body.prototype.invalidate_wake = function() {
	this.wake();
};
zpp_nape.phys.ZPP_Body.prototype.aabb = null;
zpp_nape.phys.ZPP_Body.prototype.zip_aabb = null;
zpp_nape.phys.ZPP_Body.prototype.validate_aabb = function() {
	if(this.shapes.head == null) throw "Error: Body bounds only makes sense if it contains shapes";
	if(this.zip_aabb) {
		this.zip_aabb = false;
		this.aabb.minx = Math.POSITIVE_INFINITY;
		this.aabb.miny = Math.POSITIVE_INFINITY;
		this.aabb.maxx = Math.NEGATIVE_INFINITY;
		this.aabb.maxy = Math.NEGATIVE_INFINITY;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_aabb) {
				if(s.body != null) {
					s.zip_aabb = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
				}
			}
			this.aabb.combine(s.aabb);
			cx_ite = cx_ite.next;
		}
	}
};
zpp_nape.phys.ZPP_Body.prototype.invalidate_aabb = function() {
	this.zip_aabb = true;
};
zpp_nape.phys.ZPP_Body.prototype.localCOMx = null;
zpp_nape.phys.ZPP_Body.prototype.localCOMy = null;
zpp_nape.phys.ZPP_Body.prototype.zip_localCOM = null;
zpp_nape.phys.ZPP_Body.prototype.worldCOMx = null;
zpp_nape.phys.ZPP_Body.prototype.worldCOMy = null;
zpp_nape.phys.ZPP_Body.prototype.zip_worldCOM = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_localCOM = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_worldCOM = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_localCOM = function() {
	this.zip_localCOM = true;
	this.zip_worldCOM = true;
};
zpp_nape.phys.ZPP_Body.prototype.invalidate_worldCOM = function() {
	this.zip_worldCOM = true;
};
zpp_nape.phys.ZPP_Body.prototype.validate_localCOM = function() {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		var tempx = 0;
		var tempy = 0;
		var msum = 0.0;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.validate_area_inertia();
			var t = s.area * s.material.density;
			tempx += s.localCOMx * t;
			tempy += s.localCOMy * t;
			msum += s.area * s.material.density;
			cx_ite = cx_ite.next;
		}
		if(msum != 0) {
			var t1 = 1.0 / msum;
			this.localCOMx = tempx * t1;
			this.localCOMy = tempy * t1;
		}
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
		if(this.zip_mass && this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
			this.zip_mass = false;
			this.cmass = msum;
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Math.POSITIVE_INFINITY;
				this.imass = this.smass = 0.0;
			}
		}
	}
};
zpp_nape.phys.ZPP_Body.prototype.validate_worldCOM = function() {
	if(this.zip_worldCOM) {
		this.zip_worldCOM = false;
		this.validate_localCOM();
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
		this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
		this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
		if(this.wrap_worldCOM != null) {
			this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
			this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
		}
	}
};
zpp_nape.phys.ZPP_Body.prototype.getlocalCOM = function() {
	if(this.shapes.head == null) throw "Error: localCOM only makes sense when Body has Shapes";
	this.validate_localCOM();
};
zpp_nape.phys.ZPP_Body.prototype.getworldCOM = function() {
	if(this.shapes.head == null) throw "Error: worldCOM only makes sense when Body has Shapes";
	this.validate_worldCOM();
};
zpp_nape.phys.ZPP_Body.prototype.__immutable_midstep = function(name) {
	if(this.space != null && this.space.midstep) throw "Error: " + name + " cannot be set during a space step()";
};
zpp_nape.phys.ZPP_Body.prototype.clear = function() {
	if(this.space != null) throw "Error: Cannot clear a Body if it is currently being used by a Space!";
	if(!(this.constraints.head == null)) throw "Error: Cannot clear a Body if it is currently being used by a constraint!";
	while(!(this.shapes.head == null)) {
		var s = this.shapes.pop_unsafe();
		s.removedFromBody();
		s.body = null;
	}
	this.invalidate_shapes();
	this.pre_posx = 0;
	this.pre_posy = 0;
	this.posx = 0;
	this.posy = 0;
	this.velx = 0;
	this.vely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.svelx = 0;
	this.svely = 0;
	this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
	this.invalidate_pos();
	this.invalidate_rot();
	this.axisx = 0;
	this.axisy = 1;
	this.zip_axis = false;
	this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
	this.norotate = false;
	this.nomove = false;
};
zpp_nape.phys.ZPP_Body.prototype.aabb_validate = function() {
	if(this.shapes.head == null) throw "Error: bounds only makes sense when Body has shapes";
	this.validate_aabb();
};
zpp_nape.phys.ZPP_Body.prototype.shapes_adder = function(s) {
	if(s.zpp_inner.body != this) {
		if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
		s.zpp_inner.body = this;
		s.zpp_inner.addedToBody();
		if(this.space != null) this.space.added_shape(s.zpp_inner,null);
		if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			s.zpp_inner.polygon.invalidate_gaxi();
			s.zpp_inner.polygon.invalidate_gverts();
		}
		return true;
	} else return false;
};
zpp_nape.phys.ZPP_Body.prototype.shapes_subber = function(s) {
	if(this.space != null) this.space.removed_shape(s.zpp_inner);
	s.zpp_inner.body = null;
	s.zpp_inner.removedFromBody();
};
zpp_nape.phys.ZPP_Body.prototype.shapes_invalidate = function(_) {
	this.invalidate_shapes();
};
zpp_nape.phys.ZPP_Body.prototype.shapes_modifiable = function() {
	this.immutable_midstep("Body::shapes");
	if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
};
zpp_nape.phys.ZPP_Body.prototype.addedToSpace = function() {
	if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
		this.component = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
		this.component.next = null;
	}
	null;
	this.component.isBody = true;
	this.component.body = this;
	this.__iaddedToSpace();
};
zpp_nape.phys.ZPP_Body.prototype.removedFromSpace = function() {
	while(!(this.arbiters.head == null)) {
		var arb = this.arbiters.pop_unsafe();
		arb.cleared = true;
		if(arb.b2 == this) arb.b1.arbiters.inlined_try_remove(arb);
		if(arb.b1 == this) arb.b2.arbiters.inlined_try_remove(arb);
		if(arb.pair != null) {
			arb.pair.arb = null;
			arb.pair = null;
		}
		arb.active = false;
		this.space.f_arbiters.modified = true;
	}
	var o = this.component;
	o.body = null;
	o.constraint = null;
	null;
	o.next = zpp_nape.space.ZPP_Component.zpp_pool;
	zpp_nape.space.ZPP_Component.zpp_pool = o;
	this.component = null;
	this.__iremovedFromSpace();
};
zpp_nape.phys.ZPP_Body.prototype.copy = function() {
	var ret = new nape.phys.Body().zpp_inner;
	ret.type = this.type;
	ret.bulletEnabled = this.bulletEnabled;
	ret.disableCCD = this.disableCCD;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		ret.outer.zpp_inner.wrap_shapes.add(s.outer.copy());
		cx_ite = cx_ite.next;
	}
	ret.posx = this.posx;
	ret.posy = this.posy;
	ret.velx = this.velx;
	ret.vely = this.vely;
	ret.forcex = this.forcex;
	ret.forcey = this.forcey;
	ret.rot = this.rot;
	ret.angvel = this.angvel;
	ret.torque = this.torque;
	ret.kinvelx = this.kinvelx;
	ret.kinvely = this.kinvely;
	ret.kinangvel = this.kinangvel;
	ret.svelx = this.svelx;
	ret.svely = this.svely;
	if(!this.zip_axis) {
		ret.axisx = this.axisx;
		ret.axisy = this.axisy;
	} else ret.invalidate_rot();
	ret.rot = this.rot;
	ret.massMode = this.massMode;
	ret.gravMassMode = this.gravMassMode;
	ret.inertiaMode = this.inertiaMode;
	ret.norotate = this.norotate;
	ret.nomove = this.nomove;
	ret.cmass = this.cmass;
	ret.cinertia = this.cinertia;
	if(!this.zip_mass) ret.mass = this.mass; else ret.invalidate_mass();
	if(!this.zip_gravMass) ret.gravMass = this.gravMass; else ret.invalidate_gravMass();
	if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else ret.invalidate_gravMassScale();
	if(!this.zip_inertia) ret.inertia = this.inertia; else ret.invalidate_inertia();
	if(!this.zip_aabb) {
		ret.aabb.minx = this.aabb.minx;
		ret.aabb.miny = this.aabb.miny;
		ret.aabb.maxx = this.aabb.maxx;
		ret.aabb.maxy = this.aabb.maxy;
	} else ret.zip_aabb = true;
	if(!this.zip_localCOM) {
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
	} else {
		ret.zip_localCOM = true;
		ret.zip_worldCOM = true;
	}
	if(!this.zip_worldCOM) {
		ret.worldCOMx = this.worldCOMx;
		ret.worldCOMy = this.worldCOMy;
	} else ret.zip_worldCOM = true;
	this.copyto(ret.outer);
	return ret.outer;
};
zpp_nape.phys.ZPP_Body.prototype.__class__ = zpp_nape.phys.ZPP_Body;
zpp_nape.phys.ZPP_Compound = $hxClasses['zpp_nape.phys.ZPP_Compound'] = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
zpp_nape.phys.ZPP_Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_nape.phys.ZPP_Compound.__super__ = zpp_nape.phys.ZPP_Interactor;
for(var k in zpp_nape.phys.ZPP_Interactor.prototype ) zpp_nape.phys.ZPP_Compound.prototype[k] = zpp_nape.phys.ZPP_Interactor.prototype[k];
zpp_nape.phys.ZPP_Compound.prototype.outer = null;
zpp_nape.phys.ZPP_Compound.prototype.bodies = null;
zpp_nape.phys.ZPP_Compound.prototype.constraints = null;
zpp_nape.phys.ZPP_Compound.prototype.compounds = null;
zpp_nape.phys.ZPP_Compound.prototype.wrap_bodies = null;
zpp_nape.phys.ZPP_Compound.prototype.wrap_constraints = null;
zpp_nape.phys.ZPP_Compound.prototype.wrap_compounds = null;
zpp_nape.phys.ZPP_Compound.prototype.depth = null;
zpp_nape.phys.ZPP_Compound.prototype.compound = null;
zpp_nape.phys.ZPP_Compound.prototype.space = null;
zpp_nape.phys.ZPP_Compound.prototype.__imutable_midstep = function(name) {
	if(this.space != null && this.space.midstep) throw "Error: " + name + " cannot be set during space step()";
};
zpp_nape.phys.ZPP_Compound.prototype.addedToSpace = function() {
	this.__iaddedToSpace();
};
zpp_nape.phys.ZPP_Compound.prototype.removedFromSpace = function() {
	this.__iremovedFromSpace();
};
zpp_nape.phys.ZPP_Compound.prototype.breakApart = function() {
	if(this.space != null) {
		this.__iremovedFromSpace();
		this.space.nullInteractorType(this);
	}
	if(this.compound != null) this.compound.compounds.remove(this); else if(this.space != null) this.space.compounds.remove(this);
	while(!(this.bodies.head == null)) {
		var b = this.bodies.pop_unsafe();
		if((b.compound = this.compound) != null) this.compound.bodies.add(b); else if(this.space != null) this.space.bodies.add(b);
		if(this.space != null) this.space.freshInteractorType(b);
	}
	while(!(this.constraints.head == null)) {
		var c = this.constraints.pop_unsafe();
		if((c.compound = this.compound) != null) this.compound.constraints.add(c); else if(this.space != null) this.space.constraints.add(c);
	}
	while(!(this.compounds.head == null)) {
		var c1 = this.compounds.pop_unsafe();
		if((c1.compound = this.compound) != null) this.compound.compounds.add(c1); else if(this.space != null) this.space.compounds.add(c1);
		if(this.space != null) this.space.freshInteractorType(c1);
	}
	this.compound = null;
	this.space = null;
};
zpp_nape.phys.ZPP_Compound.prototype.bodies_adder = function(x) {
	if(x.zpp_inner.compound != this) {
		if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_bodies.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_bodies.remove(x);
		x.zpp_inner.compound = this;
		if(this.space != null) this.space.addBody(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.phys.ZPP_Compound.prototype.bodies_subber = function(x) {
	x.zpp_inner.compound = null;
	if(this.space != null) this.space.remBody(x.zpp_inner);
};
zpp_nape.phys.ZPP_Compound.prototype.bodies_modifiable = function() {
	this.immutable_midstep("Compound::" + "bodies");
};
zpp_nape.phys.ZPP_Compound.prototype.constraints_adder = function(x) {
	if(x.zpp_inner.compound != this) {
		if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_constraints.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_constraints.remove(x);
		x.zpp_inner.compound = this;
		if(this.space != null) this.space.addConstraint(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.phys.ZPP_Compound.prototype.constraints_subber = function(x) {
	x.zpp_inner.compound = null;
	if(this.space != null) this.space.remConstraint(x.zpp_inner);
};
zpp_nape.phys.ZPP_Compound.prototype.constraints_modifiable = function() {
	this.immutable_midstep("Compound::" + "constraints");
};
zpp_nape.phys.ZPP_Compound.prototype.compounds_adder = function(x) {
	var cur = this;
	while(cur != null && cur != x.zpp_inner) cur = cur.compound;
	if(cur == x.zpp_inner) {
		throw "Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString();
		return false;
	}
	if(x.zpp_inner.compound != this) {
		if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_compounds.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
		x.zpp_inner.compound = this;
		x.zpp_inner.depth = this.depth + 1;
		if(this.space != null) this.space.addCompound(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.phys.ZPP_Compound.prototype.compounds_subber = function(x) {
	x.zpp_inner.compound = null;
	x.zpp_inner.depth = 1;
	if(this.space != null) this.space.remCompound(x.zpp_inner);
};
zpp_nape.phys.ZPP_Compound.prototype.compounds_modifiable = function() {
	this.immutable_midstep("Compound::" + "compounds");
};
zpp_nape.phys.ZPP_Compound.prototype.copy = function(dict,todo) {
	var root = dict == null;
	if(dict == null) dict = new Array();
	if(todo == null) todo = new Array();
	var ret = new nape.phys.Compound();
	var cx_ite = this.compounds.head;
	while(cx_ite != null) {
		var c = cx_ite.elt;
		var cc = c.copy(dict,todo);
		cc.zpp_inner.immutable_midstep("Compound::compound");
		if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
			if(ret != null) ret.zpp_inner.wrap_compounds.add(cc);
		}
		if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.bodies.head;
	while(cx_ite1 != null) {
		var b = cx_ite1.elt;
		var bc = b.outer.copy();
		dict.push(zpp_nape.constraint.ZPP_CopyHelper.dict(b.id,bc));
		if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) (bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
			if(ret != null) ret.zpp_inner.wrap_bodies.add(bc);
		}
		if(bc.zpp_inner.compound == null) null; else bc.zpp_inner.compound.outer;
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = this.constraints.head;
	while(cx_ite2 != null) {
		var c1 = cx_ite2.elt;
		var cc1 = c1.copy(dict,todo);
		if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != ret) {
			if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != null) (cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc1);
			if(ret != null) ret.zpp_inner.wrap_constraints.add(cc1);
		}
		if(cc1.zpp_inner.compound == null) null; else cc1.zpp_inner.compound.outer;
		cx_ite2 = cx_ite2.next;
	}
	if(root) while(todo.length > 0) {
		var xcb = todo.pop();
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == xcb.id) {
				xcb.cb(idc.bc);
				break;
			}
		}
	}
	this.copyto(ret);
	return ret;
};
zpp_nape.phys.ZPP_Compound.prototype.__class__ = zpp_nape.phys.ZPP_Compound;
zpp_nape.phys.ZPP_FluidProperties = $hxClasses['zpp_nape.phys.ZPP_FluidProperties'] = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
zpp_nape.phys.ZPP_FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_nape.phys.ZPP_FluidProperties.prototype.next = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.userData = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.outer = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.phys.FluidProperties();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.phys.ZPP_FluidProperties.prototype.free = function() {
	this.outer = null;
};
zpp_nape.phys.ZPP_FluidProperties.prototype.alloc = function() {
};
zpp_nape.phys.ZPP_FluidProperties.prototype.shapes = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.wrap_shapes = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.feature_cons = function() {
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
};
zpp_nape.phys.ZPP_FluidProperties.prototype.addShape = function(shape) {
	this.shapes.add(shape);
};
zpp_nape.phys.ZPP_FluidProperties.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
};
zpp_nape.phys.ZPP_FluidProperties.prototype.copy = function() {
	var ret;
	if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) ret = new zpp_nape.phys.ZPP_FluidProperties(); else {
		ret = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.viscosity = this.viscosity;
	ret.density = this.density;
	return ret;
};
zpp_nape.phys.ZPP_FluidProperties.prototype.viscosity = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.density = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.gravityx = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.gravityy = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.wrap_gravity = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.gravity_invalidate = function(x) {
	this.gravityx = x.x;
	this.gravityy = x.y;
	this.invalidate();
};
zpp_nape.phys.ZPP_FluidProperties.prototype.gravity_validate = function() {
	this.wrap_gravity.zpp_inner.x = this.gravityx;
	this.wrap_gravity.zpp_inner.y = this.gravityy;
};
zpp_nape.phys.ZPP_FluidProperties.prototype.getgravity = function() {
	this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
	this.wrap_gravity.zpp_inner._inuse = true;
	this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
	this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
};
zpp_nape.phys.ZPP_FluidProperties.prototype.invalidate = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		shape.invalidate_fluidprops();
		cx_ite = cx_ite.next;
	}
};
zpp_nape.phys.ZPP_FluidProperties.prototype.__class__ = zpp_nape.phys.ZPP_FluidProperties;
zpp_nape.phys.ZPP_Material = $hxClasses['zpp_nape.phys.ZPP_Material'] = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
zpp_nape.phys.ZPP_Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_nape.phys.ZPP_Material.prototype.next = null;
zpp_nape.phys.ZPP_Material.prototype.userData = null;
zpp_nape.phys.ZPP_Material.prototype.outer = null;
zpp_nape.phys.ZPP_Material.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.phys.Material();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.phys.ZPP_Material.prototype.free = function() {
	this.outer = null;
};
zpp_nape.phys.ZPP_Material.prototype.alloc = function() {
};
zpp_nape.phys.ZPP_Material.prototype.shapes = null;
zpp_nape.phys.ZPP_Material.prototype.wrap_shapes = null;
zpp_nape.phys.ZPP_Material.prototype.feature_cons = function() {
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
};
zpp_nape.phys.ZPP_Material.prototype.addShape = function(shape) {
	this.shapes.add(shape);
};
zpp_nape.phys.ZPP_Material.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
};
zpp_nape.phys.ZPP_Material.prototype.dynamicFriction = null;
zpp_nape.phys.ZPP_Material.prototype.staticFriction = null;
zpp_nape.phys.ZPP_Material.prototype.density = null;
zpp_nape.phys.ZPP_Material.prototype.elasticity = null;
zpp_nape.phys.ZPP_Material.prototype.rollingFriction = null;
zpp_nape.phys.ZPP_Material.prototype.copy = function() {
	var ret = new zpp_nape.phys.ZPP_Material();
	ret.dynamicFriction = this.dynamicFriction;
	ret.staticFriction = this.staticFriction;
	ret.density = this.density;
	ret.elasticity = this.elasticity;
	ret.rollingFriction = this.rollingFriction;
	return ret;
};
zpp_nape.phys.ZPP_Material.prototype.set = function(x) {
	this.dynamicFriction = x.dynamicFriction;
	this.staticFriction = x.staticFriction;
	this.density = x.density;
	this.elasticity = x.elasticity;
	this.rollingFriction = x.rollingFriction;
};
zpp_nape.phys.ZPP_Material.prototype.invalidate = function(x) {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.invalidate_material(x);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.phys.ZPP_Material.prototype.__class__ = zpp_nape.phys.ZPP_Material;
if(!zpp_nape.shape) zpp_nape.shape = {};
zpp_nape.shape.ZPP_Shape = $hxClasses['zpp_nape.shape.ZPP_Shape'] = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.pairs = new zpp_nape.util.ZNPList_ZPP_AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_nape.phys.ZPP_Material();
	this.sweepRadius = this.sweepCoef = 0;
};
zpp_nape.shape.ZPP_Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_nape.shape.ZPP_Shape.__super__ = zpp_nape.phys.ZPP_Interactor;
for(var k in zpp_nape.phys.ZPP_Interactor.prototype ) zpp_nape.shape.ZPP_Shape.prototype[k] = zpp_nape.phys.ZPP_Interactor.prototype[k];
zpp_nape.shape.ZPP_Shape.prototype.outer = null;
zpp_nape.shape.ZPP_Shape.prototype.body = null;
zpp_nape.shape.ZPP_Shape.prototype.type = null;
zpp_nape.shape.ZPP_Shape.prototype.isCircle = function() {
	return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
};
zpp_nape.shape.ZPP_Shape.prototype.isPolygon = function() {
	return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
};
zpp_nape.shape.ZPP_Shape.prototype.area = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_area_inertia = null;
zpp_nape.shape.ZPP_Shape.prototype.inertia = null;
zpp_nape.shape.ZPP_Shape.prototype.angDrag = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_angDrag = null;
zpp_nape.shape.ZPP_Shape.prototype.localCOMx = null;
zpp_nape.shape.ZPP_Shape.prototype.localCOMy = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_localCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.worldCOMx = null;
zpp_nape.shape.ZPP_Shape.prototype.worldCOMy = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_worldCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.wrap_localCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.wrap_worldCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.sweepRadius = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_sweepRadius = null;
zpp_nape.shape.ZPP_Shape.prototype.sweepCoef = null;
zpp_nape.shape.ZPP_Shape.prototype.invalidate_sweepRadius = function() {
	this.zip_sweepRadius = true;
};
zpp_nape.shape.ZPP_Shape.prototype.validate_sweepRadius = function() {
	if(this.zip_sweepRadius) {
		this.zip_sweepRadius = false;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_sweepRadius(); else this.polygon.__validate_sweepRadius();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.circle = null;
zpp_nape.shape.ZPP_Shape.prototype.polygon = null;
zpp_nape.shape.ZPP_Shape.prototype.refmaterial = null;
zpp_nape.shape.ZPP_Shape.prototype.material = null;
zpp_nape.shape.ZPP_Shape.prototype.filter = null;
zpp_nape.shape.ZPP_Shape.prototype.fluidProperties = null;
zpp_nape.shape.ZPP_Shape.prototype.fluidEnabled = null;
zpp_nape.shape.ZPP_Shape.prototype.sensorEnabled = null;
zpp_nape.shape.ZPP_Shape.prototype.sweep = null;
zpp_nape.shape.ZPP_Shape.prototype.node = null;
zpp_nape.shape.ZPP_Shape.prototype.pairs = null;
zpp_nape.shape.ZPP_Shape.prototype.clear = function() {
	if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__clear(); else this.polygon.__clear();
};
zpp_nape.shape.ZPP_Shape.prototype.aabb = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_aabb = null;
zpp_nape.shape.ZPP_Shape.prototype.validate_aabb = function() {
	if(this.zip_aabb) {
		if(this.body != null) {
			this.zip_aabb = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
		}
	}
};
zpp_nape.shape.ZPP_Shape.prototype.force_validate_aabb = function() {
	if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle._force_validate_aabb(); else this.polygon._force_validate_aabb();
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_aabb = function() {
	this.zip_aabb = true;
	if(this.body != null) this.body.zip_aabb = true;
};
zpp_nape.shape.ZPP_Shape.prototype.validate_area_inertia = function() {
	if(this.zip_area_inertia) {
		this.zip_area_inertia = false;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.validate_angDrag = function() {
	if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
		this.zip_angDrag = false;
		this.refmaterial.dynamicFriction = this.material.dynamicFriction;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.validate_localCOM = function() {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
};
zpp_nape.shape.ZPP_Shape.prototype.validate_worldCOM = function() {
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			this.body.validate_axis();
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		}
	}
};
zpp_nape.shape.ZPP_Shape.prototype.getworldCOM = function() {
	if(this.body == null) throw "Error: worldCOM only makes sense when Shape belongs to a Body";
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			this.body.validate_axis();
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		}
	}
	this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
	this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_area_inertia = function() {
	this.zip_area_inertia = true;
	if(this.body != null) {
		this.body.invalidate_localCOM();
		this.body.invalidate_mass();
		this.body.invalidate_inertia();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_angDrag = function() {
	this.zip_angDrag = true;
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_localCOM = function() {
	this.zip_localCOM = true;
	this.invalidate_area_inertia();
	if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zip_sweepRadius = true;
	this.invalidate_angDrag();
	this.invalidate_worldCOM();
	if(this.body != null) this.body.invalidate_localCOM();
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_worldCOM = function() {
	this.zip_worldCOM = true;
	this.zip_aabb = true;
	if(this.body != null) this.body.zip_aabb = true;
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_material = function(flags) {
	if((flags & zpp_nape.phys.ZPP_Material.WAKE) != 0) this.wake();
	if((flags & zpp_nape.phys.ZPP_Material.ARBITERS) != 0) {
		if(this.body != null) this.body.refreshArbiters();
	}
	if((flags & zpp_nape.phys.ZPP_Material.PROPS) != 0) {
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	if((flags & zpp_nape.phys.ZPP_Material.ANGDRAG) != 0) this.invalidate_angDrag();
	this.refmaterial.set(this.material);
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_filter = function() {
	this.wake();
};
zpp_nape.shape.ZPP_Shape.prototype.invalidate_fluidprops = function() {
	if(this.fluidEnabled) this.wake();
};
zpp_nape.shape.ZPP_Shape.prototype.aabb_validate = function() {
	if(this.body == null) throw "Error: bounds only makes sense when Shape belongs to a Body";
	if(this.zip_aabb) {
		if(this.body != null) {
			this.zip_aabb = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
		}
	}
};
zpp_nape.shape.ZPP_Shape.prototype.setMaterial = function(material) {
	if(this.material != material) {
		if(this.body != null && this.body.space != null) {
			if(this.material != null) this.material.shapes.remove(this);
		}
		this.material = material;
		if(this.body != null && this.body.space != null) material.shapes.add(this);
		this.wake();
		if(this.body != null) this.body.refreshArbiters();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.setFilter = function(filter) {
	if(this.filter != filter) {
		if(this.body != null && this.body.space != null) {
			if(this.filter != null) this.filter.shapes.remove(this);
		}
		this.filter = filter;
		if(this.body != null && this.body.space != null) filter.shapes.add(this);
		this.wake();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.setFluid = function(fluid) {
	if(this.fluidProperties != fluid) {
		if(this.body != null && this.body.space != null) {
			if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
		}
		this.fluidProperties = fluid;
		if(this.body != null && this.body.space != null) fluid.shapes.add(this);
		if(this.fluidEnabled) this.wake();
	}
};
zpp_nape.shape.ZPP_Shape.prototype.__immutable_midstep = function(name) {
	if(this.body != null && this.body.space != null && this.body.space.midstep) throw "Error: " + name + " cannot be set during a space step()";
};
zpp_nape.shape.ZPP_Shape.prototype.addedToBody = function() {
	this.invalidate_worldCOM();
	this.zip_aabb = true;
	if(this.body != null) this.body.zip_aabb = true;
};
zpp_nape.shape.ZPP_Shape.prototype.removedFromBody = function() {
};
zpp_nape.shape.ZPP_Shape.prototype.addedToSpace = function() {
	this.__iaddedToSpace();
	this.material.shapes.add(this);
	this.filter.shapes.add(this);
	if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
};
zpp_nape.shape.ZPP_Shape.prototype.removedFromSpace = function() {
	this.__iremovedFromSpace();
	this.material.shapes.remove(this);
	this.filter.shapes.remove(this);
	if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
};
zpp_nape.shape.ZPP_Shape.prototype.copy = function() {
	var ret = null;
	if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = this.circle.__copy(); else ret = this.polygon.__copy();
	if(!this.zip_area_inertia) {
		ret.area = this.area;
		ret.inertia = this.inertia;
	} else ret.invalidate_area_inertia();
	if(!this.zip_sweepRadius) {
		ret.sweepRadius = this.sweepRadius;
		ret.sweepCoef = this.sweepCoef;
	} else ret.zip_sweepRadius = true;
	if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.invalidate_angDrag();
	if(!this.zip_aabb) {
		ret.aabb.minx = this.aabb.minx;
		ret.aabb.miny = this.aabb.miny;
		ret.aabb.maxx = this.aabb.maxx;
		ret.aabb.maxy = this.aabb.maxy;
	} else {
		ret.zip_aabb = true;
		if(ret.body != null) ret.body.zip_aabb = true;
	}
	var o = ret.material;
	o.outer = null;
	o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
	zpp_nape.phys.ZPP_Material.zpp_pool = o;
	var o1 = ret.filter;
	o1.outer = null;
	o1.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
	zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o1;
	ret.material = this.material;
	ret.filter = this.filter;
	if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
	ret.fluidEnabled = this.fluidEnabled;
	ret.sensorEnabled = this.sensorEnabled;
	if(this.userData != null) ret.userData = Reflect.copy(this.userData);
	this.copyto(ret.outer);
	return ret.outer;
};
zpp_nape.shape.ZPP_Shape.prototype.__class__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Circle = $hxClasses['zpp_nape.shape.ZPP_Circle'] = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE);
	this.circle = this;
	this.zip_localCOM = false;
};
zpp_nape.shape.ZPP_Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_nape.shape.ZPP_Circle.__super__ = zpp_nape.shape.ZPP_Shape;
for(var k in zpp_nape.shape.ZPP_Shape.prototype ) zpp_nape.shape.ZPP_Circle.prototype[k] = zpp_nape.shape.ZPP_Shape.prototype[k];
zpp_nape.shape.ZPP_Circle.prototype.outer_zn = null;
zpp_nape.shape.ZPP_Circle.prototype.radius = null;
zpp_nape.shape.ZPP_Circle.prototype.__clear = function() {
};
zpp_nape.shape.ZPP_Circle.prototype.invalidate_radius = function() {
	this.invalidate_area_inertia();
	this.invalidate_angDrag();
	this.zip_aabb = true;
	if(this.body != null) this.body.zip_aabb = true;
	if(this.body != null) this.body.wake();
};
zpp_nape.shape.ZPP_Circle.prototype.localCOM_validate = function() {
	this.wrap_localCOM.zpp_inner.x = this.localCOMx;
	this.wrap_localCOM.zpp_inner.y = this.localCOMy;
};
zpp_nape.shape.ZPP_Circle.prototype.localCOM_invalidate = function(x) {
	this.localCOMx = x.x;
	this.localCOMy = x.y;
	this.invalidate_localCOM();
	if(this.body != null) this.body.wake();
};
zpp_nape.shape.ZPP_Circle.prototype.localCOM_immutable = function() {
	if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modify localCOM of Circle added to a static Body whilst within a Space";
};
zpp_nape.shape.ZPP_Circle.prototype.setupLocalCOM = function() {
	var me = this;
	this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
	this.wrap_localCOM.zpp_inner._inuse = true;
	this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
	this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	this.wrap_localCOM.zpp_inner._isimmutable = $bind(this,this.localCOM_immutable);
};
zpp_nape.shape.ZPP_Circle.prototype.__validate_aabb = function() {
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			this.body.validate_axis();
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		}
	}
	var rx = this.radius;
	var ry = this.radius;
	this.aabb.minx = this.worldCOMx - rx;
	this.aabb.miny = this.worldCOMy - ry;
	this.aabb.maxx = this.worldCOMx + rx;
	this.aabb.maxy = this.worldCOMy + ry;
};
zpp_nape.shape.ZPP_Circle.prototype._force_validate_aabb = function() {
	this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
	this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
	this.aabb.minx = this.worldCOMx - this.radius;
	this.aabb.miny = this.worldCOMy - this.radius;
	this.aabb.maxx = this.worldCOMx + this.radius;
	this.aabb.maxy = this.worldCOMy + this.radius;
};
zpp_nape.shape.ZPP_Circle.prototype.__validate_sweepRadius = function() {
	this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	this.sweepRadius = this.sweepCoef + this.radius;
};
zpp_nape.shape.ZPP_Circle.prototype.__validate_area_inertia = function() {
	var r2 = this.radius * this.radius;
	this.area = r2 * Math.PI;
	this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
};
zpp_nape.shape.ZPP_Circle.prototype.__validate_angDrag = function() {
	var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
	var r2 = this.radius * this.radius;
	var skin = this.material.dynamicFriction * nape.Config.fluidAngularDragFriction;
	this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape.Config.fluidAngularDrag * (1 + nape.Config.fluidVacuumDrag) * lc;
	this.angDrag /= 2 * (lc + 0.5 * r2);
};
zpp_nape.shape.ZPP_Circle.prototype.__scale = function(sx,sy) {
	var factor;
	factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
	if(factor < 0) this.radius *= -factor; else this.radius *= factor;
	this.invalidate_radius();
	if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
		this.localCOMx *= sx;
		this.localCOMy *= sy;
		this.invalidate_localCOM();
	}
};
zpp_nape.shape.ZPP_Circle.prototype.__translate = function(x,y) {
	var t = 1.0;
	this.localCOMx += x * t;
	this.localCOMy += y * t;
	this.invalidate_localCOM();
};
zpp_nape.shape.ZPP_Circle.prototype.__rotate = function(x,y) {
	if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
		var tx = 0.0;
		var ty = 0.0;
		tx = y * this.localCOMx - x * this.localCOMy;
		ty = this.localCOMx * x + this.localCOMy * y;
		this.localCOMx = tx;
		this.localCOMy = ty;
		this.invalidate_localCOM();
	}
};
zpp_nape.shape.ZPP_Circle.prototype.__transform = function(m) {
	var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
	if(det < 0) det = -det;
	this.radius *= Math.sqrt(det);
	var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
	this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
	this.localCOMx = t;
	this.invalidate_radius();
	this.invalidate_localCOM();
};
zpp_nape.shape.ZPP_Circle.prototype.__copy = function() {
	var ret = new nape.shape.Circle(this.radius).zpp_inner_zn;
	ret.localCOMx = this.localCOMx;
	ret.localCOMy = this.localCOMy;
	ret.zip_localCOM = false;
	return ret;
};
zpp_nape.shape.ZPP_Circle.prototype.__class__ = zpp_nape.shape.ZPP_Circle;
zpp_nape.shape.ZPP_Edge = $hxClasses['zpp_nape.shape.ZPP_Edge'] = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
zpp_nape.shape.ZPP_Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_nape.shape.ZPP_Edge.prototype.next = null;
zpp_nape.shape.ZPP_Edge.prototype.free = function() {
	this.polygon = null;
};
zpp_nape.shape.ZPP_Edge.prototype.alloc = function() {
};
zpp_nape.shape.ZPP_Edge.prototype.polygon = null;
zpp_nape.shape.ZPP_Edge.prototype.outer = null;
zpp_nape.shape.ZPP_Edge.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.shape.ZPP_Edge.internal = true;
		this.outer = new nape.shape.Edge();
		zpp_nape.shape.ZPP_Edge.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
zpp_nape.shape.ZPP_Edge.prototype.lnormx = null;
zpp_nape.shape.ZPP_Edge.prototype.lnormy = null;
zpp_nape.shape.ZPP_Edge.prototype.wrap_lnorm = null;
zpp_nape.shape.ZPP_Edge.prototype.gnormx = null;
zpp_nape.shape.ZPP_Edge.prototype.gnormy = null;
zpp_nape.shape.ZPP_Edge.prototype.wrap_gnorm = null;
zpp_nape.shape.ZPP_Edge.prototype.length = null;
zpp_nape.shape.ZPP_Edge.prototype.lprojection = null;
zpp_nape.shape.ZPP_Edge.prototype.gprojection = null;
zpp_nape.shape.ZPP_Edge.prototype.lp0 = null;
zpp_nape.shape.ZPP_Edge.prototype.gp0 = null;
zpp_nape.shape.ZPP_Edge.prototype.lp1 = null;
zpp_nape.shape.ZPP_Edge.prototype.gp1 = null;
zpp_nape.shape.ZPP_Edge.prototype.tp0 = null;
zpp_nape.shape.ZPP_Edge.prototype.tp1 = null;
zpp_nape.shape.ZPP_Edge.prototype.lnorm_validate = function() {
	if(this.polygon == null) throw "Error: Edge not currently in use";
	this.polygon.validate_laxi();
	this.wrap_lnorm.zpp_inner.x = this.lnormx;
	this.wrap_lnorm.zpp_inner.y = this.lnormy;
};
zpp_nape.shape.ZPP_Edge.prototype.gnorm_validate = function() {
	if(this.polygon == null) throw "Error: Edge not currently in use";
	if(this.polygon.body == null) throw "Error: Edge worldNormal only makes sense if the parent Polygon is contained within a rigid body";
	this.polygon.validate_gaxi();
	this.wrap_gnorm.zpp_inner.x = this.gnormx;
	this.wrap_gnorm.zpp_inner.y = this.gnormy;
};
zpp_nape.shape.ZPP_Edge.prototype.getlnorm = function() {
	this.wrap_lnorm = nape.geom.Vec2.get(this.lnormx,this.lnormy,null);
	this.wrap_lnorm.zpp_inner._immutable = true;
	this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
};
zpp_nape.shape.ZPP_Edge.prototype.getgnorm = function() {
	this.wrap_gnorm = nape.geom.Vec2.get(this.gnormx,this.gnormy,null);
	this.wrap_gnorm.zpp_inner._immutable = true;
	this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
};
zpp_nape.shape.ZPP_Edge.prototype.__class__ = zpp_nape.shape.ZPP_Edge;
zpp_nape.shape.ZPP_Polygon = $hxClasses['zpp_nape.shape.ZPP_Polygon'] = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON);
	this.polygon = this;
	this.lverts = new zpp_nape.geom.ZPP_Vec2();
	this.gverts = new zpp_nape.geom.ZPP_Vec2();
	this.edges = new zpp_nape.util.ZNPList_ZPP_Edge();
	this.edgeCnt = 0;
};
zpp_nape.shape.ZPP_Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_nape.shape.ZPP_Polygon.__super__ = zpp_nape.shape.ZPP_Shape;
for(var k in zpp_nape.shape.ZPP_Shape.prototype ) zpp_nape.shape.ZPP_Polygon.prototype[k] = zpp_nape.shape.ZPP_Shape.prototype[k];
zpp_nape.shape.ZPP_Polygon.prototype.outer_zn = null;
zpp_nape.shape.ZPP_Polygon.prototype.lverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.wrap_lverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.gverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.wrap_gverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.edges = null;
zpp_nape.shape.ZPP_Polygon.prototype.wrap_edges = null;
zpp_nape.shape.ZPP_Polygon.prototype.edgeCnt = null;
zpp_nape.shape.ZPP_Polygon.prototype.reverse_flag = null;
zpp_nape.shape.ZPP_Polygon.prototype.__clear = function() {
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_pa_invalidate = function(x) {
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_pa_immutable = function() {
	if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space";
};
zpp_nape.shape.ZPP_Polygon.prototype.gverts_pa_validate = function() {
	if(this.body == null) throw "Error: World vertex only makes sense when Polygon is contained in a rigid body";
	this.validate_gverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_post_adder = function(x) {
	x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
	x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
	var ite = null;
	var ite2 = null;
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var i = cx_ite;
		if(i == x.zpp_inner) break; else {
			if(ite == null) ite = this.gverts.next; else ite = ite.next;
			if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
		}
		cx_ite = cx_ite.next;
	}
	var vec = zpp_nape.geom.ZPP_Vec2.get(0,0,true);
	this.gverts.insert(ite,vec);
	if(this.lverts.next.next != null) {
		if(this.lverts.next.next.next == null) {
			var ed;
			if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed = new zpp_nape.shape.ZPP_Edge(); else {
				ed = zpp_nape.shape.ZPP_Edge.zpp_pool;
				zpp_nape.shape.ZPP_Edge.zpp_pool = ed.next;
				ed.next = null;
			}
			null;
			ed.polygon = this;
			this.edges.add(ed);
			var ed1;
			if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed1 = new zpp_nape.shape.ZPP_Edge(); else {
				ed1 = zpp_nape.shape.ZPP_Edge.zpp_pool;
				zpp_nape.shape.ZPP_Edge.zpp_pool = ed1.next;
				ed1.next = null;
			}
			null;
			ed1.polygon = this;
			this.edges.add(ed1);
			this.edgeCnt += 2;
		} else {
			var ed2;
			if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed2 = new zpp_nape.shape.ZPP_Edge(); else {
				ed2 = zpp_nape.shape.ZPP_Edge.zpp_pool;
				zpp_nape.shape.ZPP_Edge.zpp_pool = ed2.next;
				ed2.next = null;
			}
			null;
			ed2.polygon = this;
			this.edges.insert(ite2,ed2);
			this.edgeCnt++;
		}
	}
	vec._validate = $bind(this,this.gverts_pa_validate);
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_subber = function(x) {
	this.cleanup_lvert(x.zpp_inner);
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_invalidate = function(_) {
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_validate = function() {
	this.validate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.lverts_modifiable = function() {
	this.immutable_midstep("Polygon::localVerts");
	if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
};
zpp_nape.shape.ZPP_Polygon.prototype.gverts_validate = function() {
	this.validate_gverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.edges_validate = function() {
	this.validate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.getlverts = function() {
	var me = this;
	this.wrap_lverts = zpp_nape.util.ZPP_MixVec2List.get(this.lverts);
	this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
	this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
	this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
	this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
	this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
	this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
};
zpp_nape.shape.ZPP_Polygon.prototype.getgverts = function() {
	var me = this;
	this.wrap_gverts = zpp_nape.util.ZPP_MixVec2List.get(this.gverts,true);
	this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
	this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
};
zpp_nape.shape.ZPP_Polygon.prototype.getedges = function() {
	var me = this;
	this.wrap_edges = zpp_nape.util.ZPP_EdgeList.get(this.edges,true);
	this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
};
zpp_nape.shape.ZPP_Polygon.prototype.zip_lverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_lverts = function() {
	this.invalidate_laxi();
	this.invalidate_area_inertia();
	this.invalidate_angDrag();
	this.invalidate_localCOM();
	this.invalidate_gverts();
	this.zip_lverts = true;
	this.zip_valid = true;
	this.zip_sanitation = true;
	if(this.body != null) this.body.wake();
};
zpp_nape.shape.ZPP_Polygon.prototype.zip_laxi = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_laxi = function() {
	this.invalidate_gaxi();
	this.zip_sweepRadius = true;
	this.zip_laxi = true;
};
zpp_nape.shape.ZPP_Polygon.prototype.zip_gverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_gverts = function() {
	this.zip_aabb = true;
	if(this.body != null) this.body.zip_aabb = true;
	this.zip_gverts = true;
};
zpp_nape.shape.ZPP_Polygon.prototype.zip_gaxi = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_gaxi = function() {
	this.zip_gaxi = true;
};
zpp_nape.shape.ZPP_Polygon.prototype.zip_valid = null;
zpp_nape.shape.ZPP_Polygon.prototype.validation = null;
zpp_nape.shape.ZPP_Polygon.prototype.valid = function() {
	if(this.zip_valid) {
		this.zip_valid = false;
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
		if(this.lverts.length < 3) return (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this)); else {
			this.validate_lverts();
			this.validate_area_inertia();
			if(this.area < nape.Config.epsilon) return (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				var neg = false;
				var pos = false;
				var cx_cont = true;
				var cx_ite = this.lverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				var v = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var w = cx_ite;
					var ax = 0.0;
					var ay = 0.0;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx = 0.0;
					var by = 0.0;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > nape.Config.epsilon) pos = true; else if(dot < -nape.Config.epsilon) neg = true;
					if(pos && neg) {
						cx_cont = false;
						break;
					}
					u = v;
					v = w;
					cx_ite = cx_ite.next;
				}
				if(cx_cont) {
					cx_ite = this.lverts.next;
					var w1 = cx_ite;
					do {
						var ax1 = 0.0;
						var ay1 = 0.0;
						ax1 = w1.x - v.x;
						ay1 = w1.y - v.y;
						var bx1 = 0.0;
						var by1 = 0.0;
						bx1 = v.x - u.x;
						by1 = v.y - u.y;
						var dot1 = by1 * ax1 - bx1 * ay1;
						if(dot1 > nape.Config.epsilon) pos = true; else if(dot1 < -nape.Config.epsilon) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
					} while(false);
					if(cx_cont) {
						u = v;
						v = w1;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						do {
							var ax2 = 0.0;
							var ay2 = 0.0;
							ax2 = w2.x - v.x;
							ay2 = w2.y - v.y;
							var bx2 = 0.0;
							var by2 = 0.0;
							bx2 = v.x - u.x;
							by2 = v.y - u.y;
							var dot2 = by2 * ax2 - bx2 * ay2;
							if(dot2 > nape.Config.epsilon) pos = true; else if(dot2 < -nape.Config.epsilon) neg = true;
							if(pos && neg) break;
						} while(false);
					}
				}
				if(pos && neg) return (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
					return $r;
				}(this)); else {
					var cont = true;
					var cx_cont1 = true;
					var cx_ite1 = this.lverts.next;
					var u1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
					while(cx_ite1 != null) {
						var v1 = cx_ite1;
						if(!cont) {
							cx_cont1 = false;
							break;
						}
						var cx_cont2 = true;
						var cx_ite2 = this.lverts.next;
						var a = cx_ite2;
						cx_ite2 = cx_ite2.next;
						while(cx_ite2 != null) {
							var b = cx_ite2;
							if(u1 == a || u1 == b || v1 == a || v1 == b) {
								a = b;
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var sx = 0.0;
							var sy = 0.0;
							sx = u1.x - a.x;
							sy = u1.y - a.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = v1.x - u1.x;
							vy = v1.y - u1.y;
							var qx = 0.0;
							var qy = 0.0;
							qx = b.x - a.x;
							qy = b.y - a.y;
							var den = vy * qx - vx * qy;
							if(den * den > nape.Config.epsilon) {
								den = 1 / den;
								var t = (qy * sx - qx * sy) * den;
								if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
									var s = (vy * sx - vx * sy) * den;
									if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
										cont = false;
										cx_cont2 = false;
										break;
									}
								}
							}
							a = b;
							cx_ite2 = cx_ite2.next;
						}
						if(cx_cont2) do {
							var b1 = this.lverts.next;
							if(u1 == a || u1 == b1 || v1 == a || v1 == b1) break;
							var sx1 = 0.0;
							var sy1 = 0.0;
							sx1 = u1.x - a.x;
							sy1 = u1.y - a.y;
							var vx1 = 0.0;
							var vy1 = 0.0;
							vx1 = v1.x - u1.x;
							vy1 = v1.y - u1.y;
							var qx1 = 0.0;
							var qy1 = 0.0;
							qx1 = b1.x - a.x;
							qy1 = b1.y - a.y;
							var den1 = vy1 * qx1 - vx1 * qy1;
							if(den1 * den1 > nape.Config.epsilon) {
								den1 = 1 / den1;
								var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
								if(t1 > nape.Config.epsilon && t1 < 1 - nape.Config.epsilon) {
									var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
									if(s1 > nape.Config.epsilon && s1 < 1 - nape.Config.epsilon) {
										cont = false;
										break;
									}
								}
							}
						} while(false);
						u1 = v1;
						cx_ite1 = cx_ite1.next;
					}
					if(cx_cont1) do {
						var v2 = this.lverts.next;
						if(!cont) break;
						var cx_cont3 = true;
						var cx_ite3 = this.lverts.next;
						var a1 = cx_ite3;
						cx_ite3 = cx_ite3.next;
						while(cx_ite3 != null) {
							var b2 = cx_ite3;
							if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
								a1 = b2;
								cx_ite3 = cx_ite3.next;
								continue;
							}
							var sx2 = 0.0;
							var sy2 = 0.0;
							sx2 = u1.x - a1.x;
							sy2 = u1.y - a1.y;
							var vx2 = 0.0;
							var vy2 = 0.0;
							vx2 = v2.x - u1.x;
							vy2 = v2.y - u1.y;
							var qx2 = 0.0;
							var qy2 = 0.0;
							qx2 = b2.x - a1.x;
							qy2 = b2.y - a1.y;
							var den2 = vy2 * qx2 - vx2 * qy2;
							if(den2 * den2 > nape.Config.epsilon) {
								den2 = 1 / den2;
								var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
								if(t2 > nape.Config.epsilon && t2 < 1 - nape.Config.epsilon) {
									var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
									if(s2 > nape.Config.epsilon && s2 < 1 - nape.Config.epsilon) {
										cont = false;
										cx_cont3 = false;
										break;
									}
								}
							}
							a1 = b2;
							cx_ite3 = cx_ite3.next;
						}
						if(cx_cont3) do {
							var b3 = this.lverts.next;
							if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) break;
							var sx3 = 0.0;
							var sy3 = 0.0;
							sx3 = u1.x - a1.x;
							sy3 = u1.y - a1.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = v2.x - u1.x;
							vy3 = v2.y - u1.y;
							var qx3 = 0.0;
							var qy3 = 0.0;
							qx3 = b3.x - a1.x;
							qy3 = b3.y - a1.y;
							var den3 = vy3 * qx3 - vx3 * qy3;
							if(den3 * den3 > nape.Config.epsilon) {
								den3 = 1 / den3;
								var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
								if(t3 > nape.Config.epsilon && t3 < 1 - nape.Config.epsilon) {
									var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
									if(s3 > nape.Config.epsilon && s3 < 1 - nape.Config.epsilon) {
										cont = false;
										break;
									}
								}
							}
						} while(false);
					} while(false);
					if(!cont) return (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
						return $r;
					}(this)); else return (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = $this.validation = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
						return $r;
					}(this));
				}
			}
		}
	} else return this.validation;
};
zpp_nape.shape.ZPP_Polygon.prototype.validate_lverts = function() {
	if(this.zip_lverts) {
		this.zip_lverts = false;
		if(this.lverts.length > 2) {
			this.validate_area_inertia();
			if(this.area < 0) {
				this.reverse_vertices();
				this.area = -this.area;
			}
		}
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.cleanup_lvert = function(x) {
	var ite = null;
	var ite2 = null;
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var i = cx_ite;
		if(i == x) break; else {
			if(ite == null) ite = this.gverts.next; else ite = ite.next;
			if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
		}
		cx_ite = cx_ite.next;
	}
	var rem;
	if(ite == null) rem = this.gverts.next; else rem = ite.next;
	this.gverts.erase(ite);
	var o = rem;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	if(this.edgeCnt == 2) {
		var rem1 = this.edges.pop_unsafe();
		var o1 = rem1;
		o1.polygon = null;
		o1.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
		zpp_nape.shape.ZPP_Edge.zpp_pool = o1;
		rem1 = this.edges.pop_unsafe();
		var o2 = rem1;
		o2.polygon = null;
		o2.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
		zpp_nape.shape.ZPP_Edge.zpp_pool = o2;
		this.edgeCnt = 0;
	} else if(this.edgeCnt != 0) {
		var rem2;
		if(ite2 == null) rem2 = this.edges.head.elt; else rem2 = ite2.next.elt;
		this.edges.erase(ite2);
		var o3 = rem2;
		o3.polygon = null;
		o3.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
		zpp_nape.shape.ZPP_Edge.zpp_pool = o3;
		this.edgeCnt--;
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.zip_sanitation = null;
zpp_nape.shape.ZPP_Polygon.prototype.splice_collinear = function() {
	if(this.zip_sanitation) {
		this.zip_sanitation = false;
		this.splice_collinear_real();
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.splice_collinear_real = function() {
	if(this.lverts.next == null) return;
	if(this.lverts.next.next == null) return;
	if(this.lverts.next.next.next == null) return;
	var pre = null;
	var cur = this.lverts.next;
	while(cur != null) {
		var nxt;
		if(cur.next == null) nxt = this.lverts.next; else nxt = cur.next;
		var u = cur;
		var v = nxt;
		if(zpp_nape.geom.ZPP_VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape.Config.epsilon * nape.Config.epsilon) {
			this.cleanup_lvert(cur);
			cur = this.lverts.erase(pre);
		} else {
			pre = cur;
			cur = cur.next;
		}
	}
	if(this.lverts.next == null) return;
	var removed;
	do {
		removed = false;
		var pre1 = this.lverts.next;
		while(pre1 != null) {
			var cur1;
			if(pre1.next == null) cur1 = this.lverts.next; else cur1 = pre1.next;
			var nxt1;
			if(cur1.next == null) nxt1 = this.lverts.next; else nxt1 = cur1.next;
			var u1 = pre1;
			var v1 = cur1;
			var w = nxt1;
			var ax = 0.0;
			var ay = 0.0;
			ax = v1.x - u1.x;
			ay = v1.y - u1.y;
			var bx = 0.0;
			var by = 0.0;
			bx = w.x - v1.x;
			by = w.y - v1.y;
			var crs = by * ax - bx * ay;
			if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) pre1 = pre1.next; else {
				this.cleanup_lvert(cur1);
				this.lverts.erase(pre1.next == null?null:pre1);
				removed = true;
				pre1 = pre1.next;
			}
		}
	} while(removed);
};
zpp_nape.shape.ZPP_Polygon.prototype.reverse_vertices = function() {
	this.lverts.reverse();
	this.gverts.reverse();
	this.edges.reverse();
	var ite = this.edges.iterator_at(this.edgeCnt - 1);
	var elem = this.edges.pop_unsafe();
	this.edges.insert(ite,elem);
	this.reverse_flag = !this.reverse_flag;
	if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
	if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
};
zpp_nape.shape.ZPP_Polygon.prototype.validate_laxi = function() {
	if(this.zip_laxi) {
		this.zip_laxi = false;
		this.validate_lverts();
		var ite = this.edges.head;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var v = cx_ite;
			var edge = ite.elt;
			ite = ite.next;
			edge.lp0 = u;
			edge.lp1 = v;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			var l = Math.sqrt(dx * dx + dy * dy);
			edge.length = l;
			var t = 1.0 / l;
			dx *= t;
			dy *= t;
			var t1 = dx;
			dx = -dy;
			dy = t1;
			edge.lprojection = dx * u.x + dy * u.y;
			edge.lnormx = dx;
			edge.lnormy = dy;
			if(edge.wrap_lnorm != null) {
				edge.wrap_lnorm.zpp_inner.x = dx;
				edge.wrap_lnorm.zpp_inner.y = dy;
			}
			u = v;
			cx_ite = cx_ite.next;
		}
		var v1 = this.lverts.next;
		var edge1 = ite.elt;
		ite = ite.next;
		edge1.lp0 = u;
		edge1.lp1 = v1;
		var dx1 = 0.0;
		var dy1 = 0.0;
		dx1 = u.x - v1.x;
		dy1 = u.y - v1.y;
		var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
		edge1.length = l1;
		var t2 = 1.0 / l1;
		dx1 *= t2;
		dy1 *= t2;
		var t3 = dx1;
		dx1 = -dy1;
		dy1 = t3;
		edge1.lprojection = dx1 * u.x + dy1 * u.y;
		edge1.lnormx = dx1;
		edge1.lnormy = dy1;
		if(edge1.wrap_lnorm != null) {
			edge1.wrap_lnorm.zpp_inner.x = dx1;
			edge1.wrap_lnorm.zpp_inner.y = dy1;
		}
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.validate_gverts = function() {
	if(this.zip_gverts) {
		if(this.body != null) {
			this.zip_gverts = false;
			this.validate_lverts();
			this.body.validate_axis();
			var li = this.lverts.next;
			var cx_ite = this.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
				g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
				cx_ite = cx_ite.next;
			}
		}
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.validate_gaxi = function() {
	if(this.zip_gaxi) {
		if(this.body != null) {
			this.zip_gaxi = false;
			this.validate_laxi();
			this.body.validate_axis();
			this.validate_gverts();
			var ite = this.edges.head;
			var cx_ite = this.gverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
				e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite = cx_ite.next;
			}
			var v1 = this.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gp0 = u;
			e1.gp1 = v1;
			e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
			e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.__validate_aabb = function() {
	this.validate_gverts();
	if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful bounds";
	var p0 = this.gverts.next;
	this.aabb.minx = p0.x;
	this.aabb.miny = p0.y;
	this.aabb.maxx = p0.x;
	this.aabb.maxy = p0.y;
	var cx_ite = this.gverts.next.next;
	while(cx_ite != null) {
		var p = cx_ite;
		if(p.x < this.aabb.minx) this.aabb.minx = p.x;
		if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
		if(p.y < this.aabb.miny) this.aabb.miny = p.y;
		if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.shape.ZPP_Polygon.prototype._force_validate_aabb = function() {
	var li = this.lverts.next;
	var p0 = this.gverts.next;
	var l = li;
	li = li.next;
	p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
	p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
	this.aabb.minx = p0.x;
	this.aabb.miny = p0.y;
	this.aabb.maxx = p0.x;
	this.aabb.maxy = p0.y;
	var cx_ite = this.gverts.next.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var l1 = li;
		li = li.next;
		p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
		p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
		if(p.x < this.aabb.minx) this.aabb.minx = p.x;
		if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
		if(p.y < this.aabb.miny) this.aabb.miny = p.y;
		if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.__validate_sweepRadius = function() {
	var maxRadius = 0.0;
	var minRadius = 0.0;
	this.validate_laxi();
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var x = cx_ite;
		var r = x.x * x.x + x.y * x.y;
		if(r > maxRadius) maxRadius = r;
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.edges.head;
	while(cx_ite1 != null) {
		var e = cx_ite1.elt;
		if(e.lprojection < minRadius) {
			minRadius = e.lprojection;
			if(minRadius < 0) break;
		}
		cx_ite1 = cx_ite1.next;
	}
	if(minRadius < 0) minRadius = 0;
	this.sweepRadius = Math.sqrt(maxRadius);
	this.sweepCoef = this.sweepRadius - minRadius;
};
zpp_nape.shape.ZPP_Polygon.prototype.__validate_area_inertia = function() {
	if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
		this.area = 0;
		this.inertia = 0;
	} else {
		this.area = 0.0;
		var s1 = 0.0;
		var s2 = 0.0;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		var v = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var w = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a * b;
			s2 += a;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
		}
		cx_ite = this.lverts.next;
		var w1 = cx_ite;
		var a1 = v.y * u.x - v.x * u.y;
		var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
		s1 += a1 * b1;
		s2 += a1;
		this.area += v.x * (w1.y - u.y);
		u = v;
		v = w1;
		cx_ite = cx_ite.next;
		var w2 = cx_ite;
		var a2 = v.y * u.x - v.x * u.y;
		var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
		s1 += a2 * b2;
		s2 += a2;
		this.area += v.x * (w2.y - u.y);
		this.inertia = s1 / (6 * s2);
		this.area *= 0.5;
		if(this.area < 0) {
			this.area = -this.area;
			this.reverse_vertices();
		}
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.__validate_angDrag = function() {
	if(this.lverts.length < 3) throw "Error: Polygon's with less than 3 vertices have no meaningful angDrag";
	this.validate_area_inertia();
	this.validate_laxi();
	var accum = 0.0;
	var ei = this.edges.head;
	var perim = 0.0;
	var cx_cont = true;
	var cx_itei = this.lverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var edge = ei.elt;
		ei = ei.next;
		perim += edge.length;
		var dx = 0.0;
		var dy = 0.0;
		dx = v.x - u.x;
		dy = v.y - u.y;
		accum += edge.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
		var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
		if(t > 0) {
			var ta;
			if(t > 1) ta = 1; else ta = t;
			var cx = 0.0;
			var cy = 0.0;
			cx = u.x;
			cy = u.y;
			var t1 = ta;
			cx += dx * t1;
			cy += dy * t1;
			var dota = edge.lnormy * u.x - edge.lnormx * u.y;
			var dotb = edge.lnormy * cx - edge.lnormx * cy;
			var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
			accum += dots * ta * edge.length * nape.Config.fluidAngularDrag;
		}
		if(t < 1) {
			var tb;
			if(t < 0) tb = 0; else tb = t;
			var cx1 = 0.0;
			var cy1 = 0.0;
			cx1 = u.x;
			cy1 = u.y;
			var t2 = tb;
			cx1 += dx * t2;
			cy1 += dy * t2;
			var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
			var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
			var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
			accum += dots1 * nape.Config.fluidVacuumDrag * (1 - tb) * edge.length * nape.Config.fluidAngularDrag;
		}
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	if(cx_cont) do {
		cx_itej = this.lverts.next;
		var v1 = cx_itej;
		var edge1 = ei.elt;
		ei = ei.next;
		perim += edge1.length;
		var dx1 = 0.0;
		var dy1 = 0.0;
		dx1 = v1.x - u.x;
		dy1 = v1.y - u.y;
		accum += edge1.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
		var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
		if(t3 > 0) {
			var ta1;
			if(t3 > 1) ta1 = 1; else ta1 = t3;
			var cx2 = 0.0;
			var cy2 = 0.0;
			cx2 = u.x;
			cy2 = u.y;
			var t4 = ta1;
			cx2 += dx1 * t4;
			cy2 += dy1 * t4;
			var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
			var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
			var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
			accum += dots2 * ta1 * edge1.length * nape.Config.fluidAngularDrag;
		}
		if(t3 < 1) {
			var tb1;
			if(t3 < 0) tb1 = 0; else tb1 = t3;
			var cx3 = 0.0;
			var cy3 = 0.0;
			cx3 = u.x;
			cy3 = u.y;
			var t5 = tb1;
			cx3 += dx1 * t5;
			cy3 += dy1 * t5;
			var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
			var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
			var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
			accum += dots3 * nape.Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape.Config.fluidAngularDrag;
		}
	} while(false);
	this.angDrag = accum / (this.inertia * perim);
};
zpp_nape.shape.ZPP_Polygon.prototype.__validate_localCOM = function() {
	if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful localCOM";
	if(this.lverts.next.next == null) {
		this.localCOMx = this.lverts.next.x;
		this.localCOMy = this.lverts.next.y;
	} else if(this.lverts.next.next.next == null) {
		this.localCOMx = this.lverts.next.x;
		this.localCOMy = this.lverts.next.y;
		var t = 1.0;
		this.localCOMx += this.lverts.next.next.x * t;
		this.localCOMy += this.lverts.next.next.y * t;
		var t1 = 0.5;
		this.localCOMx *= t1;
		this.localCOMy *= t1;
	} else {
		this.localCOMx = 0;
		this.localCOMy = 0;
		var area = 0.0;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		var v = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var w = cx_ite;
			area += v.x * (w.y - u.y);
			var cf = w.y * v.x - w.x * v.y;
			this.localCOMx += (v.x + w.x) * cf;
			this.localCOMy += (v.y + w.y) * cf;
			u = v;
			v = w;
			cx_ite = cx_ite.next;
		}
		cx_ite = this.lverts.next;
		var w1 = cx_ite;
		area += v.x * (w1.y - u.y);
		var cf1 = w1.y * v.x - w1.x * v.y;
		this.localCOMx += (v.x + w1.x) * cf1;
		this.localCOMy += (v.y + w1.y) * cf1;
		u = v;
		v = w1;
		cx_ite = cx_ite.next;
		var w2 = cx_ite;
		area += v.x * (w2.y - u.y);
		var cf2 = w2.y * v.x - w2.x * v.y;
		this.localCOMx += (v.x + w2.x) * cf2;
		this.localCOMy += (v.y + w2.y) * cf2;
		area = 1 / (3 * area);
		var t2 = area;
		this.localCOMx *= t2;
		this.localCOMy *= t2;
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.localCOM_validate = function() {
	if(this.lverts.next == null) throw "Error: An empty polygon does not have any meaningful localCOM";
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
};
zpp_nape.shape.ZPP_Polygon.prototype.localCOM_invalidate = function(x) {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
	var delx = 0;
	var dely = 0;
	delx = x.x - this.localCOMx;
	dely = x.y - this.localCOMy;
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var t = 1.0;
		p.x += delx * t;
		p.y += dely * t;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.setupLocalCOM = function() {
	this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
	this.wrap_localCOM.zpp_inner._inuse = true;
	this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
	this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
};
zpp_nape.shape.ZPP_Polygon.prototype.__translate = function(dx,dy) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var t = 1.0;
		p.x += dx * t;
		p.y += dy * t;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.__scale = function(sx,sy) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		p.x *= sx;
		p.y *= sy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.__rotate = function(ax,ay) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = ay * p.x - ax * p.y;
		tempy = p.x * ax + p.y * ay;
		p.x = tempx;
		p.y = tempy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.__transform = function(mat) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
		p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
		p.x = t;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
zpp_nape.shape.ZPP_Polygon.prototype.__copy = function() {
	var ret = new nape.shape.Polygon(this.outer_zn.get_localVerts()).zpp_inner_zn;
	return ret;
};
zpp_nape.shape.ZPP_Polygon.prototype.__class__ = zpp_nape.shape.ZPP_Polygon;
if(!zpp_nape.space) zpp_nape.space = {};
zpp_nape.space.ZPP_Broadphase = $hxClasses['zpp_nape.space.ZPP_Broadphase'] = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
zpp_nape.space.ZPP_Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_nape.space.ZPP_Broadphase.prototype.space = null;
zpp_nape.space.ZPP_Broadphase.prototype.is_sweep = null;
zpp_nape.space.ZPP_Broadphase.prototype.sweep = null;
zpp_nape.space.ZPP_Broadphase.prototype.dynab = null;
zpp_nape.space.ZPP_Broadphase.prototype.insert = function(shape) {
	if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
};
zpp_nape.space.ZPP_Broadphase.prototype.remove = function(shape) {
	if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
};
zpp_nape.space.ZPP_Broadphase.prototype.sync = function(shape) {
	if(this.is_sweep) {
		if(!this.sweep.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
	} else this.dynab.__sync(shape);
};
zpp_nape.space.ZPP_Broadphase.prototype.broadphase = function(space,discrete) {
};
zpp_nape.space.ZPP_Broadphase.prototype.clear = function() {
};
zpp_nape.space.ZPP_Broadphase.prototype.shapesUnderPoint = function(x,y,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.aabbShape = null;
zpp_nape.space.ZPP_Broadphase.prototype.matrix = null;
zpp_nape.space.ZPP_Broadphase.prototype.updateAABBShape = function(aabb) {
	if(this.aabbShape == null) {
		var body = new nape.phys.Body((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)));
		body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape.shape.Polygon(nape.shape.Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny)));
	} else {
		var ab = this.aabbShape.zpp_inner.aabb;
		var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
		var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
		if(this.matrix == null) this.matrix = new nape.geom.Mat23();
		this.matrix.set_a(sx);
		this.matrix.set_b(this.matrix.set_c(0));
		this.matrix.set_d(sy);
		this.matrix.set_tx(aabb.minx - sx * ab.minx);
		this.matrix.set_ty(aabb.miny - sy * ab.miny);
		this.aabbShape.transform(this.matrix);
	}
	this.aabbShape.zpp_inner.validate_aabb();
	this.aabbShape.zpp_inner.polygon.validate_gaxi();
};
zpp_nape.space.ZPP_Broadphase.prototype.shapesInAABB = function(aabb,strict,containment,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.bodiesInAABB = function(aabb,strict,containment,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.circShape = null;
zpp_nape.space.ZPP_Broadphase.prototype.updateCircShape = function(x,y,r) {
	if(this.circShape == null) {
		var body = new nape.phys.Body((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)));
		body.zpp_inner.wrap_shapes.add(this.circShape = new nape.shape.Circle(r,nape.geom.Vec2.get(x,y,null)));
	} else {
		var ci = this.circShape.zpp_inner.circle;
		var ss = r / ci.radius;
		if(this.matrix == null) this.matrix = new nape.geom.Mat23();
		this.matrix.set_a(this.matrix.set_d(ss));
		this.matrix.set_b(this.matrix.set_c(0));
		this.matrix.set_tx(x - ss * ci.localCOMx);
		this.matrix.set_ty(y - ss * ci.localCOMy);
		this.circShape.transform(this.matrix);
	}
	this.circShape.zpp_inner.validate_aabb();
};
zpp_nape.space.ZPP_Broadphase.prototype.shapesInCircle = function(x,y,r,containment,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.bodiesInCircle = function(x,y,r,containment,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.validateShape = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
zpp_nape.space.ZPP_Broadphase.prototype.shapesInShape = function(shape,containment,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.bodiesInShape = function(shape,containment,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.rayCast = function(ray,inner,filter) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.rayMultiCast = function(ray,inner,filter,output) {
	return null;
};
zpp_nape.space.ZPP_Broadphase.prototype.__class__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_AABBNode = $hxClasses['zpp_nape.space.ZPP_AABBNode'] = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
zpp_nape.space.ZPP_AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_nape.space.ZPP_AABBNode.prototype.aabb = null;
zpp_nape.space.ZPP_AABBNode.prototype.shape = null;
zpp_nape.space.ZPP_AABBNode.prototype.dyn = null;
zpp_nape.space.ZPP_AABBNode.prototype.parent = null;
zpp_nape.space.ZPP_AABBNode.prototype.child1 = null;
zpp_nape.space.ZPP_AABBNode.prototype.child2 = null;
zpp_nape.space.ZPP_AABBNode.prototype.height = null;
zpp_nape.space.ZPP_AABBNode.prototype.rayt = null;
zpp_nape.space.ZPP_AABBNode.prototype.next = null;
zpp_nape.space.ZPP_AABBNode.prototype.alloc = function() {
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) this.aabb = new zpp_nape.geom.ZPP_AABB(); else {
		this.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = this.aabb.next;
		this.aabb.next = null;
	}
	null;
	this.moved = false;
	this.synced = false;
	this.first_sync = false;
};
zpp_nape.space.ZPP_AABBNode.prototype.free = function() {
	this.height = -1;
	var o = this.aabb;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
	zpp_nape.geom.ZPP_AABB.zpp_pool = o;
	this.child1 = this.child2 = this.parent = null;
	this.next = null;
	this.snext = null;
	this.mnext = null;
};
zpp_nape.space.ZPP_AABBNode.prototype.mnext = null;
zpp_nape.space.ZPP_AABBNode.prototype.moved = null;
zpp_nape.space.ZPP_AABBNode.prototype.snext = null;
zpp_nape.space.ZPP_AABBNode.prototype.synced = null;
zpp_nape.space.ZPP_AABBNode.prototype.first_sync = null;
zpp_nape.space.ZPP_AABBNode.prototype.isLeaf = function() {
	return this.child1 == null;
};
zpp_nape.space.ZPP_AABBNode.prototype.__class__ = zpp_nape.space.ZPP_AABBNode;
zpp_nape.space.ZPP_AABBPair = $hxClasses['zpp_nape.space.ZPP_AABBPair'] = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
zpp_nape.space.ZPP_AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_nape.space.ZPP_AABBPair.prototype.n1 = null;
zpp_nape.space.ZPP_AABBPair.prototype.n2 = null;
zpp_nape.space.ZPP_AABBPair.prototype.first = null;
zpp_nape.space.ZPP_AABBPair.prototype.sleeping = null;
zpp_nape.space.ZPP_AABBPair.prototype.id = null;
zpp_nape.space.ZPP_AABBPair.prototype.di = null;
zpp_nape.space.ZPP_AABBPair.prototype.arb = null;
zpp_nape.space.ZPP_AABBPair.prototype.next = null;
zpp_nape.space.ZPP_AABBPair.prototype.alloc = function() {
};
zpp_nape.space.ZPP_AABBPair.prototype.free = function() {
	this.n1 = this.n2 = null;
	this.sleeping = false;
};
zpp_nape.space.ZPP_AABBPair.prototype.__class__ = zpp_nape.space.ZPP_AABBPair;
zpp_nape.space.ZPP_AABBTree = $hxClasses['zpp_nape.space.ZPP_AABBTree'] = function() {
	this.root = null;
};
zpp_nape.space.ZPP_AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_nape.space.ZPP_AABBTree.prototype.root = null;
zpp_nape.space.ZPP_AABBTree.prototype.clear = function() {
	if(this.root == null) return;
	var stack = null;
	this.root.next = stack;
	stack = this.root;
	while(stack != null) {
		var node;
		var ret = stack;
		stack = ret.next;
		ret.next = null;
		node = ret;
		if(node.child1 == null) {
			node.shape.node = null;
			node.shape.removedFromSpace();
			node.shape = null;
		} else {
			if(node.child1 != null) {
				node.child1.next = stack;
				stack = node.child1;
			}
			if(node.child2 != null) {
				node.child2.next = stack;
				stack = node.child2;
			}
		}
		var o = node;
		o.free();
		o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
	}
	this.root = null;
};
zpp_nape.space.ZPP_AABBTree.prototype.insertLeaf = function(leaf) {
	this.inlined_insertLeaf(leaf);
};
zpp_nape.space.ZPP_AABBTree.prototype.inlined_insertLeaf = function(leaf) {
	if(this.root == null) {
		this.root = leaf;
		this.root.parent = null;
	} else {
		var leafaabb = leaf.aabb;
		var node = this.root;
		while(!(node.child1 == null)) {
			var child1 = node.child1;
			var child2 = node.child2;
			var area = node.aabb.perimeter();
			zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
			var carea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
			var cost = 2 * carea;
			var icost = 2 * (carea - area);
			var cost1;
			zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
			if(child1.child1 == null) cost1 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost; else {
				var oarea = child1.aabb.perimeter();
				var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
				cost1 = narea - oarea + icost;
			}
			var cost2;
			zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
			if(child2.child1 == null) cost2 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost; else {
				var oarea1 = child2.aabb.perimeter();
				var narea1 = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
				cost2 = narea1 - oarea1 + icost;
			}
			if(cost < cost1 && cost < cost2) break; else if(cost1 < cost2) node = child1; else node = child2;
		}
		var sibling = node;
		var oparent = sibling.parent;
		var nparent;
		if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) nparent = new zpp_nape.space.ZPP_AABBNode(); else {
			nparent = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = nparent.next;
			nparent.next = null;
		}
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) nparent.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			nparent.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = nparent.aabb.next;
			nparent.aabb.next = null;
		}
		null;
		nparent.moved = false;
		nparent.synced = false;
		nparent.first_sync = false;
		nparent.parent = oparent;
		nparent.aabb.setCombine(leafaabb,sibling.aabb);
		nparent.height = sibling.height + 1;
		if(oparent != null) {
			if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
		} else {
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
			this.root = nparent;
		}
		node = leaf.parent;
		while(node != null) {
			node = this.balance(node);
			var child11 = node.child1;
			var child21 = node.child2;
			node.height = 1 + (function($this) {
				var $r;
				var x = child11.height;
				var y = child21.height;
				$r = x > y?x:y;
				return $r;
			}(this));
			node.aabb.setCombine(child11.aabb,child21.aabb);
			node = node.parent;
		}
	}
};
zpp_nape.space.ZPP_AABBTree.prototype.removeLeaf = function(leaf) {
	this.inlined_removeLeaf(leaf);
};
zpp_nape.space.ZPP_AABBTree.prototype.inlined_removeLeaf = function(leaf) {
	if(leaf == this.root) {
		this.root = null;
		return;
	} else {
		var parent = leaf.parent;
		var gparent = parent.parent;
		var sibling;
		if(parent.child1 == leaf) sibling = parent.child2; else sibling = parent.child1;
		if(gparent != null) {
			if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
			sibling.parent = gparent;
			var o = parent;
			o.free();
			o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
			var node = gparent;
			while(node != null) {
				node = this.balance(node);
				var child1 = node.child1;
				var child2 = node.child2;
				node.aabb.setCombine(child1.aabb,child2.aabb);
				node.height = 1 + (function($this) {
					var $r;
					var x = child1.height;
					var y = child2.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node = node.parent;
			}
		} else {
			this.root = sibling;
			sibling.parent = null;
			var o1 = parent;
			o1.free();
			o1.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o1;
		}
	}
};
zpp_nape.space.ZPP_AABBTree.prototype.balance = function(a) {
	if(a.child1 == null || a.height < 2) return a; else {
		var b = a.child1;
		var c = a.child2;
		var balance = c.height - b.height;
		if(balance > 1) {
			var f = c.child1;
			var g = c.child2;
			c.child1 = a;
			c.parent = a.parent;
			a.parent = c;
			if(c.parent != null) {
				if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
			} else this.root = c;
			if(f.height > g.height) {
				c.child2 = f;
				a.child2 = g;
				g.parent = a;
				a.aabb.setCombine(b.aabb,g.aabb);
				c.aabb.setCombine(a.aabb,f.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x = b.height;
					var y = g.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				c.height = 1 + (function($this) {
					var $r;
					var x1 = a.height;
					var y1 = f.height;
					$r = x1 > y1?x1:y1;
					return $r;
				}(this));
			} else {
				c.child2 = g;
				a.child2 = f;
				f.parent = a;
				a.aabb.setCombine(b.aabb,f.aabb);
				c.aabb.setCombine(a.aabb,g.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x2 = b.height;
					var y2 = f.height;
					$r = x2 > y2?x2:y2;
					return $r;
				}(this));
				c.height = 1 + (function($this) {
					var $r;
					var x3 = a.height;
					var y3 = g.height;
					$r = x3 > y3?x3:y3;
					return $r;
				}(this));
			}
			return c;
		} else if(balance < -1) {
			var f1 = b.child1;
			var g1 = b.child2;
			b.child1 = a;
			b.parent = a.parent;
			a.parent = b;
			if(b.parent != null) {
				if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
			} else this.root = b;
			if(f1.height > g1.height) {
				b.child2 = f1;
				a.child1 = g1;
				g1.parent = a;
				a.aabb.setCombine(c.aabb,g1.aabb);
				b.aabb.setCombine(a.aabb,f1.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x4 = c.height;
					var y4 = g1.height;
					$r = x4 > y4?x4:y4;
					return $r;
				}(this));
				b.height = 1 + (function($this) {
					var $r;
					var x5 = a.height;
					var y5 = f1.height;
					$r = x5 > y5?x5:y5;
					return $r;
				}(this));
			} else {
				b.child2 = g1;
				a.child1 = f1;
				f1.parent = a;
				a.aabb.setCombine(c.aabb,f1.aabb);
				b.aabb.setCombine(a.aabb,g1.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x6 = c.height;
					var y6 = f1.height;
					$r = x6 > y6?x6:y6;
					return $r;
				}(this));
				b.height = 1 + (function($this) {
					var $r;
					var x7 = a.height;
					var y7 = g1.height;
					$r = x7 > y7?x7:y7;
					return $r;
				}(this));
			}
			return b;
		} else return a;
	}
};
zpp_nape.space.ZPP_AABBTree.prototype.__class__ = zpp_nape.space.ZPP_AABBTree;
zpp_nape.space.ZPP_DynAABBPhase = $hxClasses['zpp_nape.space.ZPP_DynAABBPhase'] = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_nape.space.ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_nape.space.ZPP_AABBTree();
	this.dtree = new zpp_nape.space.ZPP_AABBTree();
};
zpp_nape.space.ZPP_DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_nape.space.ZPP_DynAABBPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
for(var k in zpp_nape.space.ZPP_Broadphase.prototype ) zpp_nape.space.ZPP_DynAABBPhase.prototype[k] = zpp_nape.space.ZPP_Broadphase.prototype[k];
zpp_nape.space.ZPP_DynAABBPhase.prototype.stree = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.dtree = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.pairs = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.syncs = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.moves = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.dyn = function(shape) {
	if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return false; else return !shape.body.component.sleeping;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.__insert = function(shape) {
	var node;
	if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) node = new zpp_nape.space.ZPP_AABBNode(); else {
		node = zpp_nape.space.ZPP_AABBNode.zpp_pool;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = node.next;
		node.next = null;
	}
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) node.aabb = new zpp_nape.geom.ZPP_AABB(); else {
		node.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = node.aabb.next;
		node.aabb.next = null;
	}
	null;
	node.moved = false;
	node.synced = false;
	node.first_sync = false;
	node.shape = shape;
	shape.node = node;
	node.synced = true;
	node.first_sync = true;
	node.snext = this.syncs;
	this.syncs = node;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.__remove = function(shape) {
	var node = shape.node;
	if(!node.first_sync) {
		if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
	}
	shape.node = null;
	if(node.synced) {
		var pre = null;
		var cur = this.syncs;
		while(cur != null) {
			if(cur == node) break;
			pre = cur;
			cur = cur.snext;
		}
		if(pre == null) this.syncs = cur.snext; else pre.snext = cur.snext;
		cur.snext = null;
		node.synced = false;
	}
	if(node.moved) {
		var pre1 = null;
		var cur1 = this.moves;
		while(cur1 != null) {
			if(cur1 == node) break;
			pre1 = cur1;
			cur1 = cur1.mnext;
		}
		if(pre1 == null) this.moves = cur1.mnext; else pre1.mnext = cur1.mnext;
		cur1.mnext = null;
		node.moved = false;
	}
	var pre2 = null;
	var cur2 = this.pairs;
	while(cur2 != null) {
		var nxt = cur2.next;
		if(cur2.n1 == node || cur2.n2 == node) {
			if(pre2 == null) this.pairs = nxt; else pre2.next = nxt;
			if(cur2.arb != null) cur2.arb.pair = null;
			cur2.arb = null;
			cur2.n1.shape.pairs.remove(cur2);
			cur2.n2.shape.pairs.remove(cur2);
			var o = cur2;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			cur2 = nxt;
			continue;
		}
		pre2 = cur2;
		cur2 = nxt;
	}
	while(!(shape.pairs.head == null)) {
		var cur3 = shape.pairs.pop_unsafe();
		if(cur3.n1 == node) cur3.n2.shape.pairs.remove(cur3); else cur3.n1.shape.pairs.remove(cur3);
		if(cur3.arb != null) cur3.arb.pair = null;
		cur3.arb = null;
		var o1 = cur3;
		o1.n1 = o1.n2 = null;
		o1.sleeping = false;
		o1.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = o1;
	}
	var o2 = node;
	o2.free();
	o2.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
	zpp_nape.space.ZPP_AABBNode.zpp_pool = o2;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.__sync = function(shape) {
	var node = shape.node;
	if(!node.synced) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
		var sync;
		sync = node.dyn != (shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
		if(sync) {
			node.synced = true;
			node.snext = this.syncs;
			this.syncs = node;
		}
	}
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.sync_broadphase = function() {
	this.space.validation();
	if(this.syncs != null) {
		if(this.moves == null) {
			var node = this.syncs;
			while(node != null) {
				var shape = node.shape;
				if(!node.first_sync) {
					var tree;
					if(node.dyn) tree = this.dtree; else tree = this.stree;
					tree.inlined_removeLeaf(node);
				} else node.first_sync = false;
				var aabb = node.aabb;
				if(!this.space.continuous) {
					if(shape.zip_aabb) {
						if(shape.body != null) {
							shape.zip_aabb = false;
							if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
						}
					}
				}
				aabb.setExpand(shape.aabb,3.0);
				var tree1;
				if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree1 = this.dtree; else tree1 = this.stree;
				tree1.inlined_insertLeaf(node);
				node.synced = false;
				node.moved = true;
				node.mnext = node.snext;
				node.snext = null;
				node = node.mnext;
			}
			var t = this.syncs;
			this.syncs = this.moves;
			this.moves = t;
		} else while(this.syncs != null) {
			var node1;
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			node1 = ret;
			var shape1 = node1.shape;
			if(!node1.first_sync) {
				var tree2;
				if(node1.dyn) tree2 = this.dtree; else tree2 = this.stree;
				tree2.inlined_removeLeaf(node1);
			} else node1.first_sync = false;
			var aabb1 = node1.aabb;
			if(!this.space.continuous) {
				if(shape1.zip_aabb) {
					if(shape1.body != null) {
						shape1.zip_aabb = false;
						if(shape1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape1.circle.__validate_aabb(); else shape1.polygon.__validate_aabb();
					}
				}
			}
			aabb1.setExpand(shape1.aabb,3.0);
			var tree3;
			if(shape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node1.dyn = false:node1.dyn = !shape1.body.component.sleeping) tree3 = this.dtree; else tree3 = this.stree;
			tree3.inlined_insertLeaf(node1);
			node1.synced = false;
			if(!node1.moved) {
				node1.moved = true;
				node1.mnext = this.moves;
				this.moves = node1;
			}
		}
	}
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.broadphase = function(space,discrete) {
	var node = this.syncs;
	while(node != null) {
		var shape = node.shape;
		if(!node.first_sync) {
			var tree;
			if(node.dyn) tree = this.dtree; else tree = this.stree;
			tree.inlined_removeLeaf(node);
		} else node.first_sync = false;
		var aabb = node.aabb;
		if(!space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
		aabb.setExpand(shape.aabb,3.0);
		var tree1;
		if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree1 = this.dtree; else tree1 = this.stree;
		tree1.inlined_insertLeaf(node);
		node.synced = false;
		node = node.snext;
	}
	while(this.syncs != null) {
		var leaf;
		var ret = this.syncs;
		this.syncs = ret.snext;
		ret.snext = null;
		leaf = ret;
		if(leaf.moved) continue;
		leaf.moved = false;
		var lshape = leaf.shape;
		var lbody = lshape.body;
		if(lbody.component.sleeping) continue;
		var ab = leaf.aabb;
		var stack = null;
		if(this.dtree.root != null) {
			this.dtree.root.next = stack;
			stack = this.dtree.root;
		}
		while(stack != null) {
			var node1;
			var ret1 = stack;
			stack = ret1.next;
			ret1.next = null;
			node1 = ret1;
			if(node1 == leaf) continue;
			if(node1.child1 == null) {
				var shape1 = node1.shape;
				if(shape1.body != lshape.body && !(shape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					if(ab.intersect(node1.aabb)) {
						var id;
						var di;
						if(lshape.id < shape1.id) {
							id = lshape.id;
							di = shape1.id;
						} else {
							id = shape1.id;
							di = lshape.id;
						}
						var s;
						if(lshape.pairs.length < shape1.pairs.length) s = lshape; else s = shape1;
						var p = null;
						var cx_ite = s.pairs.head;
						while(cx_ite != null) {
							var px = cx_ite.elt;
							if(px.id == id && px.di == di) {
								p = px;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(p != null) {
							if(p.sleeping) {
								p.sleeping = false;
								p.next = this.pairs;
								this.pairs = p;
								p.first = true;
							}
							continue;
						}
						if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
							p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
							zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
							p.next = null;
						}
						null;
						p.n1 = leaf;
						p.n2 = node1;
						p.id = id;
						p.di = di;
						p.next = this.pairs;
						this.pairs = p;
						p.first = true;
						lshape.pairs.inlined_add(p);
						shape1.pairs.inlined_add(p);
					}
				}
			} else if(ab.intersect(node1.aabb)) {
				if(node1.child1 != null) {
					node1.child1.next = stack;
					stack = node1.child1;
				}
				if(node1.child2 != null) {
					node1.child2.next = stack;
					stack = node1.child2;
				}
			}
		}
		if(this.stree.root != null) {
			this.stree.root.next = stack;
			stack = this.stree.root;
		}
		while(stack != null) {
			var node2;
			var ret2 = stack;
			stack = ret2.next;
			ret2.next = null;
			node2 = ret2;
			if(node2 == leaf) continue;
			if(node2.child1 == null) {
				var shape2 = node2.shape;
				if(shape2.body != lshape.body && !(shape2.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					if(ab.intersect(node2.aabb)) {
						var id1;
						var di1;
						if(lshape.id < shape2.id) {
							id1 = lshape.id;
							di1 = shape2.id;
						} else {
							id1 = shape2.id;
							di1 = lshape.id;
						}
						var s1;
						if(lshape.pairs.length < shape2.pairs.length) s1 = lshape; else s1 = shape2;
						var p1 = null;
						var cx_ite1 = s1.pairs.head;
						while(cx_ite1 != null) {
							var px1 = cx_ite1.elt;
							if(px1.id == id1 && px1.di == di1) {
								p1 = px1;
								break;
							}
							cx_ite1 = cx_ite1.next;
						}
						if(p1 != null) {
							if(p1.sleeping) {
								p1.sleeping = false;
								p1.next = this.pairs;
								this.pairs = p1;
								p1.first = true;
							}
							continue;
						}
						if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p1 = new zpp_nape.space.ZPP_AABBPair(); else {
							p1 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
							zpp_nape.space.ZPP_AABBPair.zpp_pool = p1.next;
							p1.next = null;
						}
						null;
						p1.n1 = leaf;
						p1.n2 = node2;
						p1.id = id1;
						p1.di = di1;
						p1.next = this.pairs;
						this.pairs = p1;
						p1.first = true;
						lshape.pairs.inlined_add(p1);
						shape2.pairs.inlined_add(p1);
					}
				}
			} else if(ab.intersect(node2.aabb)) {
				if(node2.child1 != null) {
					node2.child1.next = stack;
					stack = node2.child1;
				}
				if(node2.child2 != null) {
					node2.child2.next = stack;
					stack = node2.child2;
				}
			}
		}
	}
	while(this.moves != null) {
		var leaf1;
		var ret3 = this.moves;
		this.moves = ret3.mnext;
		ret3.mnext = null;
		leaf1 = ret3;
		leaf1.moved = false;
		var lshape1 = leaf1.shape;
		var lbody1 = lshape1.body;
		if(lbody1.component.sleeping) continue;
		var ab1 = leaf1.aabb;
		var stack1 = null;
		if(this.dtree.root != null) {
			this.dtree.root.next = stack1;
			stack1 = this.dtree.root;
		}
		while(stack1 != null) {
			var node3;
			var ret4 = stack1;
			stack1 = ret4.next;
			ret4.next = null;
			node3 = ret4;
			if(node3 == leaf1) continue;
			if(node3.child1 == null) {
				var shape3 = node3.shape;
				if(shape3.body != lshape1.body && !(shape3.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					if(ab1.intersect(node3.aabb)) {
						var id2;
						var di2;
						if(lshape1.id < shape3.id) {
							id2 = lshape1.id;
							di2 = shape3.id;
						} else {
							id2 = shape3.id;
							di2 = lshape1.id;
						}
						var s2;
						if(lshape1.pairs.length < shape3.pairs.length) s2 = lshape1; else s2 = shape3;
						var p2 = null;
						var cx_ite2 = s2.pairs.head;
						while(cx_ite2 != null) {
							var px2 = cx_ite2.elt;
							if(px2.id == id2 && px2.di == di2) {
								p2 = px2;
								break;
							}
							cx_ite2 = cx_ite2.next;
						}
						if(p2 != null) {
							if(p2.sleeping) {
								p2.sleeping = false;
								p2.next = this.pairs;
								this.pairs = p2;
								p2.first = true;
							}
							continue;
						}
						if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p2 = new zpp_nape.space.ZPP_AABBPair(); else {
							p2 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
							zpp_nape.space.ZPP_AABBPair.zpp_pool = p2.next;
							p2.next = null;
						}
						null;
						p2.n1 = leaf1;
						p2.n2 = node3;
						p2.id = id2;
						p2.di = di2;
						p2.next = this.pairs;
						this.pairs = p2;
						p2.first = true;
						lshape1.pairs.inlined_add(p2);
						shape3.pairs.inlined_add(p2);
					}
				}
			} else if(ab1.intersect(node3.aabb)) {
				if(node3.child1 != null) {
					node3.child1.next = stack1;
					stack1 = node3.child1;
				}
				if(node3.child2 != null) {
					node3.child2.next = stack1;
					stack1 = node3.child2;
				}
			}
		}
		if(this.stree.root != null) {
			this.stree.root.next = stack1;
			stack1 = this.stree.root;
		}
		while(stack1 != null) {
			var node4;
			var ret5 = stack1;
			stack1 = ret5.next;
			ret5.next = null;
			node4 = ret5;
			if(node4 == leaf1) continue;
			if(node4.child1 == null) {
				var shape4 = node4.shape;
				if(shape4.body != lshape1.body && !(shape4.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					if(ab1.intersect(node4.aabb)) {
						var id3;
						var di3;
						if(lshape1.id < shape4.id) {
							id3 = lshape1.id;
							di3 = shape4.id;
						} else {
							id3 = shape4.id;
							di3 = lshape1.id;
						}
						var s3;
						if(lshape1.pairs.length < shape4.pairs.length) s3 = lshape1; else s3 = shape4;
						var p3 = null;
						var cx_ite3 = s3.pairs.head;
						while(cx_ite3 != null) {
							var px3 = cx_ite3.elt;
							if(px3.id == id3 && px3.di == di3) {
								p3 = px3;
								break;
							}
							cx_ite3 = cx_ite3.next;
						}
						if(p3 != null) {
							if(p3.sleeping) {
								p3.sleeping = false;
								p3.next = this.pairs;
								this.pairs = p3;
								p3.first = true;
							}
							continue;
						}
						if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p3 = new zpp_nape.space.ZPP_AABBPair(); else {
							p3 = zpp_nape.space.ZPP_AABBPair.zpp_pool;
							zpp_nape.space.ZPP_AABBPair.zpp_pool = p3.next;
							p3.next = null;
						}
						null;
						p3.n1 = leaf1;
						p3.n2 = node4;
						p3.id = id3;
						p3.di = di3;
						p3.next = this.pairs;
						this.pairs = p3;
						p3.first = true;
						lshape1.pairs.inlined_add(p3);
						shape4.pairs.inlined_add(p3);
					}
				}
			} else if(ab1.intersect(node4.aabb)) {
				if(node4.child1 != null) {
					node4.child1.next = stack1;
					stack1 = node4.child1;
				}
				if(node4.child2 != null) {
					node4.child2.next = stack1;
					stack1 = node4.child2;
				}
			}
		}
	}
	var pre = null;
	var cur = this.pairs;
	while(cur != null) {
		if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
			if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
			cur.n1.shape.pairs.inlined_try_remove(cur);
			cur.n2.shape.pairs.inlined_try_remove(cur);
			var nxt = cur.next;
			if(cur.arb != null) cur.arb.pair = null;
			cur.arb = null;
			var o = cur;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			cur = nxt;
			continue;
		}
		var s11 = cur.n1.shape;
		var b1 = s11.body;
		var s21 = cur.n2.shape;
		var b2 = s21.body;
		if(!cur.first) {
			if((b1.component.sleeping || b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) && (b2.component.sleeping || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
				cur.sleeping = true;
				if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
				cur = cur.next;
				continue;
			}
		}
		cur.first = false;
		if(s11.aabb.intersect(s21.aabb)) {
			var oarb = cur.arb;
			if(discrete) cur.arb = space.narrowPhase(s11,s21,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false); else cur.arb = space.continuousEvent(s11,s21,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false);
			if(cur.arb == null) {
				if(oarb != null) oarb.pair = null;
			} else cur.arb.pair = cur;
		}
		pre = cur;
		cur = cur.next;
	}
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.clear = function() {
	while(this.syncs != null) {
		var next = this.syncs.snext;
		this.syncs.snext = null;
		if(this.syncs.first_sync) {
			this.syncs.shape.node = null;
			this.syncs.shape.removedFromSpace();
			this.syncs.shape = null;
		}
		this.syncs = next;
	}
	while(this.moves != null) {
		var next1 = this.moves.mnext;
		this.moves.mnext = null;
		if(this.moves.first_sync) {
			this.moves.shape.node = null;
			this.moves.shape.removedFromSpace();
			this.moves.shape = null;
		}
		this.moves = next1;
	}
	while(this.pairs != null) {
		var nxt = this.pairs.next;
		if(this.pairs.arb != null) this.pairs.arb.pair = null;
		this.pairs.arb = null;
		this.pairs.n1.shape.pairs.inlined_try_remove(this.pairs);
		this.pairs.n2.shape.pairs.inlined_try_remove(this.pairs);
		var o = this.pairs;
		o.n1 = o.n2 = null;
		o.sleeping = false;
		o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
		this.pairs = nxt;
	}
	this.dtree.clear();
	this.stree.clear();
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.treeStack = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(node.aabb.containsPoint(v)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node1 = this.treeStack.pop_unsafe();
			if(node1.aabb.containsPoint(v)) {
				if(node1.child1 == null) {
					if(filter == null || node1.shape.filter.shouldCollide(filter)) {
						if(node1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(node1.shape.circle,v)) ret.push(node1.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(node1.shape.polygon,v)) ret.push(node1.shape.outer);
					}
				} else {
					if(node1.child1 != null) this.treeStack.add(node1.child1);
					if(node1.child2 != null) this.treeStack.add(node1.child2);
				}
			}
		}
	}
	var o = v;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(node.aabb.containsPoint(v)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
						}
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node1 = this.treeStack.pop_unsafe();
			if(node1.aabb.containsPoint(v)) {
				if(node1.child1 == null) {
					var body1 = node1.shape.body.outer;
					if(!ret.has(body1)) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(node1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node1.shape.circle,v)) ret.push(body1);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node1.shape.polygon,v)) ret.push(body1);
						}
					}
				} else {
					if(node1.child1 != null) this.treeStack.add(node1.child1);
					if(node1.child2 != null) this.treeStack.add(node1.child2);
				}
			}
		}
	}
	var o = v;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.treeStack2 = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(ab.contains(node.aabb)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
				} else {
					if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					this.treeStack2.add(node);
					while(!(this.treeStack2.head == null)) {
						var node1 = this.treeStack2.pop_unsafe();
						if(node1.child1 == null) {
							if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
						} else {
							if(node1.child1 != null) this.treeStack2.add(node1.child1);
							if(node1.child2 != null) this.treeStack2.add(node1.child2);
						}
					}
				}
			} else if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(strict) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
						} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node2 = this.treeStack.pop_unsafe();
			if(ab.contains(node2.aabb)) {
				if(node2.child1 == null) {
					if(filter == null || node2.shape.filter.shouldCollide(filter)) ret.push(node2.shape.outer);
				} else {
					if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					this.treeStack2.add(node2);
					while(!(this.treeStack2.head == null)) {
						var node3 = this.treeStack2.pop_unsafe();
						if(node3.child1 == null) {
							if(filter == null || node3.shape.filter.shouldCollide(filter)) ret.push(node3.shape.outer);
						} else {
							if(node3.child1 != null) this.treeStack2.add(node3.child1);
							if(node3.child2 != null) this.treeStack2.add(node3.child2);
						}
					}
				}
			} else if(node2.aabb.intersect(ab)) {
				if(node2.child1 == null) {
					if(filter == null || node2.shape.filter.shouldCollide(filter)) {
						if(strict) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape)) ret.push(node2.shape.outer);
							} else if(ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(node2.shape.outer);
						} else if(!containment || ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer);
					}
				} else {
					if(node2.child1 != null) this.treeStack.add(node2.child1);
					if(node2.child2 != null) this.treeStack.add(node2.child2);
				}
			}
		}
	}
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.failed = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.failed == null) this.failed = new nape.phys.BodyList();
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(ab.contains(node.aabb)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) ret.push(body);
					}
				} else {
					if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					this.treeStack2.add(node);
					while(!(this.treeStack2.head == null)) {
						var node1 = this.treeStack2.pop_unsafe();
						if(node1.child1 == null) {
							if(filter == null || node1.shape.filter.shouldCollide(filter)) {
								var body1 = node1.shape.body.outer;
								if(!ret.has(body1)) ret.push(body1);
							}
						} else {
							if(node1.child1 != null) this.treeStack2.add(node1.child1);
							if(node1.child2 != null) this.treeStack2.add(node1.child2);
						}
					}
				}
			} else if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body2 = node.shape.body.outer;
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(strict) {
							if(containment) {
								if(!this.failed.has(body2)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape);
									if(!ret.has(body2) && col) ret.push(body2); else if(!col) {
										ret.remove(body2);
										this.failed.push(body2);
									}
								}
							} else if(!ret.has(body2) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body2);
						} else if(containment) {
							if(!this.failed.has(body2)) {
								var col1 = ab.contains(node.shape.aabb);
								if(!ret.has(body2) && col1) ret.push(body2); else if(!col1) {
									ret.remove(body2);
									this.failed.push(body2);
								}
							}
						} else if(!ret.has(body2) && ab.contains(node.shape.aabb)) ret.push(body2);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node2 = this.treeStack.pop_unsafe();
			if(ab.contains(node2.aabb)) {
				if(node2.child1 == null) {
					if(filter == null || node2.shape.filter.shouldCollide(filter)) {
						var body3 = node2.shape.body.outer;
						if(!ret.has(body3)) ret.push(body3);
					}
				} else {
					if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					this.treeStack2.add(node2);
					while(!(this.treeStack2.head == null)) {
						var node3 = this.treeStack2.pop_unsafe();
						if(node3.child1 == null) {
							if(filter == null || node3.shape.filter.shouldCollide(filter)) {
								var body4 = node3.shape.body.outer;
								if(!ret.has(body4)) ret.push(body4);
							}
						} else {
							if(node3.child1 != null) this.treeStack2.add(node3.child1);
							if(node3.child2 != null) this.treeStack2.add(node3.child2);
						}
					}
				}
			} else if(node2.aabb.intersect(ab)) {
				if(node2.child1 == null) {
					var body5 = node2.shape.body.outer;
					if(filter == null || node2.shape.filter.shouldCollide(filter)) {
						if(strict) {
							if(containment) {
								if(!this.failed.has(body5)) {
									var col2 = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape);
									if(!ret.has(body5) && col2) ret.push(body5); else if(!col2) {
										ret.remove(body5);
										this.failed.push(body5);
									}
								}
							} else if(!ret.has(body5) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(body5);
						} else if(containment) {
							if(!this.failed.has(body5)) {
								var col3 = ab.contains(node2.shape.aabb);
								if(!ret.has(body5) && col3) ret.push(body5); else if(!col3) {
									ret.remove(body5);
									this.failed.push(body5);
								}
							}
						} else if(!ret.has(body5) && ab.contains(node2.shape.aabb)) ret.push(body5);
					}
				} else {
					if(node2.child1 != null) this.treeStack.add(node2.child1);
					if(node2.child2 != null) this.treeStack.add(node2.child2);
				}
			}
		}
	}
	this.failed.clear();
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node1 = this.treeStack.pop_unsafe();
			if(node1.aabb.intersect(ab)) {
				if(node1.child1 == null) {
					if(filter == null || node1.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape)) ret.push(node1.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(node1.shape.outer);
					}
				} else {
					if(node1.child1 != null) this.treeStack.add(node1.child1);
					if(node1.child2 != null) this.treeStack.add(node1.child2);
				}
			}
		}
	}
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.failed == null) this.failed = new nape.phys.BodyList();
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node1 = this.treeStack.pop_unsafe();
			if(node1.aabb.intersect(ab)) {
				if(node1.child1 == null) {
					var body1 = node1.shape.body.outer;
					if(filter == null || node1.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(!this.failed.has(body1)) {
								var col1 = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape);
								if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
									ret.remove(body1);
									this.failed.push(body1);
								}
							}
						} else if(!ret.has(body1) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(body1);
					}
				} else {
					if(node1.child1 != null) this.treeStack.add(node1.child1);
					if(node1.child2 != null) this.treeStack.add(node1.child2);
				}
			}
		}
	}
	this.failed.clear();
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesInShape = function(shp,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shp);
	var ab = shp.aabb;
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node1 = this.treeStack.pop_unsafe();
			if(node1.aabb.intersect(ab)) {
				if(node1.child1 == null) {
					if(filter == null || node1.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(shp,node1.shape)) ret.push(node1.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,shp)) ret.push(node1.shape.outer);
					}
				} else {
					if(node1.child1 != null) this.treeStack.add(node1.child1);
					if(node1.child2 != null) this.treeStack.add(node1.child2);
				}
			}
		}
	}
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesInShape = function(shp,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shp);
	var ab = shp.aabb;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.failed == null) this.failed = new nape.phys.BodyList();
	if(this.stree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.stree.root);
		while(!(this.treeStack.head == null)) {
			var node = this.treeStack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
					}
				} else {
					if(node.child1 != null) this.treeStack.add(node.child1);
					if(node.child2 != null) this.treeStack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.treeStack.add(this.dtree.root);
		while(!(this.treeStack.head == null)) {
			var node1 = this.treeStack.pop_unsafe();
			if(node1.aabb.intersect(ab)) {
				if(node1.child1 == null) {
					var body1 = node1.shape.body.outer;
					if(filter == null || node1.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(!this.failed.has(body1)) {
								var col1 = zpp_nape.geom.ZPP_Collide.containTest(shp,node1.shape);
								if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
									ret.remove(body1);
									this.failed.push(body1);
								}
							}
						} else if(!ret.has(body1) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node1.shape,shp)) ret.push(body1);
					}
				} else {
					if(node1.child1 != null) this.treeStack.add(node1.child1);
					if(node1.child2 != null) this.treeStack.add(node1.child2);
				}
			}
		}
	}
	this.failed.clear();
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.openlist = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.rayCast = function(ray,inner,filter) {
	if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
	this.sync_broadphase();
	ray.validate_dir();
	var mint = ray.maxdist;
	if(this.dtree.root != null) {
		if(ray.aabbtest(this.dtree.root.aabb)) {
			var t = ray.aabbsect(this.dtree.root.aabb);
			if(t >= 0 && t < mint) {
				this.dtree.root.rayt = t;
				var pre = null;
				var cx_ite = this.openlist.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(this.dtree.root.rayt < j.rayt) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.openlist.inlined_insert(pre,this.dtree.root);
			}
		}
	}
	if(this.stree.root != null) {
		if(ray.aabbtest(this.stree.root.aabb)) {
			var t1 = ray.aabbsect(this.stree.root.aabb);
			if(t1 >= 0 && t1 < mint) {
				this.stree.root.rayt = t1;
				var pre1 = null;
				var cx_ite1 = this.openlist.head;
				while(cx_ite1 != null) {
					var j1 = cx_ite1.elt;
					if(this.stree.root.rayt < j1.rayt) break;
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				this.openlist.inlined_insert(pre1,this.stree.root);
			}
		}
	}
	var minres = null;
	while(!(this.openlist.head == null)) {
		var cnode = this.openlist.pop_unsafe();
		if(cnode.rayt >= mint) break;
		if(cnode.child1 == null) {
			var shape = cnode.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				var result;
				if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result = ray.circlesect(shape.circle,inner,mint); else if(ray.aabbtest(shape.aabb)) result = ray.polysect(shape.polygon,inner,mint); else result = null;
				if(result != null) {
					if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					mint = result.zpp_inner.toiDistance;
					if(minres != null) {
						if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						minres.zpp_inner.free();
					}
					minres = result;
				}
			}
		} else {
			if(cnode.child1 != null) {
				if(ray.aabbtest(cnode.child1.aabb)) {
					var t2 = ray.aabbsect(cnode.child1.aabb);
					if(t2 >= 0 && t2 < mint) {
						cnode.child1.rayt = t2;
						var pre2 = null;
						var cx_ite2 = this.openlist.head;
						while(cx_ite2 != null) {
							var j2 = cx_ite2.elt;
							if(cnode.child1.rayt < j2.rayt) break;
							pre2 = cx_ite2;
							cx_ite2 = cx_ite2.next;
						}
						this.openlist.inlined_insert(pre2,cnode.child1);
					}
				}
			}
			if(cnode.child2 != null) {
				if(ray.aabbtest(cnode.child2.aabb)) {
					var t3 = ray.aabbsect(cnode.child2.aabb);
					if(t3 >= 0 && t3 < mint) {
						cnode.child2.rayt = t3;
						var pre3 = null;
						var cx_ite3 = this.openlist.head;
						while(cx_ite3 != null) {
							var j3 = cx_ite3.elt;
							if(cnode.child2.rayt < j3.rayt) break;
							pre3 = cx_ite3;
							cx_ite3 = cx_ite3.next;
						}
						this.openlist.inlined_insert(pre3,cnode.child2);
					}
				}
			}
		}
	}
	this.openlist.clear();
	return minres;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.rayMultiCast = function(ray,inner,filter,output) {
	if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
	this.sync_broadphase();
	ray.validate_dir();
	var inf = ray.maxdist >= Math.POSITIVE_INFINITY;
	var ret;
	if(output == null) ret = new nape.geom.RayResultList(); else ret = output;
	if(this.dtree.root != null) {
		if(ray.aabbtest(this.dtree.root.aabb)) {
			if(inf) this.openlist.add(this.dtree.root); else {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
			}
		}
	}
	if(this.stree.root != null) {
		if(ray.aabbtest(this.stree.root.aabb)) {
			if(inf) this.openlist.add(this.stree.root); else {
				var t1 = ray.aabbsect(this.stree.root.aabb);
				if(t1 >= 0 && t1 < ray.maxdist) this.openlist.add(this.stree.root);
			}
		}
	}
	while(!(this.openlist.head == null)) {
		var cnode = this.openlist.pop_unsafe();
		if(cnode.child1 == null) {
			var shape = cnode.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
			}
		} else {
			if(cnode.child1 != null) {
				if(ray.aabbtest(cnode.child1.aabb)) {
					if(inf) this.openlist.add(cnode.child1); else {
						var t2 = ray.aabbsect(cnode.child1.aabb);
						if(t2 >= 0 && t2 < ray.maxdist) this.openlist.add(cnode.child1);
					}
				}
			}
			if(cnode.child2 != null) {
				if(ray.aabbtest(cnode.child2.aabb)) {
					if(inf) this.openlist.add(cnode.child2); else {
						var t3 = ray.aabbsect(cnode.child2.aabb);
						if(t3 >= 0 && t3 < ray.maxdist) this.openlist.add(cnode.child2);
					}
				}
			}
		}
	}
	this.openlist.clear();
	return ret;
};
zpp_nape.space.ZPP_DynAABBPhase.prototype.__class__ = zpp_nape.space.ZPP_DynAABBPhase;
zpp_nape.space.ZPP_Island = $hxClasses['zpp_nape.space.ZPP_Island'] = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_nape.util.ZNPList_ZPP_Component();
};
zpp_nape.space.ZPP_Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_nape.space.ZPP_Island.prototype.next = null;
zpp_nape.space.ZPP_Island.prototype.elem = function() {
	return this;
};
zpp_nape.space.ZPP_Island.prototype.begin = function() {
	return this.next;
};
zpp_nape.space.ZPP_Island.prototype._inuse = null;
zpp_nape.space.ZPP_Island.prototype.modified = null;
zpp_nape.space.ZPP_Island.prototype.pushmod = null;
zpp_nape.space.ZPP_Island.prototype.length = null;
zpp_nape.space.ZPP_Island.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.space.ZPP_Island.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.space.ZPP_Island.prototype.inlined_add = function(o) {
	var temp;
	o._inuse = true;
	temp = o;
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.space.ZPP_Island.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.space.ZPP_Island.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.space.ZPP_Island.prototype.inlined_insert = function(cur,o) {
	var temp;
	o._inuse = true;
	temp = o;
	if(cur == null) {
		temp.next = this.next;
		this.next = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.space.ZPP_Island.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.space.ZPP_Island.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.space.ZPP_Island.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.space.ZPP_Island.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.space.ZPP_Island.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.space.ZPP_Island.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.space.ZPP_Island.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.space.ZPP_Island.prototype.clear = function() {
};
zpp_nape.space.ZPP_Island.prototype.inlined_clear = function() {
};
zpp_nape.space.ZPP_Island.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.space.ZPP_Island.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.space.ZPP_Island.prototype.size = function() {
	return this.length;
};
zpp_nape.space.ZPP_Island.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.space.ZPP_Island.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		var npite = cx_ite;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.front = function() {
	return this.next;
};
zpp_nape.space.ZPP_Island.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.space.ZPP_Island.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it; else return null;
};
zpp_nape.space.ZPP_Island.prototype.comps = null;
zpp_nape.space.ZPP_Island.prototype.sleep = null;
zpp_nape.space.ZPP_Island.prototype.waket = null;
zpp_nape.space.ZPP_Island.prototype.free = function() {
};
zpp_nape.space.ZPP_Island.prototype.alloc = function() {
	this.waket = 0;
};
zpp_nape.space.ZPP_Island.prototype.__class__ = zpp_nape.space.ZPP_Island;
zpp_nape.space.ZPP_Component = $hxClasses['zpp_nape.space.ZPP_Component'] = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
zpp_nape.space.ZPP_Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_nape.space.ZPP_Component.prototype.next = null;
zpp_nape.space.ZPP_Component.prototype.parent = null;
zpp_nape.space.ZPP_Component.prototype.rank = null;
zpp_nape.space.ZPP_Component.prototype.isBody = null;
zpp_nape.space.ZPP_Component.prototype.body = null;
zpp_nape.space.ZPP_Component.prototype.constraint = null;
zpp_nape.space.ZPP_Component.prototype.island = null;
zpp_nape.space.ZPP_Component.prototype.sleeping = null;
zpp_nape.space.ZPP_Component.prototype.waket = null;
zpp_nape.space.ZPP_Component.prototype.woken = null;
zpp_nape.space.ZPP_Component.prototype.free = function() {
	this.body = null;
	this.constraint = null;
};
zpp_nape.space.ZPP_Component.prototype.alloc = function() {
};
zpp_nape.space.ZPP_Component.prototype.reset = function() {
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
};
zpp_nape.space.ZPP_Component.prototype.__class__ = zpp_nape.space.ZPP_Component;
zpp_nape.space.ZPP_CallbackSet = $hxClasses['zpp_nape.space.ZPP_CallbackSet'] = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
};
zpp_nape.space.ZPP_CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_nape.space.ZPP_CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_nape.space.ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.space.ZPP_CallbackSet(); else {
		ret = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.id = null;
zpp_nape.space.ZPP_CallbackSet.prototype.di = null;
zpp_nape.space.ZPP_CallbackSet.prototype.int1 = null;
zpp_nape.space.ZPP_CallbackSet.prototype.int2 = null;
zpp_nape.space.ZPP_CallbackSet.prototype.arbiters = null;
zpp_nape.space.ZPP_CallbackSet.prototype.COLLISIONstate = null;
zpp_nape.space.ZPP_CallbackSet.prototype.COLLISIONstamp = null;
zpp_nape.space.ZPP_CallbackSet.prototype.SENSORstate = null;
zpp_nape.space.ZPP_CallbackSet.prototype.SENSORstamp = null;
zpp_nape.space.ZPP_CallbackSet.prototype.FLUIDstate = null;
zpp_nape.space.ZPP_CallbackSet.prototype.FLUIDstamp = null;
zpp_nape.space.ZPP_CallbackSet.prototype.next = null;
zpp_nape.space.ZPP_CallbackSet.prototype.elem = function() {
	return this;
};
zpp_nape.space.ZPP_CallbackSet.prototype.begin = function() {
	return this.next;
};
zpp_nape.space.ZPP_CallbackSet.prototype._inuse = null;
zpp_nape.space.ZPP_CallbackSet.prototype.modified = null;
zpp_nape.space.ZPP_CallbackSet.prototype.pushmod = null;
zpp_nape.space.ZPP_CallbackSet.prototype.length = null;
zpp_nape.space.ZPP_CallbackSet.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.space.ZPP_CallbackSet.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_add = function(o) {
	var temp;
	o._inuse = true;
	temp = o;
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.space.ZPP_CallbackSet.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.space.ZPP_CallbackSet.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_insert = function(cur,o) {
	var temp;
	o._inuse = true;
	temp = o;
	if(cur == null) {
		temp.next = this.next;
		this.next = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.space.ZPP_CallbackSet.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.space.ZPP_CallbackSet.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.space.ZPP_CallbackSet.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.space.ZPP_CallbackSet.prototype.clear = function() {
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_clear = function() {
};
zpp_nape.space.ZPP_CallbackSet.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.space.ZPP_CallbackSet.prototype.empty = function() {
	return this.next == null;
};
zpp_nape.space.ZPP_CallbackSet.prototype.size = function() {
	return this.length;
};
zpp_nape.space.ZPP_CallbackSet.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.space.ZPP_CallbackSet.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		var npite = cx_ite;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.front = function() {
	return this.next;
};
zpp_nape.space.ZPP_CallbackSet.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it; else return null;
};
zpp_nape.space.ZPP_CallbackSet.prototype.freed = null;
zpp_nape.space.ZPP_CallbackSet.prototype.lazydel = null;
zpp_nape.space.ZPP_CallbackSet.prototype.free = function() {
	this.int1 = this.int2 = null;
	this.id = this.di = -1;
	this.freed = true;
};
zpp_nape.space.ZPP_CallbackSet.prototype.alloc = function() {
	this.freed = false;
	this.lazydel = false;
	this.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	this.COLLISIONstamp = 0;
	this.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	this.SENSORstamp = 0;
	this.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	this.FLUIDstamp = 0;
};
zpp_nape.space.ZPP_CallbackSet.prototype.add_arb = function(x) {
	if(!this.arbiters.inlined_has(x)) {
		this.arbiters.inlined_add(x);
		return true;
	} else return false;
};
zpp_nape.space.ZPP_CallbackSet.prototype.try_remove_arb = function(x) {
	return this.arbiters.inlined_try_remove(x);
};
zpp_nape.space.ZPP_CallbackSet.prototype.remove_arb = function(x) {
	this.arbiters.inlined_try_remove(x);
};
zpp_nape.space.ZPP_CallbackSet.prototype.empty_arb = function(type) {
	var retvar;
	retvar = true;
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if((x.type & type) == 0) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_nape.space.ZPP_CallbackSet.prototype.really_empty = function() {
	return this.arbiters.head == null;
};
zpp_nape.space.ZPP_CallbackSet.prototype.sleeping = function() {
	var ret;
	ret = true;
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.sleeping) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			ret = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.space.ZPP_CallbackSet.prototype.__class__ = zpp_nape.space.ZPP_CallbackSet;
zpp_nape.space.ZPP_CbSetManager = $hxClasses['zpp_nape.space.ZPP_CbSetManager'] = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) this.cbsets = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
		this.cbsets = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	null;
	this.cbsets.lt = zpp_nape.callbacks.ZPP_CbSet.setlt;
	this.space = space;
};
zpp_nape.space.ZPP_CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_nape.space.ZPP_CbSetManager.prototype.cbsets = null;
zpp_nape.space.ZPP_CbSetManager.prototype.space = null;
zpp_nape.space.ZPP_CbSetManager.prototype.get = function(cbTypes) {
	if(cbTypes.head == null) return null;
	var fake;
	if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) fake = new zpp_nape.callbacks.ZPP_CbSet(); else {
		fake = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = fake.next;
		fake.next = null;
	}
	null;
	var faketypes = fake.cbTypes;
	fake.cbTypes = cbTypes;
	var res = this.cbsets.find_weak(fake);
	var ret;
	if(res != null) ret = res.data; else {
		var set = zpp_nape.callbacks.ZPP_CbSet.get(cbTypes);
		this.cbsets.insert(set);
		set.manager = this;
		ret = set;
	}
	fake.cbTypes = faketypes;
	var o = fake;
	o.free();
	o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
	zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
	return ret;
};
zpp_nape.space.ZPP_CbSetManager.prototype.remove = function(set) {
	this.cbsets.remove(set);
	while(!(set.cbpairs.head == null)) {
		var pair = set.cbpairs.pop_unsafe();
		if(pair.a != pair.b) {
			if(set == pair.a) pair.b.cbpairs.remove(pair); else pair.a.cbpairs.remove(pair);
		}
		var o = pair;
		o.a = o.b = null;
		o.listeners.clear();
		o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
	}
	set.manager = null;
};
zpp_nape.space.ZPP_CbSetManager.prototype.clear = function() {
};
zpp_nape.space.ZPP_CbSetManager.prototype.validate = function() {
	if(!this.cbsets.empty()) {
		var set_ite = this.cbsets.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var cb = set_ite.data;
			cb.validate();
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
};
zpp_nape.space.ZPP_CbSetManager.prototype.pair = function(a,b) {
	var ret = null;
	var pairs;
	if(a.cbpairs.length < b.cbpairs.length) pairs = a.cbpairs; else pairs = b.cbpairs;
	var cx_ite = pairs.head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		ret = zpp_nape.callbacks.ZPP_CbSetPair.get(a,b);
		a.cbpairs.add(ret);
		if(b != a) b.cbpairs.add(ret);
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	return ret;
};
zpp_nape.space.ZPP_CbSetManager.prototype.valid_listener = function(i) {
	return i.space == this.space;
};
zpp_nape.space.ZPP_CbSetManager.prototype.__class__ = zpp_nape.space.ZPP_CbSetManager;
zpp_nape.space.ZPP_Space = $hxClasses['zpp_nape.space.ZPP_Space'] = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new zpp_nape.util.ZNPList_ZPP_ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	zpp_nape.callbacks.ZPP_Callback.internal = true;
	this.precb = new nape.callbacks.PreCallback();
	this.precb.zpp_inner = new zpp_nape.callbacks.ZPP_Callback();
	zpp_nape.callbacks.ZPP_Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.c_arbiters_true = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.c_arbiters_false = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.f_arbiters = new zpp_nape.util.ZNPList_ZPP_FluidArbiter();
	this.s_arbiters = new zpp_nape.util.ZNPList_ZPP_SensorArbiter();
	this.islands = new zpp_nape.space.ZPP_Island();
	this.live = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_live = zpp_nape.util.ZPP_BodyList.get(this.live,true);
	this.staticsleep = new zpp_nape.util.ZNPList_ZPP_Body();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_livecon = zpp_nape.util.ZPP_ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_nape.phys.ZPP_Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_nape.callbacks.ZPP_Callback();
	this.midstep = false;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_Listener();
	this.wrap_listeners = zpp_nape.util.ZPP_ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new zpp_nape.space.ZPP_CallbackSet();
	this.mrca1 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.mrca2 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.prelisteners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.cbsets = new zpp_nape.space.ZPP_CbSetManager(this);
};
zpp_nape.space.ZPP_Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_nape.space.ZPP_Space.prototype.outer = null;
zpp_nape.space.ZPP_Space.prototype.userData = null;
zpp_nape.space.ZPP_Space.prototype.gravityx = null;
zpp_nape.space.ZPP_Space.prototype.gravityy = null;
zpp_nape.space.ZPP_Space.prototype.wrap_gravity = null;
zpp_nape.space.ZPP_Space.prototype.getgravity = function() {
	this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
	this.wrap_gravity.zpp_inner._inuse = true;
	this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
	this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
};
zpp_nape.space.ZPP_Space.prototype.gravity_invalidate = function(x) {
	if(this.midstep) throw "Error: Space::gravity cannot be set during space step";
	this.gravityx = x.x;
	this.gravityy = x.y;
	var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
	var cx_ite = this.bodies.head;
	while(cx_ite != null) {
		var x1 = cx_ite.elt;
		var o = x1;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.compounds.head;
	while(cx_ite1 != null) {
		var i = cx_ite1.elt;
		stack.add(i);
		cx_ite1 = cx_ite1.next;
	}
	while(!(stack.head == null)) {
		var s = stack.pop_unsafe();
		var cx_ite2 = s.bodies.head;
		while(cx_ite2 != null) {
			var x2 = cx_ite2.elt;
			var o1 = x2;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep?0:1);
				if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
				if(o1.component.sleeping) this.really_wake(o1,false);
			}
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = s.compounds.head;
		while(cx_ite3 != null) {
			var i1 = cx_ite3.elt;
			stack.add(i1);
			cx_ite3 = cx_ite3.next;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.gravity_validate = function() {
	this.wrap_gravity.zpp_inner.x = this.gravityx;
	this.wrap_gravity.zpp_inner.y = this.gravityy;
};
zpp_nape.space.ZPP_Space.prototype.bodies = null;
zpp_nape.space.ZPP_Space.prototype.wrap_bodies = null;
zpp_nape.space.ZPP_Space.prototype.compounds = null;
zpp_nape.space.ZPP_Space.prototype.wrap_compounds = null;
zpp_nape.space.ZPP_Space.prototype.constraints = null;
zpp_nape.space.ZPP_Space.prototype.wrap_constraints = null;
zpp_nape.space.ZPP_Space.prototype.kinematics = null;
zpp_nape.space.ZPP_Space.prototype.bphase = null;
zpp_nape.space.ZPP_Space.prototype.__static = null;
zpp_nape.space.ZPP_Space.prototype.global_lin_drag = null;
zpp_nape.space.ZPP_Space.prototype.global_ang_drag = null;
zpp_nape.space.ZPP_Space.prototype.stamp = null;
zpp_nape.space.ZPP_Space.prototype.midstep = null;
zpp_nape.space.ZPP_Space.prototype.time = null;
zpp_nape.space.ZPP_Space.prototype.sortcontacts = null;
zpp_nape.space.ZPP_Space.prototype.c_arbiters_true = null;
zpp_nape.space.ZPP_Space.prototype.c_arbiters_false = null;
zpp_nape.space.ZPP_Space.prototype.f_arbiters = null;
zpp_nape.space.ZPP_Space.prototype.s_arbiters = null;
zpp_nape.space.ZPP_Space.prototype.wrap_arbiters = null;
zpp_nape.space.ZPP_Space.prototype.live = null;
zpp_nape.space.ZPP_Space.prototype.wrap_live = null;
zpp_nape.space.ZPP_Space.prototype.live_constraints = null;
zpp_nape.space.ZPP_Space.prototype.wrap_livecon = null;
zpp_nape.space.ZPP_Space.prototype.staticsleep = null;
zpp_nape.space.ZPP_Space.prototype.islands = null;
zpp_nape.space.ZPP_Space.prototype.listeners = null;
zpp_nape.space.ZPP_Space.prototype.wrap_listeners = null;
zpp_nape.space.ZPP_Space.prototype.callbacks = null;
zpp_nape.space.ZPP_Space.prototype.callbackset_list = null;
zpp_nape.space.ZPP_Space.prototype.cbsets = null;
zpp_nape.space.ZPP_Space.prototype.clear = function() {
	while(!(this.listeners.head == null)) {
		var c = this.listeners.pop_unsafe();
		this.remListener(c);
	}
	while(!(this.callbackset_list.next == null)) {
		var c1 = this.callbackset_list.pop_unsafe();
		c1.arbiters.clear();
		var o = c1;
		o.int1 = o.int2 = null;
		o.id = o.di = -1;
		o.freed = true;
		null;
		o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
	}
	while(!(this.c_arbiters_true.head == null)) {
		var arb = this.c_arbiters_true.pop_unsafe();
		arb.retire();
	}
	while(!(this.c_arbiters_false.head == null)) {
		var arb1 = this.c_arbiters_false.pop_unsafe();
		arb1.retire();
	}
	while(!(this.s_arbiters.head == null)) {
		var arb2 = this.s_arbiters.pop_unsafe();
		arb2.retire();
	}
	while(!(this.f_arbiters.head == null)) {
		var arb3 = this.f_arbiters.pop_unsafe();
		arb3.retire();
	}
	this.bphase.clear();
	while(!(this.bodies.head == null)) {
		var b = this.bodies.pop_unsafe();
		if(b.component != null) {
			var i = b.component.island;
			if(i != null) {
				while(!(i.comps.head == null)) {
					var c2 = i.comps.pop_unsafe();
					c2.sleeping = false;
					c2.island = null;
					c2.parent = c2;
					c2.rank = 0;
				}
				var o1 = i;
				o1.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o1;
			}
		}
		b.removedFromSpace();
		b.space = null;
	}
	while(!(this.constraints.head == null)) {
		var c3 = this.constraints.pop_unsafe();
		if(c3.component != null) {
			var i1 = c3.component.island;
			if(i1 != null) {
				while(!(i1.comps.head == null)) {
					var c4 = i1.comps.pop_unsafe();
					c4.sleeping = false;
					c4.island = null;
					c4.parent = c4;
					c4.rank = 0;
				}
				var o2 = i1;
				o2.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o2;
			}
		}
		c3.removedFromSpace();
		c3.space = null;
	}
	this.kinematics.clear();
	var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
	while(!(this.compounds.head == null)) {
		var c5 = this.compounds.pop_unsafe();
		stack.add(c5);
	}
	while(!(stack.head == null)) {
		var comp = stack.pop_unsafe();
		comp.removedFromSpace();
		comp.space = null;
		var cx_ite = comp.bodies.head;
		while(cx_ite != null) {
			var b1 = cx_ite.elt;
			if(b1.component != null) {
				var i2 = b1.component.island;
				if(i2 != null) {
					while(!(i2.comps.head == null)) {
						var c6 = i2.comps.pop_unsafe();
						c6.sleeping = false;
						c6.island = null;
						c6.parent = c6;
						c6.rank = 0;
					}
					var o3 = i2;
					o3.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o3;
				}
			}
			b1.removedFromSpace();
			b1.space = null;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = comp.constraints.head;
		while(cx_ite1 != null) {
			var c7 = cx_ite1.elt;
			if(c7.component != null) {
				var i3 = c7.component.island;
				if(i3 != null) {
					while(!(i3.comps.head == null)) {
						var c8 = i3.comps.pop_unsafe();
						c8.sleeping = false;
						c8.island = null;
						c8.parent = c8;
						c8.rank = 0;
					}
					var o4 = i3;
					o4.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o4;
				}
			}
			c7.removedFromSpace();
			c7.space = null;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = comp.compounds.head;
		while(cx_ite2 != null) {
			var i4 = cx_ite2.elt;
			stack.add(i4);
			cx_ite2 = cx_ite2.next;
		}
	}
	this.staticsleep.clear();
	this.live.clear();
	this.live_constraints.clear();
	this.stamp = 0;
	this.time = 0.0;
	this.mrca1.clear();
	this.mrca2.clear();
	this.prelisteners.clear();
	this.cbsets.clear();
};
zpp_nape.space.ZPP_Space.prototype.bodies_adder = function(x) {
	if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set";
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
		this.addBody(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.space.ZPP_Space.prototype.bodies_subber = function(x) {
	this.remBody(x.zpp_inner);
};
zpp_nape.space.ZPP_Space.prototype.bodies_modifiable = function() {
	if(this.midstep) throw "Error: Space::bodies cannot be set during space step()";
};
zpp_nape.space.ZPP_Space.prototype.compounds_adder = function(x) {
	if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
		this.addCompound(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.space.ZPP_Space.prototype.compounds_subber = function(x) {
	this.remCompound(x.zpp_inner);
};
zpp_nape.space.ZPP_Space.prototype.compounds_modifiable = function() {
	if(this.midstep) throw "Error: Space::compounds cannot be set during space step()";
};
zpp_nape.space.ZPP_Space.prototype.constraints_adder = function(x) {
	if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set";
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
		this.addConstraint(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.space.ZPP_Space.prototype.constraints_subber = function(x) {
	this.remConstraint(x.zpp_inner);
};
zpp_nape.space.ZPP_Space.prototype.constraints_modifiable = function() {
	if(this.midstep) throw "Error: Space::constraints cannot be set during space step()";
};
zpp_nape.space.ZPP_Space.prototype.listeners_adder = function(x) {
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
		this.addListener(x.zpp_inner);
		return true;
	} else return false;
};
zpp_nape.space.ZPP_Space.prototype.listeners_subber = function(x) {
	this.remListener(x.zpp_inner);
};
zpp_nape.space.ZPP_Space.prototype.listeners_modifiable = function() {
	if(this.midstep) throw "Error: Space::listeners cannot be set during space step()";
};
zpp_nape.space.ZPP_Space.prototype.revoke_listener = function(x) {
};
zpp_nape.space.ZPP_Space.prototype.unrevoke_listener = function(x) {
};
zpp_nape.space.ZPP_Space.prototype.addListener = function(x) {
	x.space = this;
	x.addedToSpace();
	if(x.interaction != null) null;
};
zpp_nape.space.ZPP_Space.prototype.remListener = function(x) {
	if(x.interaction != null) null;
	x.removedFromSpace();
	x.space = null;
};
zpp_nape.space.ZPP_Space.prototype.add_callbackset = function(cb) {
	cb.int1.cbsets.inlined_add(cb);
	cb.int2.cbsets.inlined_add(cb);
	this.callbackset_list.inlined_add(cb);
};
zpp_nape.space.ZPP_Space.prototype.remove_callbackset = function(cb) {
	cb.lazydel = true;
	cb.int1.cbsets.inlined_try_remove(cb);
	cb.int2.cbsets.inlined_try_remove(cb);
};
zpp_nape.space.ZPP_Space.prototype.transmitType = function(p,new_type) {
	var o = p;
	if(!o.world) {
		o.component.waket = this.stamp + (this.midstep?0:1);
		if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
		if(o.component.sleeping) this.really_wake(o,false);
	}
	if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.live.remove(p); else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
		this.kinematics.remove(p);
		this.staticsleep.remove(p);
	} else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.remove(p);
	p.type = new_type;
	if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(p);
	if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.static_validation(p);
	p.component.sleeping = true;
	var o1 = p;
	if(!o1.world) {
		o1.component.waket = this.stamp + (this.midstep?0:1);
		if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
		if(o1.component.sleeping) this.really_wake(o1,true);
	}
};
zpp_nape.space.ZPP_Space.prototype.added_shape = function(s,dontwake) {
	if(dontwake == null) dontwake = false;
	if(!dontwake) {
		var o = s.body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
	}
	this.bphase.insert(s);
	s.addedToSpace();
};
zpp_nape.space.ZPP_Space.prototype.removed_shape = function(s,deleting) {
	if(deleting == null) deleting = false;
	var _g = this;
	var body = s.body;
	if(!deleting) body.wake();
	var pre = null;
	var cx_ite = body.arbiters.head;
	while(cx_ite != null) {
		var xarb = [cx_ite.elt];
		var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
		if(rem) {
			if(xarb[0].present != 0) {
				this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
				var cx_ite1 = this.mrca1.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					var cx_ite2 = this.mrca2.head;
					while(cx_ite2 != null) {
						var i2 = cx_ite2.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
							cx_ite2 = cx_ite2.next;
							continue;
						}
						var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
						callbackset[0].remove_arb(xarb[0]);
						xarb[0].present--;
						cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset,xarb) {
							return function(listener) {
								if((listener.itype & xarb[0].type) != 0 && callbackset[0].empty_arb(listener.itype)) {
									var cb = _g.push_callback(listener);
									cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
									zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
									cb.set = callbackset[0];
								}
							};
						})(callbackset,xarb));
						if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
						cx_ite2 = cx_ite2.next;
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			if(xarb[0].b1 != body && xarb[0].b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var o = xarb[0].b1;
				if(!o.world) {
					o.component.waket = this.stamp + (this.midstep?0:1);
					if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
					if(o.component.sleeping) this.really_wake(o,false);
				}
			}
			if(xarb[0].b2 != body && xarb[0].b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var o1 = xarb[0].b2;
				if(!o1.world) {
					o1.component.waket = this.stamp + (this.midstep?0:1);
					if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
					if(o1.component.sleeping) this.really_wake(o1,false);
				}
			}
			xarb[0].cleared = true;
			if(body == null || xarb[0].b2 == body) xarb[0].b1.arbiters.inlined_try_remove(xarb[0]);
			if(body == null || xarb[0].b1 == body) xarb[0].b2.arbiters.inlined_try_remove(xarb[0]);
			if(xarb[0].pair != null) {
				xarb[0].pair.arb = null;
				xarb[0].pair = null;
			}
			xarb[0].active = false;
			this.f_arbiters.modified = true;
			cx_ite = body.arbiters.erase(pre);
			continue;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	this.bphase.remove(s);
	s.removedFromSpace();
};
zpp_nape.space.ZPP_Space.prototype.addConstraint = function(con) {
	con.space = this;
	con.addedToSpace();
	if(con.active) {
		con.component.sleeping = true;
		this.wake_constraint(con,true);
	}
};
zpp_nape.space.ZPP_Space.prototype.remConstraint = function(con) {
	if(con.active) {
		this.wake_constraint(con,true);
		this.live_constraints.remove(con);
	}
	con.removedFromSpace();
	con.space = null;
};
zpp_nape.space.ZPP_Space.prototype.addCompound = function(x) {
	x.space = this;
	x.addedToSpace();
	var cx_ite = x.bodies.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.addBody(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = x.constraints.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		this.addConstraint(i1);
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = x.compounds.head;
	while(cx_ite2 != null) {
		var i2 = cx_ite2.elt;
		this.addCompound(i2);
		cx_ite2 = cx_ite2.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.remCompound = function(x) {
	var cx_ite = x.bodies.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.remBody(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = x.constraints.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		this.remConstraint(i1);
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = x.compounds.head;
	while(cx_ite2 != null) {
		var i2 = cx_ite2.elt;
		this.remCompound(i2);
		cx_ite2 = cx_ite2.next;
	}
	x.removedFromSpace();
	x.space = null;
};
zpp_nape.space.ZPP_Space.prototype.addBody = function(body,flag) {
	if(flag == null) flag = -1;
	body.space = this;
	body.addedToSpace();
	body.component.sleeping = true;
	var o = body;
	if(!o.world) {
		o.component.waket = this.stamp + (this.midstep?0:1);
		if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
		if(o.component.sleeping) this.really_wake(o,true);
	}
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		this.added_shape(shape,true);
		cx_ite = cx_ite.next;
	}
	if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
		this.static_validation(body);
	} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
	} else {
		if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(body);
	}
};
zpp_nape.space.ZPP_Space.prototype.remBody = function(body,flag) {
	if(flag == null) flag = -1;
	if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
		this.staticsleep.remove(body);
	} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		var o1 = body;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,true);
		}
		this.live.remove(body);
	} else {
		if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.remove(body);
		var o2 = body;
		if(!o2.world) {
			o2.component.waket = this.stamp + (this.midstep?0:1);
			if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
			if(o2.component.sleeping) this.really_wake(o2,true);
		}
		this.staticsleep.remove(body);
	}
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		this.removed_shape(shape,true);
		cx_ite = cx_ite.next;
	}
	body.removedFromSpace();
	body.space = null;
};
zpp_nape.space.ZPP_Space.prototype.shapesUnderPoint = function(x,y,filter,output) {
	return this.bphase.shapesUnderPoint(x,y,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	return this.bphase.bodiesUnderPoint(x,y,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.shapesInAABB = function(aabb,strict,cont,filter,output) {
	return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.bodiesInAABB = function(aabb,strict,cont,filter,output) {
	return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.shapesInCircle = function(pos,rad,cont,filter,output) {
	return this.bphase.shapesInCircle((function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.y;
		return $r;
	}(this)),rad,cont,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.bodiesInCircle = function(pos,rad,cont,filter,output) {
	return this.bphase.bodiesInCircle((function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.y;
		return $r;
	}(this)),rad,cont,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.shapesInShape = function(shape,cont,filter,output) {
	return this.bphase.shapesInShape(shape,cont,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.bodiesInShape = function(shape,cont,filter,output) {
	return this.bphase.bodiesInShape(shape,cont,filter,output);
};
zpp_nape.space.ZPP_Space.prototype.rayCast = function(ray,inner,filter) {
	return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
};
zpp_nape.space.ZPP_Space.prototype.rayMultiCast = function(ray,inner,filter,output) {
	return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
};
zpp_nape.space.ZPP_Space.prototype.convexShapeList = null;
zpp_nape.space.ZPP_Space.prototype.convexCast = function(shape,deltaTime,filter,dynamics) {
	var toi;
	if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
		toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
		toi.next = null;
	}
	toi.failed = false;
	toi.s1 = toi.s2 = null;
	toi.arbiter = null;
	if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
	var body = shape.body;
	var prex = body.posx;
	var prey = body.posy;
	body.sweepTime = 0;
	body.sweep_angvel = body.angvel;
	body.sweepIntegrate(deltaTime);
	var postx = body.posx;
	var posty = body.posy;
	shape.validate_sweepRadius();
	var rad = shape.sweepRadius;
	var aabb;
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
		aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
		aabb.next = null;
	}
	null;
	aabb.minx = (function($this) {
		var $r;
		var x = prex;
		var y = postx;
		$r = x < y?x:y;
		return $r;
	}(this)) - rad;
	aabb.maxx = (function($this) {
		var $r;
		var x1 = prex;
		var y1 = postx;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)) + rad;
	aabb.miny = (function($this) {
		var $r;
		var x2 = prey;
		var y2 = posty;
		$r = x2 < y2?x2:y2;
		return $r;
	}(this)) - rad;
	aabb.maxy = (function($this) {
		var $r;
		var x3 = prey;
		var y3 = posty;
		$r = x3 > y3?x3:y3;
		return $r;
	}(this)) + rad;
	var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
	var o = aabb;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
	zpp_nape.geom.ZPP_AABB.zpp_pool = o;
	var minAxisx = 0.0;
	var minAxisy = 0.0;
	minAxisx = 0;
	minAxisy = 0;
	var minPosx = 0.0;
	var minPosy = 0.0;
	minPosx = 0;
	minPosy = 0;
	var mins = null;
	var mint = deltaTime + 1;
	var _g;
	list.zpp_inner.valmod();
	_g = nape.shape.ShapeIterator.get(list);
	while(_g.hasNext()) {
		var s;
		_g.zpp_critical = false;
		s = _g.zpp_inner.at(_g.zpp_i++);
		if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
			toi.s1 = shape;
			toi.s2 = s.zpp_inner;
			if(dynamics) {
				s.zpp_inner.validate_sweepRadius();
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
				zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
			} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
			toi.toi *= deltaTime;
			if(toi.toi > 0 && toi.toi < mint) {
				mint = toi.toi;
				minAxisx = toi.axis.x;
				minAxisy = toi.axis.y;
				minPosx = toi.c2.x;
				minPosy = toi.c2.y;
				mins = s;
			}
		}
	}
	list.clear();
	var o1 = toi;
	o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
	zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
	body.sweepIntegrate(0);
	body.sweepValidate(shape);
	if(mint <= deltaTime) return zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-minAxisx,-minAxisy,null),nape.geom.Vec2.get(minPosx,minPosy,null),mint,mins); else return null;
};
zpp_nape.space.ZPP_Space.prototype.prepareCast = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.validate_worldCOM(); else s.polygon.validate_gaxi();
};
zpp_nape.space.ZPP_Space.prototype.convexMultiCast = function(shape,deltaTime,filter,dynamics,output) {
	var toi;
	if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
		toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
		toi.next = null;
	}
	toi.failed = false;
	toi.s1 = toi.s2 = null;
	toi.arbiter = null;
	if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
	var body = shape.body;
	var prex = body.posx;
	var prey = body.posy;
	body.sweepTime = 0;
	body.sweep_angvel = body.angvel;
	body.sweepIntegrate(deltaTime);
	var postx = body.posx;
	var posty = body.posy;
	shape.validate_sweepRadius();
	var rad = shape.sweepRadius;
	var aabb;
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
		aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
		aabb.next = null;
	}
	null;
	aabb.minx = (function($this) {
		var $r;
		var x = prex;
		var y = postx;
		$r = x < y?x:y;
		return $r;
	}(this)) - rad;
	aabb.maxx = (function($this) {
		var $r;
		var x1 = prex;
		var y1 = postx;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)) + rad;
	aabb.miny = (function($this) {
		var $r;
		var x2 = prey;
		var y2 = posty;
		$r = x2 < y2?x2:y2;
		return $r;
	}(this)) - rad;
	aabb.maxy = (function($this) {
		var $r;
		var x3 = prey;
		var y3 = posty;
		$r = x3 > y3?x3:y3;
		return $r;
	}(this)) + rad;
	var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
	var o = aabb;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
	zpp_nape.geom.ZPP_AABB.zpp_pool = o;
	var ret;
	if(output == null) ret = new nape.geom.ConvexResultList(); else ret = output;
	var _g;
	list.zpp_inner.valmod();
	_g = nape.shape.ShapeIterator.get(list);
	while(_g.hasNext()) {
		var s;
		_g.zpp_critical = false;
		s = _g.zpp_inner.at(_g.zpp_i++);
		if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
			toi.s1 = shape;
			toi.s2 = s.zpp_inner;
			if(dynamics) {
				s.zpp_inner.validate_sweepRadius();
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
				zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
			} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
			toi.toi *= deltaTime;
			if(toi.toi > 0) {
				var res = zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-toi.axis.x,-toi.axis.y,null),nape.geom.Vec2.get(toi.c2.x,toi.c2.y,null),toi.toi,s);
				var pre = null;
				var cx_ite = ret.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if((function($this) {
						var $r;
						if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				ret.zpp_inner.inner.inlined_insert(pre,res);
			}
		}
	}
	list.clear();
	var o1 = toi;
	o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
	zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
	body.sweepIntegrate(0);
	body.sweepValidate(shape);
	return ret;
};
zpp_nape.space.ZPP_Space.prototype.push_callback = function(i) {
	var cb;
	if(zpp_nape.callbacks.ZPP_Callback.zpp_pool == null) cb = new zpp_nape.callbacks.ZPP_Callback(); else {
		cb = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = cb.next;
		cb.next = null;
	}
	null;
	this.callbacks.push(cb);
	cb.listener = i;
	return cb;
};
zpp_nape.space.ZPP_Space.prototype.pre_dt = null;
zpp_nape.space.ZPP_Space.prototype.step = function(deltaTime,velocityIterations,positionIterations) {
	var _g = this;
	if(this.midstep) throw "Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!";
	this.time += deltaTime;
	this.pre_dt = deltaTime;
	this.midstep = true;
	this.stamp++;
	this.validation();
	this.bphase.broadphase(this,true);
	this.prestep(deltaTime);
	if(this.sortcontacts) {
		var xxlist = this.c_arbiters_false;
		if(!(xxlist.head == null) && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges;
			var leftSize;
			var rightSize;
			do {
				numMerges = 0;
				left = head;
				tail = head = null;
				while(left != null) {
					numMerges++;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						leftSize++;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							rightSize--;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else {
							nxt = right;
							right = right.next;
							rightSize--;
						}
						if(tail != null) tail.next = nxt; else head = nxt;
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
			} while(numMerges > 1);
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	this.updateVel(deltaTime);
	this.warmStart();
	this.iterateVel(velocityIterations);
	var cx_ite = this.kinematics.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		cur.pre_rot = cur.rot;
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.live.head;
	while(cx_ite1 != null) {
		var cur1 = cx_ite1.elt;
		cur1.pre_posx = cur1.posx;
		cur1.pre_posy = cur1.posy;
		cur1.pre_rot = cur1.rot;
		cx_ite1 = cx_ite1.next;
	}
	this.updatePos(deltaTime);
	this.continuous = true;
	this.continuousCollisions(deltaTime);
	this.continuous = false;
	this.iteratePos(positionIterations);
	var cx_ite2 = this.kinematics.head;
	while(cx_ite2 != null) {
		var cur2 = cx_ite2.elt;
		var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
		var urot = cur2.pre_rot != cur2.rot;
		if(upos) cur2.invalidate_pos();
		if(urot) cur2.invalidate_rot();
		cx_ite2 = cx_ite2.next;
	}
	var cx_ite3 = this.live.head;
	while(cx_ite3 != null) {
		var cur3 = cx_ite3.elt;
		var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
		var urot1 = cur3.pre_rot != cur3.rot;
		if(upos1) cur3.invalidate_pos();
		if(urot1) cur3.invalidate_rot();
		cx_ite3 = cx_ite3.next;
	}
	var pre = null;
	var cx_ite4 = this.staticsleep.head;
	while(cx_ite4 != null) {
		var b = cx_ite4.elt;
		if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
			if(b.kinematicDelaySleep) {
				b.kinematicDelaySleep = false;
				cx_ite4 = cx_ite4.next;
				continue;
			}
			b.component.sleeping = true;
			cx_ite4 = this.staticsleep.inlined_erase(pre);
			continue;
		}
		pre = cx_ite4;
		cx_ite4 = cx_ite4.next;
	}
	this.doForests(deltaTime);
	this.sleepArbiters();
	this.midstep = false;
	var pre1 = null;
	var cx_ite5 = this.callbackset_list.next;
	while(cx_ite5 != null) {
		var set = [cx_ite5];
		if(set[0].arbiters.head == null) {
			cx_ite5 = this.callbackset_list.inlined_erase(pre1);
			var inf = set[0].int1.id + " " + set[0].int2.id;
			var o = set[0];
			o.int1 = o.int2 = null;
			o.id = o.di = -1;
			o.freed = true;
			null;
			o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
			zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
			continue;
		}
		var sleeping = [set[0].sleeping()];
		zpp_nape.callbacks.ZPP_CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING,(function(sleeping,set) {
			return function(x) {
				if((!sleeping[0] || x.allowSleepingCallbacks) && !set[0].empty_arb(x.itype)) {
					var cb = _g.push_callback(x);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING;
					zpp_nape.phys.ZPP_Interactor.int_callback(set[0],x,cb);
					cb.set = set[0];
				}
			};
		})(sleeping,set));
		pre1 = cx_ite5;
		cx_ite5 = cx_ite5.next;
	}
	while(!this.callbacks.empty()) {
		var cb1 = this.callbacks.pop();
		if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
			var o1 = cb1.listener.body;
			o1.handler(cb1.wrapper_body());
		} else if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
			var o2 = cb1.listener.constraint;
			o2.handler(cb1.wrapper_con());
		} else if(cb1.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION) {
			var o3 = cb1.listener.interaction;
			o3.handleri(cb1.wrapper_int());
		}
		var o4 = cb1;
		o4.int1 = o4.int2 = null;
		o4.body = null;
		o4.constraint = null;
		o4.listener = null;
		if(o4.wrap_arbiters != null) o4.wrap_arbiters.zpp_inner.inner = null;
		o4.set = null;
		o4.next = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = o4;
	}
};
zpp_nape.space.ZPP_Space.prototype.toiEvents = null;
zpp_nape.space.ZPP_Space.prototype.continuousCollisions = function(deltaTime) {
	var MAX_VEL = 2 * Math.PI / deltaTime;
	this.bphase.broadphase(this,false);
	var curTimeAlpha = 0.0;
	while(curTimeAlpha < 1 && !(this.toiEvents.head == null)) {
		var minTOI = null;
		var minTime = 2.0;
		var minKinematic = false;
		var preMin = null;
		var pre = null;
		var cx_ite = this.toiEvents.head;
		while(cx_ite != null) {
			var toi = cx_ite.elt;
			var b1 = toi.s1.body;
			var b2 = toi.s2.body;
			if(b1.sweepFrozen && b2.sweepFrozen) {
				if(toi.toi != 0 && zpp_nape.geom.ZPP_Collide.testCollide_safe(toi.s1,toi.s2)) toi.toi = 0; else {
					cx_ite = this.toiEvents.erase(pre);
					var o = toi;
					o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
					zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
					continue;
				}
			}
			if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
				if(!toi.kinematic) {
					toi.frozen1 = b1.sweepFrozen;
					toi.frozen2 = b2.sweepFrozen;
					if(toi.frozen1) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,nape.Config.collisionSlopCCD);
					if(toi.toi < 0) {
						cx_ite = this.toiEvents.erase(pre);
						var o1 = toi;
						o1.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o1;
						continue;
					}
				} else {
					cx_ite = this.toiEvents.erase(pre);
					var o2 = toi;
					o2.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
					zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o2;
					continue;
				}
			}
			if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
				minTOI = toi;
				minTime = toi.toi;
				minKinematic = toi.kinematic;
				preMin = pre;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		if(minTOI == null) break;
		this.toiEvents.erase(preMin);
		curTimeAlpha = minTOI.toi;
		var b11 = minTOI.s1.body;
		var b21 = minTOI.s2.body;
		if(!b11.sweepFrozen) {
			b11.sweepIntegrate(curTimeAlpha * deltaTime);
			b11.sweepValidate(minTOI.s1);
		}
		if(!b21.sweepFrozen) {
			b21.sweepIntegrate(curTimeAlpha * deltaTime);
			b21.sweepValidate(minTOI.s2);
		}
		var wasnull = minTOI.arbiter == null;
		var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
		if(arb == null) {
			if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
				minTOI.arbiter.pair.arb = null;
				minTOI.arbiter.pair = null;
			}
		} else if(!this.presteparb(arb,deltaTime,true)) {
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0)) {
				arb.colarb.warmStart();
				arb.colarb.applyImpulseVel();
				arb.colarb.applyImpulseVel();
				arb.colarb.applyImpulseVel();
				arb.colarb.applyImpulseVel();
				b11.sweep_angvel = b11.angvel % MAX_VEL;
				b21.sweep_angvel = b21.angvel % MAX_VEL;
			}
		}
		if(arb != null && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) && arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
			if(!b11.sweepFrozen && !(b11.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
				b11.sweepFrozen = true;
				if(minTOI.failed) b11.angvel = b11.sweep_angvel = 0; else if(minTOI.slipped) b11.angvel = b11.sweep_angvel *= nape.Config.angularCCDSlipScale; else b11.angvel = b11.sweep_angvel;
			}
			if(!b21.sweepFrozen && !(b21.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
				b21.sweepFrozen = true;
				if(minTOI.failed) b21.angvel = b21.sweep_angvel = 0; else if(minTOI.slipped) b21.angvel = b21.sweep_angvel *= nape.Config.angularCCDSlipScale; else b21.angvel = b21.sweep_angvel;
			}
		}
	}
	while(!(this.toiEvents.head == null)) {
		var toi1 = this.toiEvents.pop_unsafe();
		var o3 = toi1;
		o3.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o3;
	}
	var cx_ite1 = this.kinematics.head;
	while(cx_ite1 != null) {
		var cur = cx_ite1.elt;
		cur.sweepIntegrate(deltaTime);
		cur.sweepTime = 0;
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = this.live.head;
	while(cx_ite2 != null) {
		var cur1 = cx_ite2.elt;
		if(!cur1.sweepFrozen) cur1.sweepIntegrate(deltaTime);
		cur1.sweepTime = 0;
		cx_ite2 = cx_ite2.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.continuousEvent = function(s1,s2,stat,in_arb,_) {
	if(s1.body.sweepFrozen && s2.body.sweepFrozen) return in_arb;
	if(s1.body.disableCCD || s2.body.disableCCD) return in_arb;
	if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) return in_arb;
	var b1 = s1.body;
	var b2 = s2.body;
	if(stat || b1.bullet || b2.bullet) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		var kin = b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
		if(stat && !kin) {
			if(!(s1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) {
				toi.s2 = s1;
				toi.s1 = s2;
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
			}
			toi.kinematic = false;
			zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
		} else {
			toi.s1 = s1;
			toi.s2 = s2;
			toi.kinematic = kin;
			if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
				if(toi.s1.body.sweepFrozen) {
					var tmp = toi.s1;
					toi.s1 = toi.s2;
					toi.s2 = tmp;
					toi.frozen1 = false;
					toi.frozen2 = true;
				}
				zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			} else zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
		}
		if(stat && toi.toi < 0 || toi.failed) {
			var o = toi;
			o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
		} else {
			this.toiEvents.add(toi);
			toi.frozen1 = toi.s1.body.sweepFrozen;
			toi.frozen2 = toi.s2.body.sweepFrozen;
			if(in_arb != null) toi.arbiter = in_arb.colarb; else toi.arbiter = null;
		}
	}
	return in_arb;
};
zpp_nape.space.ZPP_Space.prototype.bodyCbWake = function(b) {
	if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
		if(this.midstep) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		} else b.component.woken = true;
	}
};
zpp_nape.space.ZPP_Space.prototype.bodyCbSleep = function(b) {
	if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
		var cx_ite = b.cbSet.bodylisteners.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
				cx_ite = cx_ite.next;
				continue;
			}
			var cb = this.push_callback(i);
			cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
			cb.body = b;
			cx_ite = cx_ite.next;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.constraintCbWake = function(con) {
	if(con.cbSet != null) {
		if(this.midstep) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		} else con.component.woken = true;
	}
};
zpp_nape.space.ZPP_Space.prototype.constraintCbSleep = function(con) {
	if(con.cbSet != null) {
		var cx_ite = con.cbSet.conlisteners.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
				cx_ite = cx_ite.next;
				continue;
			}
			var cb = this.push_callback(i);
			cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
			cb.constraint = con;
			cx_ite = cx_ite.next;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.constraintCbBreak = function(con) {
	if(con.cbSet != null) {
		var cx_ite = con.cbSet.conlisteners.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) {
				cx_ite = cx_ite.next;
				continue;
			}
			var cb = this.push_callback(i);
			cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
			cb.constraint = con;
			cx_ite = cx_ite.next;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.nullListenerType = function(cb1,cb2) {
	var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
	var cx_ite = cb1.interactors.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		stack.add(i);
		cx_ite = cx_ite.next;
	}
	if(cb1 != cb2) {
		var cx_ite1 = cb2.interactors.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			stack.add(i1);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(!(stack.head == null)) {
		var intx = stack.pop_unsafe();
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite2 = comp.bodies.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				stack.add(i2);
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = comp.compounds.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				stack.add(i3);
				cx_ite3 = cx_ite3.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite4 = xbody.arbiters.head;
			while(cx_ite4 != null) {
				var xarb = cx_ite4.elt;
				if(xarb.present == 0) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite5 = this.mrca1.head;
				while(cx_ite5 != null) {
					var i11 = cx_ite5.elt;
					if(i11.cbSet != cb1 && i11.cbSet != cb2) {
						cx_ite5 = cx_ite5.next;
						continue;
					}
					var cx_ite6 = this.mrca2.head;
					while(cx_ite6 != null) {
						var i21 = cx_ite6.elt;
						if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
							cx_ite6 = cx_ite6.next;
							continue;
						}
						var callbackset = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
						if(callbackset != null) {
							while(!(callbackset.arbiters.head == null)) {
								var arb = callbackset.arbiters.pop_unsafe();
								arb.present--;
							}
							this.remove_callbackset(callbackset);
						}
						cx_ite6 = cx_ite6.next;
					}
					cx_ite5 = cx_ite5.next;
				}
				cx_ite4 = cx_ite4.next;
			}
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.nullInteractorType = function(intx,me) {
	if(me == null) me = intx;
	if(intx.icompound != null) {
		var comp = intx.icompound;
		var cx_ite = comp.bodies.head;
		while(cx_ite != null) {
			var body = cx_ite.elt;
			this.nullInteractorType(body,me);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = comp.compounds.head;
		while(cx_ite1 != null) {
			var comp1 = cx_ite1.elt;
			this.nullInteractorType(comp1,me);
			cx_ite1 = cx_ite1.next;
		}
	} else {
		var xbody;
		if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
		var xshp;
		if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
		var cx_ite2 = xbody.arbiters.head;
		while(cx_ite2 != null) {
			var xarb = cx_ite2.elt;
			if(xarb.present == 0) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			this.MRCA_chains(xarb.ws1,xarb.ws2);
			var cx_ite3 = this.mrca1.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				var cx_ite4 = this.mrca2.head;
				while(cx_ite4 != null) {
					var i2 = cx_ite4.elt;
					if(i1 != me && i2 != me) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
					if(callbackset != null) {
						xarb.present--;
						callbackset.remove_arb(xarb);
						if(callbackset.arbiters.head == null) this.remove_callbackset(callbackset);
					}
					cx_ite4 = cx_ite4.next;
				}
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.freshListenerType = function(cb1,cb2) {
	var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
	var cx_ite = cb1.interactors.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		stack.add(i);
		cx_ite = cx_ite.next;
	}
	if(cb1 != cb2) {
		var cx_ite1 = cb2.interactors.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			stack.add(i1);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(!(stack.head == null)) {
		var intx = stack.pop_unsafe();
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite2 = comp.bodies.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				stack.add(i2);
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = comp.compounds.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				stack.add(i3);
				cx_ite3 = cx_ite3.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite4 = xbody.arbiters.head;
			while(cx_ite4 != null) {
				var xarb = cx_ite4.elt;
				if(!xarb.presentable) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite5 = this.mrca1.head;
				while(cx_ite5 != null) {
					var i11 = cx_ite5.elt;
					if(i11.cbSet != cb1 && i11.cbSet != cb2) {
						cx_ite5 = cx_ite5.next;
						continue;
					}
					var cx_ite6 = this.mrca2.head;
					while(cx_ite6 != null) {
						var i21 = cx_ite6.elt;
						if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
							cx_ite6 = cx_ite6.next;
							continue;
						}
						var callbackset = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
						if(callbackset == null) {
							callbackset = zpp_nape.space.ZPP_CallbackSet.get(i11,i21);
							this.add_callbackset(callbackset);
						}
						if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
							var $r;
							callbackset.arbiters.inlined_add(xarb);
							$r = true;
							return $r;
						}(this)):false) xarb.present++;
						cx_ite6 = cx_ite6.next;
					}
					cx_ite5 = cx_ite5.next;
				}
				cx_ite4 = cx_ite4.next;
			}
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.freshInteractorType = function(intx,me) {
	if(me == null) me = intx;
	if(intx.icompound != null) {
		var comp = intx.icompound;
		var cx_ite = comp.bodies.head;
		while(cx_ite != null) {
			var body = cx_ite.elt;
			this.freshInteractorType(body,me);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = comp.compounds.head;
		while(cx_ite1 != null) {
			var comp1 = cx_ite1.elt;
			this.freshInteractorType(comp1,me);
			cx_ite1 = cx_ite1.next;
		}
	} else {
		var xbody;
		if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
		var xshp;
		if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
		var cx_ite2 = xbody.arbiters.head;
		while(cx_ite2 != null) {
			var xarb = cx_ite2.elt;
			if(!xarb.presentable) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			this.MRCA_chains(xarb.ws1,xarb.ws2);
			var cx_ite3 = this.mrca1.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				var cx_ite4 = this.mrca2.head;
				while(cx_ite4 != null) {
					var i2 = cx_ite4.elt;
					if(i1 != me && i2 != me) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					var cb1 = i1.cbSet;
					var cb2 = i2.cbSet;
					cb1.validate();
					cb2.validate();
					if(!cb1.manager.pair(cb1,cb2).empty_intersection()) {
						var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
						if(callbackset == null) {
							callbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
							this.add_callbackset(callbackset);
						}
						if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
							var $r;
							callbackset.arbiters.inlined_add(xarb);
							$r = true;
							return $r;
						}(this)):false) xarb.present++;
					}
					cx_ite4 = cx_ite4.next;
				}
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.wakeCompound = function(x) {
	var cx_ite = x.bodies.head;
	while(cx_ite != null) {
		var y = cx_ite.elt;
		var o = y;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = x.constraints.head;
	while(cx_ite1 != null) {
		var i = cx_ite1.elt;
		this.wake_constraint(i);
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = x.compounds.head;
	while(cx_ite2 != null) {
		var i1 = cx_ite2.elt;
		this.wakeCompound(i1);
		cx_ite2 = cx_ite2.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.wakeIsland = function(i) {
	while(!(i.comps.head == null)) {
		var c = i.comps.pop_unsafe();
		c.waket = this.stamp + (this.midstep?0:1);
		if(c.isBody) {
			var b = c.body;
			this.live.add(b);
			var cx_ite = b.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp - arb.sleep_stamp;
					if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
					} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
				}
				cx_ite = cx_ite.next;
			}
			this.bodyCbWake(b);
			c.sleeping = false;
			c.island = null;
			c.parent = c;
			c.rank = 0;
			if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
				var cx_ite1 = b.shapes.head;
				while(cx_ite1 != null) {
					var shape = cx_ite1.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite1 = cx_ite1.next;
				}
			}
		} else {
			var con = c.constraint;
			this.live_constraints.inlined_add(con);
			this.constraintCbWake(con);
			c.sleeping = false;
			c.island = null;
			c.parent = c;
			c.rank = 0;
		}
	}
	var o = i;
	o.next = zpp_nape.space.ZPP_Island.zpp_pool;
	zpp_nape.space.ZPP_Island.zpp_pool = o;
};
zpp_nape.space.ZPP_Space.prototype.non_inlined_wake = function(o,fst) {
	if(fst == null) fst = false;
	var o1 = o;
	if(!o1.world) {
		o1.component.waket = this.stamp + (this.midstep?0:1);
		if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
		if(o1.component.sleeping) this.really_wake(o1,fst);
	}
};
zpp_nape.space.ZPP_Space.prototype.really_wake = function(o,fst) {
	if(fst == null) fst = false;
	if(o.component.island == null) {
		o.component.sleeping = false;
		if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.inlined_add(o); else this.live.inlined_add(o);
		var cx_ite = o.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.space == this) this.wake_constraint(con);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = o.arbiters.head;
		while(cx_ite1 != null) {
			var arb = cx_ite1.elt;
			if(arb.sleeping) {
				arb.sleeping = false;
				arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
				if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
					var carb = arb.colarb;
					if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
				} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
			}
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
					var o1 = arb.b1;
					if(!o1.world) {
						o1.component.waket = this.stamp + (this.midstep?0:1);
						if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
						if(o1.component.sleeping) this.really_wake(o1,false);
					}
				}
				if(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
					var o2 = arb.b2;
					if(!o2.world) {
						o2.component.waket = this.stamp + (this.midstep?0:1);
						if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
						if(o2.component.sleeping) this.really_wake(o2,false);
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		if(!fst && o.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.bodyCbWake(o);
		if(!fst && !this.bphase.is_sweep && !(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
			var cx_ite2 = o.shapes.head;
			while(cx_ite2 != null) {
				var shape = cx_ite2.elt;
				if(shape.node != null) this.bphase.sync(shape);
				cx_ite2 = cx_ite2.next;
			}
		}
	} else this.wakeIsland(o.component.island);
};
zpp_nape.space.ZPP_Space.prototype.wake_constraint = function(con,fst) {
	if(fst == null) fst = false;
	if(con.active) {
		con.component.waket = this.stamp + (this.midstep?0:1);
		if(con.component.sleeping) {
			if(con.component.island == null) {
				con.component.sleeping = false;
				this.live_constraints.inlined_add(con);
				con.wake_connected();
				if(!fst) this.constraintCbWake(con);
			} else this.wakeIsland(con.component.island);
			return true;
		} else return false;
	} else return false;
};
zpp_nape.space.ZPP_Space.prototype.doForests = function(dt) {
	var cx_ite = this.c_arbiters_false.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
			if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var xr;
				if(arb.b1.component == arb.b1.component.parent) xr = arb.b1.component; else {
					var obj = arb.b1.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(arb.b2.component == arb.b2.component.parent) yr = arb.b2.component; else {
					var obj1 = arb.b2.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.f_arbiters.head;
	while(cx_ite1 != null) {
		var arb1 = cx_ite1.elt;
		if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
			if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var xr1;
				if(arb1.b1.component == arb1.b1.component.parent) xr1 = arb1.b1.component; else {
					var obj2 = arb1.b1.component;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr1 = obj2;
				}
				var yr1;
				if(arb1.b2.component == arb1.b2.component.parent) yr1 = arb1.b2.component; else {
					var obj3 = arb1.b2.component;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr1 = obj3;
				}
				if(xr1 != yr1) {
					if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
						yr1.parent = xr1;
						xr1.rank++;
					}
				}
			}
		}
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = this.live_constraints.head;
	while(cx_ite2 != null) {
		var con = cx_ite2.elt;
		con.forest();
		cx_ite2 = cx_ite2.next;
	}
	while(!(this.live.head == null)) {
		var o = this.live.inlined_pop_unsafe();
		var oc = o.component;
		var root;
		if(oc == oc.parent) root = oc; else {
			var obj4 = oc;
			var stack4 = null;
			while(obj4 != obj4.parent) {
				var nxt8 = obj4.parent;
				obj4.parent = stack4;
				stack4 = obj4;
				obj4 = nxt8;
			}
			while(stack4 != null) {
				var nxt9 = stack4.parent;
				stack4.parent = obj4;
				stack4 = nxt9;
			}
			root = obj4;
		}
		if(root.island == null) {
			if(zpp_nape.space.ZPP_Island.zpp_pool == null) root.island = new zpp_nape.space.ZPP_Island(); else {
				root.island = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = root.island.next;
				root.island.next = null;
			}
			root.island.waket = 0;
			this.islands.inlined_add(root.island);
			root.island.sleep = true;
		}
		oc.island = root.island;
		oc.island.comps.inlined_add(oc);
		var rest = o.atRest(dt);
		oc.island.sleep = oc.island.sleep && rest;
		if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
	}
	while(!(this.live_constraints.head == null)) {
		var o1 = this.live_constraints.inlined_pop_unsafe();
		var oc1 = o1.component;
		var root1;
		if(oc1 == oc1.parent) root1 = oc1; else {
			var obj5 = oc1;
			var stack5 = null;
			while(obj5 != obj5.parent) {
				var nxt10 = obj5.parent;
				obj5.parent = stack5;
				stack5 = obj5;
				obj5 = nxt10;
			}
			while(stack5 != null) {
				var nxt11 = stack5.parent;
				stack5.parent = obj5;
				stack5 = nxt11;
			}
			root1 = obj5;
		}
		oc1.island = root1.island;
		oc1.island.comps.inlined_add(oc1);
		if(oc1.waket > oc1.island.waket) oc1.island.waket = oc1.waket;
	}
	while(!(this.islands.next == null)) {
		var i = this.islands.inlined_pop_unsafe();
		if(i.sleep) {
			var cx_ite3 = i.comps.head;
			while(cx_ite3 != null) {
				var c = cx_ite3.elt;
				if(c.isBody) {
					var b = c.body;
					b.velx = 0;
					b.vely = 0;
					b.angvel = 0;
					c.sleeping = true;
					var cx_ite4 = b.shapes.head;
					while(cx_ite4 != null) {
						var shape = cx_ite4.elt;
						this.bphase.sync(shape);
						cx_ite4 = cx_ite4.next;
					}
					this.bodyCbSleep(b);
				} else {
					var con1 = c.constraint;
					this.constraintCbSleep(con1);
					c.sleeping = true;
				}
				cx_ite3 = cx_ite3.next;
			}
		} else {
			while(!(i.comps.head == null)) {
				var c1 = i.comps.inlined_pop_unsafe();
				c1.waket = i.waket;
				if(c1.isBody) this.live.inlined_add(c1.body); else this.live_constraints.inlined_add(c1.constraint);
				c1.sleeping = false;
				c1.island = null;
				c1.parent = c1;
				c1.rank = 0;
			}
			var o2 = i;
			o2.next = zpp_nape.space.ZPP_Island.zpp_pool;
			zpp_nape.space.ZPP_Island.zpp_pool = o2;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.sleepArbiters = function() {
	var pre = null;
	var arbs = this.c_arbiters_true;
	var arbite = arbs.head;
	var fst = this.c_arbiters_false != null;
	if(fst && arbite == null) {
		fst = false;
		arbite = this.c_arbiters_false.head;
		arbs = this.c_arbiters_false;
		pre = null;
	}
	while(arbite != null) {
		var arb = arbite.elt;
		if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			arbite = arbs.inlined_erase(pre);
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
			continue;
		}
		pre = arbite;
		arbite = arbite.next;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
	}
	var pre1 = null;
	var arbs1 = this.f_arbiters;
	var arbite1 = arbs1.head;
	var fst1 = false;
	if(fst1 && arbite1 == null) {
		fst1 = false;
		arbite1 = null.begin();
		arbs1 = null;
		pre1 = null;
	}
	while(arbite1 != null) {
		var arb1 = arbite1.elt;
		if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
			arb1.sleep_stamp = this.stamp;
			arb1.sleeping = true;
			arbite1 = arbs1.inlined_erase(pre1);
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbite1 = null.begin();
				arbs1 = null;
				pre1 = null;
			}
			continue;
		}
		pre1 = arbite1;
		arbite1 = arbite1.next;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbite1 = null.begin();
			arbs1 = null;
			pre1 = null;
		}
	}
	var pre2 = null;
	var arbs2 = this.s_arbiters;
	var arbite2 = arbs2.head;
	var fst2 = false;
	if(fst2 && arbite2 == null) {
		fst2 = false;
		arbite2 = null.begin();
		arbs2 = null;
		pre2 = null;
	}
	while(arbite2 != null) {
		var arb2 = arbite2.elt;
		if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
			arb2.sleep_stamp = this.stamp;
			arb2.sleeping = true;
			arbite2 = arbs2.inlined_erase(pre2);
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbite2 = null.begin();
				arbs2 = null;
				pre2 = null;
			}
			continue;
		}
		pre2 = arbite2;
		arbite2 = arbite2.next;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbite2 = null.begin();
			arbs2 = null;
			pre2 = null;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.static_validation = function(body) {
	if(!(body.shapes.head == null)) body.validate_aabb();
	body.validate_mass();
	body.validate_inertia();
	if(body.velx != 0 || body.vely != 0 || body.angvel != 0) throw "Error: Static body cannot have any real velocity, only kinematic or surface velocities";
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			s.polygon.splice_collinear();
			var res = s.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
			s.polygon.validate_gaxi();
		}
		cx_ite = cx_ite.next;
	}
	body.sweepFrozen = true;
};
zpp_nape.space.ZPP_Space.prototype.validation = function() {
	this.cbsets.validate();
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.sweepRadius = 0;
		var cx_ite1 = cur.shapes.head;
		while(cx_ite1 != null) {
			var s = cx_ite1.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.splice_collinear();
				var res = s.polygon.valid();
				if(res != (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
				s.polygon.validate_gaxi();
			}
			s.validate_sweepRadius();
			if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
			cx_ite1 = cx_ite1.next;
		}
		cur.validate_mass();
		cur.validate_inertia();
		if(!(cur.shapes.head == null)) {
			cur.validate_aabb();
			cur.validate_worldCOM();
		}
		cur.validate_gravMass();
		if(cur.zip_axis) {
			cur.zip_axis = false;
			cur.axisx = Math.sin(cur.rot);
			cur.axisy = Math.cos(cur.rot);
			null;
		}
		if(!cur.nomove && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.mass == 0) throw "Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false";
		if(!cur.norotate && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.inertia == 0) throw "Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false";
		if(cur.component.woken && cur.cbSet != null) {
			var cx_ite2 = cur.cbSet.bodylisteners.head;
			while(cx_ite2 != null) {
				var i = cx_ite2.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
				cb.body = cur;
				cx_ite2 = cx_ite2.next;
			}
		}
		cur.component.woken = false;
		var cx_ite3 = cur.shapes.head;
		while(cx_ite3 != null) {
			var shape = cx_ite3.elt;
			this.bphase.sync(shape);
			cx_ite3 = cx_ite3.next;
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite4 = this.kinematics.head;
	while(cx_ite4 != null) {
		var cur1 = cx_ite4.elt;
		cur1.sweepRadius = 0;
		var cx_ite5 = cur1.shapes.head;
		while(cx_ite5 != null) {
			var s1 = cx_ite5.elt;
			if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s1.polygon.splice_collinear();
				var res1 = s1.polygon.valid();
				if(res1 != (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s1.polygon.outer.toString() + " is invalid : " + res1.toString();
				s1.polygon.validate_gaxi();
			}
			s1.validate_sweepRadius();
			if(s1.sweepRadius > cur1.sweepRadius) cur1.sweepRadius = s1.sweepRadius;
			cx_ite5 = cx_ite5.next;
		}
		cur1.validate_mass();
		cur1.validate_inertia();
		if(!(cur1.shapes.head == null)) {
			cur1.validate_aabb();
			cur1.validate_worldCOM();
		}
		cur1.validate_gravMass();
		if(cur1.zip_axis) {
			cur1.zip_axis = false;
			cur1.axisx = Math.sin(cur1.rot);
			cur1.axisy = Math.cos(cur1.rot);
			null;
		}
		if(!cur1.nomove && cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.mass == 0) throw "Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false";
		if(!cur1.norotate && cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.inertia == 0) throw "Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false";
		var cx_ite6 = cur1.shapes.head;
		while(cx_ite6 != null) {
			var shape1 = cx_ite6.elt;
			this.bphase.sync(shape1);
			cx_ite6 = cx_ite6.next;
		}
		cx_ite4 = cx_ite4.next;
	}
	var cx_ite7 = this.live_constraints.head;
	while(cx_ite7 != null) {
		var con = cx_ite7.elt;
		if(con.active) {
			con.validate();
			if(con.component.woken && con.cbSet != null) {
				var cx_ite8 = con.cbSet.conlisteners.head;
				while(cx_ite8 != null) {
					var i1 = cx_ite8.elt;
					if(i1.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite8 = cx_ite8.next;
						continue;
					}
					var cb1 = this.push_callback(i1);
					cb1.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb1.constraint = con;
					cx_ite8 = cx_ite8.next;
				}
			}
			con.component.woken = false;
		}
		cx_ite7 = cx_ite7.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.updateVel = function(dt) {
	var pre = null;
	var linDrag = 1 - dt * this.global_lin_drag;
	var angDrag = 1 - dt * this.global_ang_drag;
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		if(cur.smass != 0.0) {
			var time = dt * cur.imass;
			cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
			cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
		}
		if(cur.sinertia != 0.0) {
			var dpx = 0.0;
			var dpy = 0.0;
			dpx = cur.worldCOMx - cur.posx;
			dpy = cur.worldCOMy - cur.posy;
			var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
			cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.updatePos = function(dt) {
	var MAX_VEL = 2 * Math.PI / dt;
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		cur.pre_rot = cur.rot;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel % MAX_VEL;
		cur.sweepIntegrate(dt);
		if(!cur.disableCCD) {
			var linThreshold = nape.Config.staticCCDLinearThreshold * cur.sweepRadius;
			var angThreshold = nape.Config.staticCCDAngularThreshold;
			if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
				var angvel = cur.sweep_angvel;
				if(angvel < 0) angvel = -angvel;
				var iangvel = 1 / angvel;
				var cx_ite1 = cur.shapes.head;
				while(cx_ite1 != null) {
					var s = cx_ite1.elt;
					var aabb = s.aabb;
					var minx = aabb.minx;
					var miny = aabb.miny;
					var maxx = aabb.maxx;
					var maxy = aabb.maxy;
					var count = angvel * dt * s.sweepCoef * 0.00833333333333333322 | 0;
					if(count > 8) count = 8;
					var anginc = angvel * dt / count;
					cur.sweepIntegrate(dt);
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
					if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
					if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
					if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
					if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
					var _g = 1;
					while(_g < count) {
						var i = _g++;
						cur.sweepIntegrate(anginc * i * iangvel);
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
					}
					this.bphase.sync(s);
					cx_ite1 = cx_ite1.next;
				}
				cur.sweepFrozen = false;
				if(cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
					var linThreshold2 = nape.Config.bulletCCDLinearThreshold * cur.sweepRadius;
					var angThreshold2 = nape.Config.bulletCCDAngularThreshold;
					if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
		} else {
			cur.sweepFrozen = true;
			cur.bullet = false;
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite2 = this.kinematics.head;
	while(cx_ite2 != null) {
		var cur1 = cx_ite2.elt;
		cur1.pre_posx = cur1.posx;
		cur1.pre_posy = cur1.posy;
		cur1.pre_rot = cur1.rot;
		cur1.sweepTime = 0;
		cur1.sweep_angvel = cur1.angvel % MAX_VEL;
		cur1.sweepIntegrate(dt);
		if(!cur1.disableCCD) {
			var linThreshold1 = nape.Config.staticCCDLinearThreshold * cur1.sweepRadius;
			var angThreshold1 = nape.Config.staticCCDAngularThreshold;
			if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
				var angvel1 = cur1.sweep_angvel;
				if(angvel1 < 0) angvel1 = -angvel1;
				var iangvel1 = 1 / angvel1;
				var cx_ite3 = cur1.shapes.head;
				while(cx_ite3 != null) {
					var s1 = cx_ite3.elt;
					var aabb1 = s1.aabb;
					var minx1 = aabb1.minx;
					var miny1 = aabb1.miny;
					var maxx1 = aabb1.maxx;
					var maxy1 = aabb1.maxy;
					var count1 = angvel1 * dt * s1.sweepCoef * 0.00833333333333333322 | 0;
					if(count1 > 8) count1 = 8;
					var anginc1 = angvel1 * dt / count1;
					cur1.sweepIntegrate(dt);
					if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
					if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
					if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
					if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
					if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
					var _g1 = 1;
					while(_g1 < count1) {
						var i1 = _g1++;
						cur1.sweepIntegrate(anginc1 * i1 * iangvel1);
						if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
						if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
						if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
						if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
						if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
					}
					this.bphase.sync(s1);
					cx_ite3 = cx_ite3.next;
				}
				cur1.sweepFrozen = false;
				if(cur1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur1.bulletEnabled) {
					var linThreshold21 = nape.Config.bulletCCDLinearThreshold * cur1.sweepRadius;
					var angThreshold21 = nape.Config.bulletCCDAngularThreshold;
					if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) cur1.bullet = true;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
		} else {
			cur1.sweepFrozen = true;
			cur1.bullet = false;
		}
		cx_ite2 = cx_ite2.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.continuous = null;
zpp_nape.space.ZPP_Space.prototype.presteparb = function(arb,dt,cont) {
	if(cont == null) cont = false;
	var _g = this;
	if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
		arb.sleep_stamp = this.stamp;
		arb.sleeping = true;
		return true;
	}
	if(!arb.cleared || arb.present != 0 || arb.intchange) {
		var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
		var begcb = arb.fresh && !arb.cleared && !arb.intchange;
		if(endcb) arb.endGenerated = this.stamp;
		if(begcb || endcb || arb.cleared || arb.intchange) {
			this.inlined_MRCA_chains(arb.ws1,arb.ws2);
			var cx_ite = this.mrca1.head;
			while(cx_ite != null) {
				var i1 = cx_ite.elt;
				var cx_ite1 = this.mrca2.head;
				while(cx_ite1 != null) {
					var i2 = cx_ite1.elt;
					var cb1 = i1.cbSet;
					var cb2 = i2.cbSet;
					if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
						cx_ite1 = cx_ite1.next;
						continue;
					}
					var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
					if(begcb || arb.intchange) {
						if(callbackset[0] == null) {
							callbackset[0] = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
							this.add_callbackset(callbackset[0]);
						}
						cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN,(function(callbackset) {
							return function(listener) {
								if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
									var cb = _g.push_callback(listener);
									cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN;
									zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
									cb.set = callbackset[0];
								}
							};
						})(callbackset));
						if(!callbackset[0].arbiters.inlined_has(arb)?(function($this) {
							var $r;
							callbackset[0].arbiters.inlined_add(arb);
							$r = true;
							return $r;
						}(this)):false) arb.present++;
					} else {
						arb.present--;
						callbackset[0].remove_arb(arb);
						cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset) {
							return function(listener1) {
								if((listener1.itype & arb.type) != 0 && callbackset[0].empty_arb(listener1.itype)) {
									var cb3 = _g.push_callback(listener1);
									cb3.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
									zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener1,cb3);
									cb3.set = callbackset[0];
								}
							};
						})(callbackset));
						if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
					}
					cx_ite1 = cx_ite1.next;
				}
				cx_ite = cx_ite.next;
			}
		}
		arb.fresh = false;
		arb.intchange = false;
	}
	if(arb.cleared || arb.up_stamp + (arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL?nape.Config.arbiterExpirationDelay:0) < this.stamp) {
		if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) arb.sensorarb.retire(); else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) arb.fluidarb.retire(); else arb.colarb.retire();
		return true;
	}
	var pact = arb.active;
	arb.active = arb.presentable = arb.up_stamp == this.stamp;
	if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
		if(arb.active && arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR) {
			if(arb.colarb != null) {
				if(arb.colarb.preStep(dt)) arb.active = false;
			} else arb.fluidarb.preStep(this,dt);
		}
	} else if(arb.colarb != null) {
		if(arb.colarb.cleanupContacts()) arb.active = false;
	}
	if(pact != arb.active) {
		arb.b1.arbiters.modified = true;
		arb.b2.arbiters.modified = true;
		this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
		this.s_arbiters.modified = this.f_arbiters.modified = true;
	}
	return false;
};
zpp_nape.space.ZPP_Space.prototype.prestep = function(dt) {
	var pre = null;
	var cx_ite = this.live_constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.preStep(dt)) {
			cx_ite = this.live_constraints.erase(pre);
			con.broken();
			this.constraintCbBreak(con);
			if(con.removeOnBreak) {
				con.component.sleeping = true;
				this.midstep = false;
				if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
				this.midstep = true;
			} else con.active = false;
			con.clearcache();
			continue;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	var pre1 = null;
	var arbs = this.c_arbiters_true;
	var arbite = arbs.head;
	var fst = this.c_arbiters_false != null;
	if(fst && arbite == null) {
		fst = false;
		arbite = this.c_arbiters_false.head;
		arbs = this.c_arbiters_false;
		pre1 = null;
	}
	while(arbite != null) {
		var arb = arbite.elt;
		if(this.presteparb(arb,dt)) {
			arbite = arbs.inlined_erase(pre1);
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
			continue;
		}
		pre1 = arbite;
		arbite = arbite.next;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
	}
	var pre2 = null;
	var arbs1 = this.f_arbiters;
	var arbite1 = arbs1.head;
	var fst1 = false;
	if(fst1 && arbite1 == null) {
		fst1 = false;
		arbite1 = null.begin();
		arbs1 = null;
		pre2 = null;
	}
	while(arbite1 != null) {
		var arb1 = arbite1.elt;
		if(this.presteparb(arb1,dt)) {
			arbite1 = arbs1.inlined_erase(pre2);
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbite1 = null.begin();
				arbs1 = null;
				pre2 = null;
			}
			continue;
		}
		pre2 = arbite1;
		arbite1 = arbite1.next;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbite1 = null.begin();
			arbs1 = null;
			pre2 = null;
		}
	}
	var pre3 = null;
	var arbs2 = this.s_arbiters;
	var arbite2 = arbs2.head;
	var fst2 = false;
	if(fst2 && arbite2 == null) {
		fst2 = false;
		arbite2 = null.begin();
		arbs2 = null;
		pre3 = null;
	}
	while(arbite2 != null) {
		var arb2 = arbite2.elt;
		if(this.presteparb(arb2,dt)) {
			arbite2 = arbs2.inlined_erase(pre3);
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbite2 = null.begin();
				arbs2 = null;
				pre3 = null;
			}
			continue;
		}
		pre3 = arbite2;
		arbite2 = arbite2.next;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbite2 = null.begin();
			arbs2 = null;
			pre3 = null;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.warmStart = function() {
	var cx_ite = this.f_arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
		cx_ite = cx_ite.next;
	}
	var arbi = this.c_arbiters_false.head;
	var fst = true;
	if(arbi == null) {
		arbi = this.c_arbiters_true.head;
		fst = false;
	}
	while(arbi != null) {
		var arb1 = arbi.elt;
		if(arb1.active && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb1.warmStart();
		arbi = arbi.next;
		if(fst && arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
	}
	var cx_ite1 = this.live_constraints.head;
	while(cx_ite1 != null) {
		var con = cx_ite1.elt;
		con.warmStart();
		cx_ite1 = cx_ite1.next;
	}
};
zpp_nape.space.ZPP_Space.prototype.iterateVel = function(times) {
	var _g = 0;
	while(_g < times) {
		var i = _g++;
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
			cx_ite = cx_ite.next;
		}
		var pre = null;
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			if(con.applyImpulseVel()) {
				cx_ite1 = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
					this.midstep = true;
				} else con.active = false;
				con.clearcache();
				continue;
			}
			pre = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb1.applyImpulseVel();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.iteratePos = function(times) {
	var _g = 0;
	while(_g < times) {
		var i = _g++;
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(!con.__velocity && con.stiff) {
				if(con.applyImpulsePos()) {
					cx_ite = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
						this.midstep = true;
					} else con.active = false;
					con.clearcache();
					continue;
				}
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb = arbi.elt;
			if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulsePos();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.group_ignore = function(s1,s2) {
	var g1 = s1.lookup_group();
	if(g1 == null) return false; else {
		var g2 = s2.lookup_group();
		if(g2 == null) return false; else {
			var ret = false;
			while(g1 != null && g2 != null) {
				if(g1 == g2) {
					ret = g1.ignore;
					break;
				}
				if(g1.depth < g2.depth) g2 = g2.group; else g1 = g1.group;
			}
			return ret;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.interactionType = function(s1,s2,b1,b2) {
	var con_ignore;
	con_ignore = false;
	var cx_ite = b1.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.ignore && con.pair_exists(b1.id,b2.id)) {
			con_ignore = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(!con_ignore && !this.group_ignore(s1,s2)) {
		if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) return 2; else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 0; else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 1; else return -1;
	} else return -1;
};
zpp_nape.space.ZPP_Space.prototype.precb = null;
zpp_nape.space.ZPP_Space.prototype.prelisteners = null;
zpp_nape.space.ZPP_Space.prototype.narrowPhase = function(s1,s2,stat,in_arb,continuous) {
	var _g = this;
	var ret = null;
	var b1 = s1.body;
	var b2 = s2.body;
	var itype = this.interactionType(s1,s2,b1,b2);
	if(itype != -1) {
		var sa;
		var sb;
		if(s1.type > s2.type) {
			sa = s2;
			sb = s1;
		} else if(s1.type == s2.type) {
			if(s1.id < s2.id) {
				sa = s1;
				sb = s2;
			} else {
				sb = s1;
				sa = s2;
			}
		} else {
			sa = s1;
			sb = s2;
		}
		var reverse = sa == s2;
		if(itype == 0) {
			var xarb;
			if(in_arb == null) {
				var ret1 = null;
				var b;
				if(b1.arbiters.length < b2.arbiters.length) b = b1; else b = b2;
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.id == sa.id && arb.di == sb.id) {
						ret1 = arb;
						break;
					}
					cx_ite = cx_ite.next;
				}
				xarb = ret1;
			} else xarb = in_arb;
			var first = xarb == null;
			var arb1;
			var swapped = false;
			if(first) {
				if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
					arb1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb1.next;
					arb1.next = null;
				}
				null;
			} else if(xarb.fluidarb == null) {
				xarb.cleared = true;
				xarb.b1.arbiters.inlined_try_remove(xarb);
				xarb.b2.arbiters.inlined_try_remove(xarb);
				if(xarb.pair != null) {
					xarb.pair.arb = null;
					xarb.pair = null;
				}
				xarb.active = false;
				this.f_arbiters.modified = true;
				if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
					arb1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb1.next;
					arb1.next = null;
				}
				null;
				arb1.intchange = true;
				first = true;
				swapped = true;
			} else arb1 = xarb.fluidarb;
			var inttype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID;
			if(first || arb1.stamp != this.stamp || continuous) {
				arb1.stamp = this.stamp;
				if(zpp_nape.geom.ZPP_Collide.flowCollide(sa,sb,arb1)) {
					if(first) {
						arb1.b1 = s1.body;
						arb1.ws1 = s1;
						arb1.b2 = s2.body;
						arb1.ws2 = s2;
						arb1.id = sa.id;
						arb1.di = sb.id;
						arb1.b1.arbiters.inlined_add(arb1);
						arb1.b2.arbiters.inlined_add(arb1);
						arb1.active = true;
						arb1.present = 0;
						arb1.cleared = false;
						arb1.sleeping = false;
						arb1.fresh = false;
						arb1.presentable = false;
						arb1.nx = 0;
						arb1.ny = 1;
						arb1.dampx = 0;
						arb1.dampy = 0;
						arb1.adamp = 0.0;
						this.f_arbiters.inlined_add(arb1);
						arb1.fresh = !swapped;
					} else arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
					arb1.up_stamp = arb1.stamp;
					if(arb1.fresh || (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
						arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
						var anyimpure = false;
						var arbs1;
						if(arb1.ws1.id > arb1.ws2.id) arbs1 = arb1.ws2; else arbs1 = arb1.ws1;
						var arbs2;
						if(arb1.ws1.id > arb1.ws2.id) arbs2 = arb1.ws1; else arbs2 = arb1.ws2;
						this.inlined_MRCA_chains(arbs1,arbs2);
						var cx_ite1 = this.mrca1.head;
						while(cx_ite1 != null) {
							var i1 = cx_ite1.elt;
							var cx_ite2 = this.mrca2.head;
							while(cx_ite2 != null) {
								var i2 = cx_ite2.elt;
								var cb1 = i1.cbSet;
								var cb2 = i2.cbSet;
								if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var callbackset = null;
								var ncallbackset = null;
								this.prelisteners.inlined_clear();
								var lite = [null];
								cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite) {
									return function(listener) {
										if((listener.itype & inttype) != 0) {
											lite[0] = _g.prelisteners.inlined_insert(lite[0],listener);
											anyimpure = anyimpure || !listener.pure;
										}
									};
								})(lite));
								if(this.prelisteners.head == null) {
									cx_ite2 = cx_ite2.next;
									continue;
								}
								callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
								if(callbackset == null) {
									ncallbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
									this.add_callbackset(ncallbackset);
								}
								if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
									if(ncallbackset != null) callbackset = ncallbackset;
									if(callbackset != null) {
										var cx_ite3 = this.prelisteners.head;
										while(cx_ite3 != null) {
											var listener1 = cx_ite3.elt;
											if(listener1.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
												callbackset.COLLISIONstamp = this.stamp;
												callbackset.SENSORstamp = this.stamp;
												callbackset.FLUIDstamp = this.stamp;
											} else callbackset.FLUIDstamp = this.stamp;
											cx_ite3 = cx_ite3.next;
										}
									}
									arb1.mutable = true;
									if(arb1.wrap_position != null) arb1.wrap_position.zpp_inner._immutable = false;
									var pact = arb1.active;
									arb1.active = true;
									var emptycontacts = false;
									this.precb.zpp_inner.pre_arbiter = arb1;
									this.precb.zpp_inner.set = callbackset;
									var cx_ite4 = this.prelisteners.head;
									while(cx_ite4 != null) {
										var listener2 = cx_ite4.elt;
										this.precb.zpp_inner.listener = listener2;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset,listener2,this.precb.zpp_inner);
										this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
										var ret2 = listener2.handlerp(this.precb);
										if(ret2 != null) if(ret2 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
											return $r;
										}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret2 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
											return $r;
										}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret2 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
											return $r;
										}(this))) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
										cx_ite4 = cx_ite4.next;
									}
									arb1.mutable = false;
									if(arb1.wrap_position != null) arb1.wrap_position.zpp_inner._immutable = true;
									arb1.active = pact;
									if(callbackset != null) {
										var cx_ite5 = this.prelisteners.head;
										while(cx_ite5 != null) {
											var listener3 = cx_ite5.elt;
											if(listener3.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
												callbackset.COLLISIONstate = arb1.immState;
												callbackset.SENSORstate = arb1.immState;
												callbackset.FLUIDstate = arb1.immState;
											} else callbackset.FLUIDstate = arb1.immState;
											cx_ite5 = cx_ite5.next;
										}
									}
								} else if(callbackset == null) {
									if((arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb1.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
								} else arb1.immState = callbackset.FLUIDstate;
								cx_ite2 = cx_ite2.next;
							}
							cx_ite1 = cx_ite1.next;
						}
						if(anyimpure && (arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
								var o = arb1.b1;
								if(!o.world) {
									o.component.waket = this.stamp + (this.midstep?0:1);
									if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
									if(o.component.sleeping) this.really_wake(o,false);
								}
							}
							if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
								var o1 = arb1.b2;
								if(!o1.world) {
									o1.component.waket = this.stamp + (this.midstep?0:1);
									if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
									if(o1.component.sleeping) this.really_wake(o1,false);
								}
							}
						}
					}
					if((arb1.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
						if(arb1.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b1.component.sleeping) {
							var o2 = arb1.b1;
							if(!o2.world) {
								o2.component.waket = this.stamp + (this.midstep?0:1);
								if(o2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
								if(o2.component.sleeping) this.really_wake(o2,false);
							}
						}
						if(arb1.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb1.b2.component.sleeping) {
							var o3 = arb1.b2;
							if(!o3.world) {
								o3.component.waket = this.stamp + (this.midstep?0:1);
								if(o3.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o3.kinematicDelaySleep = true;
								if(o3.component.sleeping) this.really_wake(o3,false);
							}
						}
					}
					if(arb1.sleeping) {
						arb1.sleeping = false;
						this.f_arbiters.inlined_add(arb1);
					}
					ret = arb1;
				} else if(first) {
					var o4 = arb1;
					o4.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o4;
					ret = null;
				} else ret = arb1;
			} else ret = arb1;
		} else if(itype == 1) {
			var carbs;
			if(stat) carbs = this.c_arbiters_true; else carbs = this.c_arbiters_false;
			var xarb1;
			if(in_arb == null) {
				var ret3 = null;
				var b3;
				if(b1.arbiters.length < b2.arbiters.length) b3 = b1; else b3 = b2;
				var cx_ite6 = b3.arbiters.head;
				while(cx_ite6 != null) {
					var arb2 = cx_ite6.elt;
					if(arb2.id == sa.id && arb2.di == sb.id) {
						ret3 = arb2;
						break;
					}
					cx_ite6 = cx_ite6.next;
				}
				xarb1 = ret3;
			} else xarb1 = in_arb;
			var first1 = xarb1 == null;
			var arb3;
			var swapped1 = false;
			if(first1) {
				if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb3 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
					arb3 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb3.next;
					arb3.next = null;
				}
				null;
				arb3.stat = stat;
			} else if(xarb1.colarb == null) {
				xarb1.cleared = true;
				xarb1.b1.arbiters.inlined_try_remove(xarb1);
				xarb1.b2.arbiters.inlined_try_remove(xarb1);
				if(xarb1.pair != null) {
					xarb1.pair.arb = null;
					xarb1.pair = null;
				}
				xarb1.active = false;
				this.f_arbiters.modified = true;
				if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb3 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
					arb3 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb3.next;
					arb3.next = null;
				}
				null;
				arb3.intchange = true;
				arb3.stat = stat;
				first1 = true;
				swapped1 = true;
			} else {
				arb3 = xarb1.colarb;
				reverse = sa != arb3.s1;
				if(arb3.stat != stat) {
					arb3.stat = stat;
					if(!arb3.sleeping) {
						(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb3);
						carbs.add(arb3);
					}
				}
			}
			var inttype1 = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION;
			if(first1 || arb3.stamp != this.stamp || continuous) {
				arb3.stamp = this.stamp;
				if(zpp_nape.geom.ZPP_Collide.contactCollide(sa,sb,arb3,reverse)) {
					if(first1) {
						arb3.b1 = s1.body;
						arb3.ws1 = s1;
						arb3.b2 = s2.body;
						arb3.ws2 = s2;
						arb3.id = sa.id;
						arb3.di = sb.id;
						arb3.b1.arbiters.inlined_add(arb3);
						arb3.b2.arbiters.inlined_add(arb3);
						arb3.active = true;
						arb3.present = 0;
						arb3.cleared = false;
						arb3.sleeping = false;
						arb3.fresh = false;
						arb3.presentable = false;
						arb3.s1 = s1;
						arb3.s2 = s2;
						if(!arb3.userdef_restitution) {
							if(arb3.s1.material.elasticity <= Math.NEGATIVE_INFINITY || arb3.s2.material.elasticity <= Math.NEGATIVE_INFINITY) arb3.restitution = 0; else if(arb3.s1.material.elasticity >= Math.POSITIVE_INFINITY || arb3.s2.material.elasticity >= Math.POSITIVE_INFINITY) arb3.restitution = 1; else arb3.restitution = (arb3.s1.material.elasticity + arb3.s2.material.elasticity) / 2;
							if(arb3.restitution < 0) arb3.restitution = 0;
							if(arb3.restitution > 1) arb3.restitution = 1;
						}
						if(!arb3.userdef_dyn_fric) arb3.dyn_fric = Math.sqrt(arb3.s1.material.dynamicFriction * arb3.s2.material.dynamicFriction);
						if(!arb3.userdef_stat_fric) arb3.stat_fric = Math.sqrt(arb3.s1.material.staticFriction * arb3.s2.material.staticFriction);
						if(!arb3.userdef_rfric) arb3.rfric = Math.sqrt(arb3.s1.material.rollingFriction * arb3.s2.material.rollingFriction);
						carbs.inlined_add(arb3);
						arb3.fresh = !swapped1;
					} else arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
					arb3.up_stamp = arb3.stamp;
					if(arb3.fresh || (arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
						arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
						var anyimpure1 = false;
						var arbs11;
						if(arb3.ws1.id > arb3.ws2.id) arbs11 = arb3.ws2; else arbs11 = arb3.ws1;
						var arbs21;
						if(arb3.ws1.id > arb3.ws2.id) arbs21 = arb3.ws1; else arbs21 = arb3.ws2;
						this.inlined_MRCA_chains(arbs11,arbs21);
						var cx_ite7 = this.mrca1.head;
						while(cx_ite7 != null) {
							var i11 = cx_ite7.elt;
							var cx_ite8 = this.mrca2.head;
							while(cx_ite8 != null) {
								var i21 = cx_ite8.elt;
								var cb11 = i11.cbSet;
								var cb21 = i21.cbSet;
								if(cb11.manager.pair(cb11,cb21).empty_intersection()) {
									cx_ite8 = cx_ite8.next;
									continue;
								}
								var callbackset1 = null;
								var ncallbackset1 = null;
								this.prelisteners.inlined_clear();
								var lite1 = [null];
								cb11.manager.pair(cb11,cb21).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite1) {
									return function(listener4) {
										if((listener4.itype & inttype1) != 0) {
											lite1[0] = _g.prelisteners.inlined_insert(lite1[0],listener4);
											anyimpure1 = anyimpure1 || !listener4.pure;
										}
									};
								})(lite1));
								if(this.prelisteners.head == null) {
									cx_ite8 = cx_ite8.next;
									continue;
								}
								callbackset1 = zpp_nape.phys.ZPP_Interactor.get(i11,i21);
								if(callbackset1 == null) {
									ncallbackset1 = zpp_nape.space.ZPP_CallbackSet.get(i11,i21);
									this.add_callbackset(ncallbackset1);
								}
								if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
									if(ncallbackset1 != null) callbackset1 = ncallbackset1;
									if(callbackset1 != null) {
										var cx_ite9 = this.prelisteners.head;
										while(cx_ite9 != null) {
											var listener5 = cx_ite9.elt;
											if(listener5.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
												callbackset1.COLLISIONstamp = this.stamp;
												callbackset1.SENSORstamp = this.stamp;
												callbackset1.FLUIDstamp = this.stamp;
											} else callbackset1.COLLISIONstamp = this.stamp;
											cx_ite9 = cx_ite9.next;
										}
									}
									arb3.mutable = true;
									if(arb3.wrap_normal != null) arb3.wrap_normal.zpp_inner._immutable = false;
									if(arb3.wrap_contacts != null) arb3.wrap_contacts.zpp_inner.immutable = false;
									var pact1 = arb3.active;
									arb3.active = true;
									var emptycontacts1 = false;
									arb3.cleanupContacts();
									this.precb.zpp_inner.pre_arbiter = arb3;
									this.precb.zpp_inner.set = callbackset1;
									var cx_ite10 = this.prelisteners.head;
									while(cx_ite10 != null) {
										var listener6 = cx_ite10.elt;
										this.precb.zpp_inner.listener = listener6;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset1,listener6,this.precb.zpp_inner);
										this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
										var ret4 = listener6.handlerp(this.precb);
										if(ret4 != null) if(ret4 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
											return $r;
										}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret4 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
											return $r;
										}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret4 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
											return $r;
										}(this))) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
										cx_ite10 = cx_ite10.next;
									}
									arb3.mutable = false;
									if(arb3.wrap_normal != null) arb3.wrap_normal.zpp_inner._immutable = true;
									if(arb3.wrap_contacts != null) arb3.wrap_contacts.zpp_inner.immutable = true;
									arb3.active = pact1;
									if(callbackset1 != null) {
										var cx_ite11 = this.prelisteners.head;
										while(cx_ite11 != null) {
											var listener7 = cx_ite11.elt;
											if(listener7.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
												callbackset1.COLLISIONstate = arb3.immState;
												callbackset1.SENSORstate = arb3.immState;
												callbackset1.FLUIDstate = arb3.immState;
											} else callbackset1.COLLISIONstate = arb3.immState;
											cx_ite11 = cx_ite11.next;
										}
									}
								} else if(callbackset1 == null) {
									if((arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb3.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
								} else arb3.immState = callbackset1.COLLISIONstate;
								cx_ite8 = cx_ite8.next;
							}
							cx_ite7 = cx_ite7.next;
						}
						if(anyimpure1 && (arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
								var o5 = arb3.b1;
								if(!o5.world) {
									o5.component.waket = this.stamp + (this.midstep?0:1);
									if(o5.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o5.kinematicDelaySleep = true;
									if(o5.component.sleeping) this.really_wake(o5,false);
								}
							}
							if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
								var o6 = arb3.b2;
								if(!o6.world) {
									o6.component.waket = this.stamp + (this.midstep?0:1);
									if(o6.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o6.kinematicDelaySleep = true;
									if(o6.component.sleeping) this.really_wake(o6,false);
								}
							}
						}
					}
					if((arb3.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
						if(arb3.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb3.b1.component.sleeping) {
							var o7 = arb3.b1;
							if(!o7.world) {
								o7.component.waket = this.stamp + (this.midstep?0:1);
								if(o7.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o7.kinematicDelaySleep = true;
								if(o7.component.sleeping) this.really_wake(o7,false);
							}
						}
						if(arb3.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb3.b2.component.sleeping) {
							var o8 = arb3.b2;
							if(!o8.world) {
								o8.component.waket = this.stamp + (this.midstep?0:1);
								if(o8.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o8.kinematicDelaySleep = true;
								if(o8.component.sleeping) this.really_wake(o8,false);
							}
						}
					}
					if(arb3.sleeping) {
						arb3.sleeping = false;
						carbs.inlined_add(arb3);
					}
					ret = arb3;
				} else if(first1) {
					var o9 = arb3;
					o9.userdef_dyn_fric = false;
					o9.userdef_stat_fric = false;
					o9.userdef_restitution = false;
					o9.userdef_rfric = false;
					o9.__ref_edge1 = o9.__ref_edge2 = null;
					o9.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o9;
					ret = null;
				} else ret = arb3;
			} else ret = arb3;
		} else {
			var xarb2;
			if(in_arb == null) {
				var ret5 = null;
				var b4;
				if(b1.arbiters.length < b2.arbiters.length) b4 = b1; else b4 = b2;
				var cx_ite12 = b4.arbiters.head;
				while(cx_ite12 != null) {
					var arb4 = cx_ite12.elt;
					if(arb4.id == sa.id && arb4.di == sb.id) {
						ret5 = arb4;
						break;
					}
					cx_ite12 = cx_ite12.next;
				}
				xarb2 = ret5;
			} else xarb2 = in_arb;
			var first2 = xarb2 == null;
			var arb5;
			var swapped2 = false;
			if(first2) {
				if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb5 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
					arb5 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb5.next;
					arb5.next = null;
				}
				null;
			} else if(xarb2.sensorarb == null) {
				xarb2.cleared = true;
				xarb2.b1.arbiters.inlined_try_remove(xarb2);
				xarb2.b2.arbiters.inlined_try_remove(xarb2);
				if(xarb2.pair != null) {
					xarb2.pair.arb = null;
					xarb2.pair = null;
				}
				xarb2.active = false;
				this.f_arbiters.modified = true;
				if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb5 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
					arb5 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb5.next;
					arb5.next = null;
				}
				null;
				arb5.intchange = true;
				first2 = true;
				swapped2 = true;
			} else arb5 = xarb2.sensorarb;
			var inttype2 = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR;
			if(first2 || arb5.stamp != this.stamp || continuous) {
				arb5.stamp = this.stamp;
				if(zpp_nape.geom.ZPP_Collide.testCollide(sa,sb)) {
					if(first2) {
						arb5.b1 = s1.body;
						arb5.ws1 = s1;
						arb5.b2 = s2.body;
						arb5.ws2 = s2;
						arb5.id = sa.id;
						arb5.di = sb.id;
						arb5.b1.arbiters.inlined_add(arb5);
						arb5.b2.arbiters.inlined_add(arb5);
						arb5.active = true;
						arb5.present = 0;
						arb5.cleared = false;
						arb5.sleeping = false;
						arb5.fresh = false;
						arb5.presentable = false;
						this.s_arbiters.inlined_add(arb5);
						arb5.fresh = !swapped2;
					} else arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
					arb5.up_stamp = arb5.stamp;
					if(arb5.fresh || (arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
						arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
						var anyimpure2 = false;
						var arbs12;
						if(arb5.ws1.id > arb5.ws2.id) arbs12 = arb5.ws2; else arbs12 = arb5.ws1;
						var arbs22;
						if(arb5.ws1.id > arb5.ws2.id) arbs22 = arb5.ws1; else arbs22 = arb5.ws2;
						this.inlined_MRCA_chains(arbs12,arbs22);
						var cx_ite13 = this.mrca1.head;
						while(cx_ite13 != null) {
							var i12 = cx_ite13.elt;
							var cx_ite14 = this.mrca2.head;
							while(cx_ite14 != null) {
								var i22 = cx_ite14.elt;
								var cb12 = i12.cbSet;
								var cb22 = i22.cbSet;
								if(cb12.manager.pair(cb12,cb22).empty_intersection()) {
									cx_ite14 = cx_ite14.next;
									continue;
								}
								var callbackset2 = null;
								var ncallbackset2 = null;
								this.prelisteners.inlined_clear();
								var lite2 = [null];
								cb12.manager.pair(cb12,cb22).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite2) {
									return function(listener8) {
										if((listener8.itype & inttype2) != 0) {
											lite2[0] = _g.prelisteners.inlined_insert(lite2[0],listener8);
											anyimpure2 = anyimpure2 || !listener8.pure;
										}
									};
								})(lite2));
								if(this.prelisteners.head == null) {
									cx_ite14 = cx_ite14.next;
									continue;
								}
								callbackset2 = zpp_nape.phys.ZPP_Interactor.get(i12,i22);
								if(callbackset2 == null) {
									ncallbackset2 = zpp_nape.space.ZPP_CallbackSet.get(i12,i22);
									this.add_callbackset(ncallbackset2);
								}
								if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
									if(ncallbackset2 != null) callbackset2 = ncallbackset2;
									if(callbackset2 != null) {
										var cx_ite15 = this.prelisteners.head;
										while(cx_ite15 != null) {
											var listener9 = cx_ite15.elt;
											if(listener9.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
												callbackset2.COLLISIONstamp = this.stamp;
												callbackset2.SENSORstamp = this.stamp;
												callbackset2.FLUIDstamp = this.stamp;
											} else callbackset2.SENSORstamp = this.stamp;
											cx_ite15 = cx_ite15.next;
										}
									}
									var pact2 = arb5.active;
									arb5.active = true;
									var emptycontacts2 = false;
									this.precb.zpp_inner.pre_arbiter = arb5;
									this.precb.zpp_inner.set = callbackset2;
									var cx_ite16 = this.prelisteners.head;
									while(cx_ite16 != null) {
										var listener10 = cx_ite16.elt;
										this.precb.zpp_inner.listener = listener10;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset2,listener10,this.precb.zpp_inner);
										this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
										var ret6 = listener10.handlerp(this.precb);
										if(ret6 != null) if(ret6 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
											return $r;
										}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else if(ret6 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
											return $r;
										}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT; else if(ret6 == (function($this) {
											var $r;
											if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
												zpp_nape.util.ZPP_Flags.internal = true;
												zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
												zpp_nape.util.ZPP_Flags.internal = false;
											}
											$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
											return $r;
										}(this))) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS; else arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
										cx_ite16 = cx_ite16.next;
									}
									arb5.active = pact2;
									if(callbackset2 != null) {
										var cx_ite17 = this.prelisteners.head;
										while(cx_ite17 != null) {
											var listener11 = cx_ite17.elt;
											if(listener11.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
												callbackset2.COLLISIONstate = arb5.immState;
												callbackset2.SENSORstate = arb5.immState;
												callbackset2.FLUIDstate = arb5.immState;
											} else callbackset2.SENSORstate = arb5.immState;
											cx_ite17 = cx_ite17.next;
										}
									}
								} else if(callbackset2 == null) {
									if((arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb5.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
								} else arb5.immState = callbackset2.SENSORstate;
								cx_ite14 = cx_ite14.next;
							}
							cx_ite13 = cx_ite13.next;
						}
						if(anyimpure2 && (arb5.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
							if(!(arb5.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
								var o10 = arb5.b1;
								if(!o10.world) {
									o10.component.waket = this.stamp + (this.midstep?0:1);
									if(o10.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o10.kinematicDelaySleep = true;
									if(o10.component.sleeping) this.really_wake(o10,false);
								}
							}
							if(!(arb5.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
								var o11 = arb5.b2;
								if(!o11.world) {
									o11.component.waket = this.stamp + (this.midstep?0:1);
									if(o11.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o11.kinematicDelaySleep = true;
									if(o11.component.sleeping) this.really_wake(o11,false);
								}
							}
						}
					}
					if(arb5.sleeping) {
						arb5.sleeping = false;
						this.s_arbiters.inlined_add(arb5);
					}
					ret = arb5;
				} else if(first2) {
					var o12 = arb5;
					o12.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
					zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o12;
					ret = null;
				} else ret = arb5;
			} else ret = arb5;
		}
	}
	return ret;
};
zpp_nape.space.ZPP_Space.prototype.mrca1 = null;
zpp_nape.space.ZPP_Space.prototype.mrca2 = null;
zpp_nape.space.ZPP_Space.prototype.MRCA_chains = function(s1,s2) {
	this.inlined_MRCA_chains(s1,s2);
};
zpp_nape.space.ZPP_Space.prototype.inlined_MRCA_chains = function(s1,s2) {
	this.mrca1.inlined_clear();
	this.mrca2.inlined_clear();
	if(s1.cbSet != null) this.mrca1.inlined_add(s1);
	if(s1.body.cbSet != null) this.mrca1.inlined_add(s1.body);
	if(s2.cbSet != null) this.mrca2.inlined_add(s2);
	if(s2.body.cbSet != null) this.mrca2.inlined_add(s2.body);
	var c1 = s1.body.compound;
	var c2 = s2.body.compound;
	while(c1 != c2) {
		var d1;
		if(c1 == null) d1 = 0; else d1 = c1.depth;
		var d2;
		if(c2 == null) d2 = 0; else d2 = c2.depth;
		if(d1 < d2) {
			if(c2.cbSet != null) this.mrca2.inlined_add(c2);
			c2 = c2.compound;
		} else {
			if(c1.cbSet != null) this.mrca1.inlined_add(c1);
			c1 = c1.compound;
		}
	}
};
zpp_nape.space.ZPP_Space.prototype.__class__ = zpp_nape.space.ZPP_Space;
zpp_nape.space.ZPP_SweepData = $hxClasses['zpp_nape.space.ZPP_SweepData'] = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
zpp_nape.space.ZPP_SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_nape.space.ZPP_SweepData.prototype.next = null;
zpp_nape.space.ZPP_SweepData.prototype.prev = null;
zpp_nape.space.ZPP_SweepData.prototype.shape = null;
zpp_nape.space.ZPP_SweepData.prototype.aabb = null;
zpp_nape.space.ZPP_SweepData.prototype.free = function() {
	this.prev = null;
	this.shape = null;
	this.aabb = null;
};
zpp_nape.space.ZPP_SweepData.prototype.alloc = function() {
};
zpp_nape.space.ZPP_SweepData.prototype.gt = function(x) {
	return this.aabb.minx > x.aabb.minx;
};
zpp_nape.space.ZPP_SweepData.prototype.__class__ = zpp_nape.space.ZPP_SweepData;
zpp_nape.space.ZPP_SweepPhase = $hxClasses['zpp_nape.space.ZPP_SweepPhase'] = function(space) {
	this.failed = null;
	this.list = null;
	zpp_nape.space.ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
zpp_nape.space.ZPP_SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_nape.space.ZPP_SweepPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
for(var k in zpp_nape.space.ZPP_Broadphase.prototype ) zpp_nape.space.ZPP_SweepPhase.prototype[k] = zpp_nape.space.ZPP_Broadphase.prototype[k];
zpp_nape.space.ZPP_SweepPhase.prototype.list = null;
zpp_nape.space.ZPP_SweepPhase.prototype.__insert = function(shape) {
	var dat;
	if(zpp_nape.space.ZPP_SweepData.zpp_pool == null) dat = new zpp_nape.space.ZPP_SweepData(); else {
		dat = zpp_nape.space.ZPP_SweepData.zpp_pool;
		zpp_nape.space.ZPP_SweepData.zpp_pool = dat.next;
		dat.next = null;
	}
	null;
	shape.sweep = dat;
	dat.shape = shape;
	dat.aabb = shape.aabb;
	dat.next = this.list;
	if(this.list != null) this.list.prev = dat;
	this.list = dat;
};
zpp_nape.space.ZPP_SweepPhase.prototype.__remove = function(shape) {
	var dat = shape.sweep;
	if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
	if(dat.next != null) dat.next.prev = dat.prev;
	shape.sweep = null;
	var o = dat;
	o.prev = null;
	o.shape = null;
	o.aabb = null;
	o.next = zpp_nape.space.ZPP_SweepData.zpp_pool;
	zpp_nape.space.ZPP_SweepData.zpp_pool = o;
};
zpp_nape.space.ZPP_SweepPhase.prototype.__sync = function(shape) {
	if(!this.space.continuous) {
		if(shape.zip_aabb) {
			if(shape.body != null) {
				shape.zip_aabb = false;
				if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
			}
		}
	}
};
zpp_nape.space.ZPP_SweepPhase.prototype.sync_broadphase = function() {
	this.space.validation();
	if(this.list != null) this.sync_broadphase_fast();
};
zpp_nape.space.ZPP_SweepPhase.prototype.sync_broadphase_fast = function() {
	var a = this.list.next;
	while(a != null) {
		var n = a.next;
		var b = a.prev;
		if(a.aabb.minx > b.aabb.minx) {
			a = n;
			continue;
		}
		while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
		var prev = a.prev;
		prev.next = a.next;
		if(a.next != null) a.next.prev = prev;
		if(b.prev == null) {
			a.prev = null;
			this.list = a;
			a.next = b;
			b.prev = a;
		} else {
			a.prev = b.prev;
			b.prev = a;
			a.prev.next = a;
			a.next = b;
		}
		a = n;
	}
};
zpp_nape.space.ZPP_SweepPhase.prototype.broadphase = function(space,discrete) {
	if(this.list != null) {
		this.sync_broadphase_fast();
		var d1 = this.list;
		while(d1 != null) {
			var d2 = d1.next;
			var s1 = d1.shape;
			var b1 = s1.body;
			var bottom = d1.aabb.maxx;
			while(d2 != null) {
				if(d2.aabb.minx > bottom) break;
				var s2 = d2.shape;
				var b2 = s2.body;
				if(b2 == b1) {
					d2 = d2.next;
					continue;
				}
				if(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
					d2 = d2.next;
					continue;
				}
				if(b1.component.sleeping && b2.component.sleeping) {
					d2 = d2.next;
					continue;
				}
				if(s1.aabb.intersectY(s2.aabb)) {
					if(discrete) space.narrowPhase(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false); else space.continuousEvent(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false);
				}
				d2 = d2.next;
			}
			d1 = d1.next;
		}
	}
};
zpp_nape.space.ZPP_SweepPhase.prototype.clear = function() {
	while(this.list != null) {
		this.list.shape.removedFromSpace();
		this.__remove(this.list.shape);
	}
};
zpp_nape.space.ZPP_SweepPhase.prototype.shapesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	var a = this.list;
	while(a != null && a.aabb.minx > x) a = a.next;
	while(a != null && a.aabb.minx <= x) {
		if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
					if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
				} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
			}
		}
		a = a.next;
	}
	var o = v;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	var a = this.list;
	while(a != null && a.aabb.minx > x) a = a.next;
	while(a != null && a.aabb.minx <= x) {
		if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(!ret.has(body)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
						if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(body);
					} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(body);
				}
			}
		}
		a = a.next;
	}
	var o = v;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.shapesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var shape = a.shape;
		if(filter == null || shape.filter.shouldCollide(filter)) {
			if(strict) {
				if(containment) {
					if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
				} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
					if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
				}
			} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
		}
		a = a.next;
	}
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.failed = null;
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.failed == null) this.failed = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var shape = a.shape;
		var body = shape.body.outer;
		if(a.aabb.intersect(ab)) {
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
				} else if(containment) {
					if(!this.failed.has(body)) {
						var col1 = ab.contains(shape.aabb);
						if(!ret.has(body) && col1) ret.push(body); else if(!col1) {
							ret.remove(body);
							this.failed.push(body);
						}
					}
				} else if(!ret.has(body) && ab.contains(shape.aabb)) ret.push(body);
			}
		}
		a = a.next;
	}
	this.failed.clear();
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.shapesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(containment) {
					if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
				} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
			}
		}
		a = a.next;
	}
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.failed == null) this.failed = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(containment) {
					if(!this.failed.has(body)) {
						var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape);
						if(!ret.has(body) && col) ret.push(body); else if(!col) {
							ret.remove(body);
							this.failed.push(body);
						}
					}
				} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
			}
		}
		a = a.next;
	}
	this.failed.clear();
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.shapesInShape = function(shape,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shape);
	var ab = shape.aabb;
	var ret;
	if(output == null) ret = new nape.shape.ShapeList(); else ret = output;
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape2 = a.shape;
			if(filter == null || shape2.filter.shouldCollide(filter)) {
				if(containment) {
					if(zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.push(shape2.outer);
				} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
			}
		}
		a = a.next;
	}
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesInShape = function(shape,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shape);
	var ab = shape.aabb;
	var ret;
	if(output == null) ret = new nape.phys.BodyList(); else ret = output;
	if(this.failed == null) this.failed = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape2 = a.shape;
			var body = shape2.body.outer;
			if(filter == null || shape2.filter.shouldCollide(filter)) {
				if(containment) {
					if(!this.failed.has(body)) {
						var col = zpp_nape.geom.ZPP_Collide.containTest(shape,shape2);
						if(!ret.has(body) && col) ret.push(body); else if(!col) {
							ret.remove(body);
							this.failed.push(body);
						}
					}
				} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,shape2)) ret.push(body);
			}
		}
		a = a.next;
	}
	this.failed.clear();
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.rayCast = function(ray,inner,filter) {
	this.sync_broadphase();
	ray.validate_dir();
	var rayab = ray.rayAABB();
	var mint = ray.maxdist;
	var minres = null;
	if(ray.dirx == 0) {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.minx) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0 && t < mint) {
					var result;
					if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result = ray.circlesect(a.shape.circle,inner,mint); else result = ray.polysect(a.shape.polygon,inner,mint);
					if(result != null) {
						if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						mint = result.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							minres.zpp_inner.free();
						}
						minres = result;
					}
				}
			}
			a = a.next;
		}
	} else if(ray.dirx < 0) {
		var a1 = this.list;
		var b = null;
		while(a1 != null && a1.aabb.minx <= rayab.maxx) {
			b = a1;
			a1 = a1.next;
		}
		a1 = b;
		while(a1 != null) {
			if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
				var t1 = ray.aabbsect(a1.aabb);
				if(t1 >= 0 && t1 < mint) {
					var result1;
					if(a1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result1 = ray.circlesect(a1.shape.circle,inner,mint); else result1 = ray.polysect(a1.shape.polygon,inner,mint);
					if(result1 != null) {
						if(result1.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						mint = result1.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							minres.zpp_inner.free();
						}
						minres = result1;
					}
				}
			}
			a1 = a1.prev;
		}
	} else {
		var a2 = this.list;
		while(a2 != null && a2.aabb.minx <= rayab.maxx && a2.aabb.minx < ray.originx + ray.dirx * mint) {
			if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
				var t2 = ray.aabbsect(a2.aabb);
				if(t2 >= 0 && t2 < mint) {
					var result2;
					if(a2.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) result2 = ray.circlesect(a2.shape.circle,inner,mint); else result2 = ray.polysect(a2.shape.polygon,inner,mint);
					if(result2 != null) {
						if(result2.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						mint = result2.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							minres.zpp_inner.free();
						}
						minres = result2;
					}
				}
			}
			a2 = a2.next;
		}
	}
	var o = rayab;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
	zpp_nape.geom.ZPP_AABB.zpp_pool = o;
	return minres;
};
zpp_nape.space.ZPP_SweepPhase.prototype.rayMultiCast = function(ray,inner,filter,output) {
	this.sync_broadphase();
	ray.validate_dir();
	var rayab = ray.rayAABB();
	var ret;
	if(output == null) ret = new nape.geom.RayResultList(); else ret = output;
	if(ray.dirx == 0) {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.minx) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0) {
					if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
				}
			}
			a = a.next;
		}
	} else if(ray.dirx < 0) {
		var a1 = this.list;
		var b = null;
		while(a1 != null && a1.aabb.minx <= rayab.maxx) {
			b = a1;
			a1 = a1.next;
		}
		a1 = b;
		while(a1 != null) {
			if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
				var t1 = ray.aabbsect(a1.aabb);
				if(t1 >= 0) {
					if(a1.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a1.shape.circle,inner,ret); else ray.polysect2(a1.shape.polygon,inner,ret);
				}
			}
			a1 = a1.prev;
		}
	} else {
		var a2 = this.list;
		while(a2 != null && a2.aabb.minx <= rayab.maxx) {
			if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
				var t2 = ray.aabbsect(a2.aabb);
				if(t2 >= 0) {
					if(a2.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a2.shape.circle,inner,ret); else ray.polysect2(a2.shape.polygon,inner,ret);
				}
			}
			a2 = a2.next;
		}
	}
	var o = rayab;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
	zpp_nape.geom.ZPP_AABB.zpp_pool = o;
	return ret;
};
zpp_nape.space.ZPP_SweepPhase.prototype.__class__ = zpp_nape.space.ZPP_SweepPhase;
zpp_nape.util.ZNPArray2_Float = $hxClasses['zpp_nape.util.ZNPArray2_Float'] = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_Float.__name__ = ["zpp_nape","util","ZNPArray2_Float"];
zpp_nape.util.ZNPArray2_Float.prototype.list = null;
zpp_nape.util.ZNPArray2_Float.prototype.width = null;
zpp_nape.util.ZNPArray2_Float.prototype.resize = function(width,height,def) {
	this.width = width;
	var _g1 = 0;
	var _g = width * height;
	while(_g1 < _g) {
		var i = _g1++;
		this.list[i] = def;
	}
};
zpp_nape.util.ZNPArray2_Float.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
};
zpp_nape.util.ZNPArray2_Float.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
};
zpp_nape.util.ZNPArray2_Float.prototype.__class__ = zpp_nape.util.ZNPArray2_Float;
zpp_nape.util.ZNPArray2_ZPP_GeomVert = $hxClasses['zpp_nape.util.ZNPArray2_ZPP_GeomVert'] = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_GeomVert"];
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype.list = null;
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype.width = null;
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype.resize = function(width,height,def) {
	this.width = width;
	var _g1 = 0;
	var _g = width * height;
	while(_g1 < _g) {
		var i = _g1++;
		this.list[i] = def;
	}
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype.__class__ = zpp_nape.util.ZNPArray2_ZPP_GeomVert;
zpp_nape.util.ZNPArray2_ZPP_MarchPair = $hxClasses['zpp_nape.util.ZNPArray2_ZPP_MarchPair'] = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_MarchPair"];
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype.list = null;
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype.width = null;
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype.resize = function(width,height,def) {
	this.width = width;
	var _g1 = 0;
	var _g = width * height;
	while(_g1 < _g) {
		var i = _g1++;
		this.list[i] = def;
	}
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype.__class__ = zpp_nape.util.ZNPArray2_ZPP_MarchPair;
zpp_nape.util.Hashable2_Boolfalse = $hxClasses['zpp_nape.util.Hashable2_Boolfalse'] = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
zpp_nape.util.Hashable2_Boolfalse.__name__ = ["zpp_nape","util","Hashable2_Boolfalse"];
zpp_nape.util.Hashable2_Boolfalse.get = function(id,di,val) {
	var ret = zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di);
	ret.value = val;
	return ret;
};
zpp_nape.util.Hashable2_Boolfalse.getpersist = function(id,di) {
	var ret;
	if(zpp_nape.util.Hashable2_Boolfalse.zpp_pool == null) ret = new zpp_nape.util.Hashable2_Boolfalse(); else {
		ret = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.id = id;
	ret.di = di;
	return ret;
};
zpp_nape.util.Hashable2_Boolfalse.ordered_get = function(id,di,val) {
	if(id <= di) return zpp_nape.util.Hashable2_Boolfalse.get(id,di,val); else return zpp_nape.util.Hashable2_Boolfalse.get(di,id,val);
};
zpp_nape.util.Hashable2_Boolfalse.ordered_get_persist = function(id,di) {
	if(id <= di) return zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di); else return zpp_nape.util.Hashable2_Boolfalse.getpersist(di,id);
};
zpp_nape.util.Hashable2_Boolfalse.prototype.value = null;
zpp_nape.util.Hashable2_Boolfalse.prototype.next = null;
zpp_nape.util.Hashable2_Boolfalse.prototype.hnext = null;
zpp_nape.util.Hashable2_Boolfalse.prototype.id = null;
zpp_nape.util.Hashable2_Boolfalse.prototype.di = null;
zpp_nape.util.Hashable2_Boolfalse.prototype.free = function() {
};
zpp_nape.util.Hashable2_Boolfalse.prototype.alloc = function() {
};
zpp_nape.util.Hashable2_Boolfalse.prototype.__class__ = zpp_nape.util.Hashable2_Boolfalse;
zpp_nape.util.FastHash2_Hashable2_Boolfalse = $hxClasses['zpp_nape.util.FastHash2_Hashable2_Boolfalse'] = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = new Array();
	var _g1 = 0;
	var _g = 1048576;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Boolfalse"];
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.table = null;
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.cnt = null;
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.empty = function() {
	return this.cnt == 0;
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.clear = function() {
	var _g1 = 0;
	var _g = this.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = this.table[i];
		if(n == null) continue;
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			n;
			n = t;
		}
		this.table[i] = null;
	}
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.get = function(id,di) {
	var n = this.table[id * 106039 + di & 1048575];
	if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n;
	}
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.ordered_get = function(id,di) {
	if(id > di) {
		var t = id;
		id = di;
		di = t;
	}
	return this.get(id,di);
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.has = function(id,di) {
	var n = this.table[id * 106039 + di & 1048575];
	if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n != null;
	}
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.maybeAdd = function(arb) {
	var h = arb.id * 106039 + arb.di & 1048575;
	var n = this.table[h];
	var cont = true;
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else if(cont) {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
	if(cont) this.cnt++;
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.add = function(arb) {
	var h = arb.id * 106039 + arb.di & 1048575;
	var n = this.table[h];
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
	this.cnt++;
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.remove = function(arb) {
	var h = arb.id * 106039 + arb.di & 1048575;
	var n = this.table[h];
	if(n == arb) this.table[h] = n.hnext; else if(n != null) {
		var pre;
		do {
			pre = n;
			n = n.hnext;
		} while(n != null && n != arb);
		pre.hnext = n.hnext;
	}
	arb.hnext = null;
	this.cnt--;
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.hash = function(id,di) {
	return id * 106039 + di & 1048575;
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype.__class__ = zpp_nape.util.FastHash2_Hashable2_Boolfalse;
zpp_nape.util.ZNPList_ZPP_CallbackSet = $hxClasses['zpp_nape.util.ZNPList_ZPP_CallbackSet'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_CallbackSet;
zpp_nape.util.ZNPList_ZPP_Shape = $hxClasses['zpp_nape.util.ZNPList_ZPP_Shape'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_nape.util.ZNPList_ZPP_Shape.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Shape.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Shape;
zpp_nape.util.ZNPList_ZPP_Body = $hxClasses['zpp_nape.util.ZNPList_ZPP_Body'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_nape.util.ZNPList_ZPP_Body.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Body.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Body;
zpp_nape.util.ZNPList_ZPP_Compound = $hxClasses['zpp_nape.util.ZNPList_ZPP_Compound'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_nape.util.ZNPList_ZPP_Compound.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Compound.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Compound.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Compound.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Compound.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Compound.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Compound;
zpp_nape.util.ZNPList_ZPP_Arbiter = $hxClasses['zpp_nape.util.ZNPList_ZPP_Arbiter'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Arbiter;
zpp_nape.util.ZNPList_ZPP_CbSetPair = $hxClasses['zpp_nape.util.ZNPList_ZPP_CbSetPair'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_CbSetPair;
zpp_nape.util.ZNPList_ZPP_CutInt = $hxClasses['zpp_nape.util.ZNPList_ZPP_CutInt'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutInt"];
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_CutInt.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_CutInt;
zpp_nape.util.ZNPList_ZPP_CutVert = $hxClasses['zpp_nape.util.ZNPList_ZPP_CutVert'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutVert"];
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_CutVert.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_CutVert;
zpp_nape.util.ZNPList_ZPP_PartitionVertex = $hxClasses['zpp_nape.util.ZNPList_ZPP_PartitionVertex'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_PartitionVertex;
zpp_nape.util.ZNPList_ZPP_PartitionedPoly = $hxClasses['zpp_nape.util.ZNPList_ZPP_PartitionedPoly'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_PartitionedPoly;
zpp_nape.util.ZNPList_ZPP_SimplifyP = $hxClasses['zpp_nape.util.ZNPList_ZPP_SimplifyP'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SimplifyP;
zpp_nape.util.ZNPList_ZPP_GeomVert = $hxClasses['zpp_nape.util.ZNPList_ZPP_GeomVert'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_GeomVert;
zpp_nape.util.ZNPList_ZPP_SimpleVert = $hxClasses['zpp_nape.util.ZNPList_ZPP_SimpleVert'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SimpleVert;
zpp_nape.util.ZNPList_ZPP_SimpleEvent = $hxClasses['zpp_nape.util.ZNPList_ZPP_SimpleEvent'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SimpleEvent;
zpp_nape.util.ZNPList_ZPP_AABBPair = $hxClasses['zpp_nape.util.ZNPList_ZPP_AABBPair'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_AABBPair;
zpp_nape.util.ZNPList_ZPP_Edge = $hxClasses['zpp_nape.util.ZNPList_ZPP_Edge'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_nape.util.ZNPList_ZPP_Edge.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Edge.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Edge;
zpp_nape.util.ZNPList_ZPP_AABBNode = $hxClasses['zpp_nape.util.ZNPList_ZPP_AABBNode'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_AABBNode;
zpp_nape.util.ZNPList_ZPP_Component = $hxClasses['zpp_nape.util.ZNPList_ZPP_Component'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_nape.util.ZNPList_ZPP_Component.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Component.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Component;
zpp_nape.util.ZNPList_ZPP_InteractionGroup = $hxClasses['zpp_nape.util.ZNPList_ZPP_InteractionGroup'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_InteractionGroup;
zpp_nape.util.ZNPList_ZPP_ColArbiter = $hxClasses['zpp_nape.util.ZNPList_ZPP_ColArbiter'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_ColArbiter;
zpp_nape.util.ZNPList_ZPP_FluidArbiter = $hxClasses['zpp_nape.util.ZNPList_ZPP_FluidArbiter'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_FluidArbiter;
zpp_nape.util.ZNPList_ZPP_SensorArbiter = $hxClasses['zpp_nape.util.ZNPList_ZPP_SensorArbiter'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SensorArbiter;
zpp_nape.util.ZNPList_ZPP_Listener = $hxClasses['zpp_nape.util.ZNPList_ZPP_Listener'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_nape.util.ZNPList_ZPP_Listener.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_Listener.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Listener;
zpp_nape.util.ZNPList_ZPP_ToiEvent = $hxClasses['zpp_nape.util.ZNPList_ZPP_ToiEvent'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_ToiEvent;
zpp_nape.util.ZNPList_ConvexResult = $hxClasses['zpp_nape.util.ZNPList_ConvexResult'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_nape.util.ZNPList_ConvexResult.prototype.head = null;
zpp_nape.util.ZNPList_ConvexResult.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.modified = null;
zpp_nape.util.ZNPList_ConvexResult.prototype.pushmod = null;
zpp_nape.util.ZNPList_ConvexResult.prototype.length = null;
zpp_nape.util.ZNPList_ConvexResult.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
		ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ConvexResult.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
		ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
	zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ConvexResult.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
	zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ConvexResult.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ConvexResult.prototype.__class__ = zpp_nape.util.ZNPList_ConvexResult;
zpp_nape.util.ZNPList_ZPP_GeomPoly = $hxClasses['zpp_nape.util.ZNPList_ZPP_GeomPoly'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.length = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
		ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_GeomPoly;
zpp_nape.util.ZNPList_RayResult = $hxClasses['zpp_nape.util.ZNPList_RayResult'] = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_nape.util.ZNPList_RayResult.prototype.head = null;
zpp_nape.util.ZNPList_RayResult.prototype.begin = function() {
	return this.head;
};
zpp_nape.util.ZNPList_RayResult.prototype.modified = null;
zpp_nape.util.ZNPList_RayResult.prototype.pushmod = null;
zpp_nape.util.ZNPList_RayResult.prototype.length = null;
zpp_nape.util.ZNPList_RayResult.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_RayResult.prototype.add = function(o) {
	return this.inlined_add(o);
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_add = function(o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
		ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
zpp_nape.util.ZNPList_RayResult.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
};
zpp_nape.util.ZNPList_RayResult.prototype.insert = function(cur,o) {
	return this.inlined_insert(cur,o);
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_insert = function(cur,o) {
	var temp;
	var ret;
	if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
		ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.elt = o;
	temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
zpp_nape.util.ZNPList_RayResult.prototype.pop = function() {
	this.inlined_pop();
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
	zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.length--;
};
zpp_nape.util.ZNPList_RayResult.prototype.pop_unsafe = function() {
	return this.inlined_pop_unsafe();
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
zpp_nape.util.ZNPList_RayResult.prototype.remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_RayResult.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_remove = function(obj) {
	this.inlined_try_remove(obj);
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.inlined_erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_RayResult.prototype.erase = function(pre) {
	return this.inlined_erase(pre);
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) this.pushmod = true;
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) this.pushmod = true;
	}
	var o = old;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
	zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
zpp_nape.util.ZNPList_RayResult.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
zpp_nape.util.ZNPList_RayResult.prototype.clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_clear = function() {
	while(!(this.head == null)) this.inlined_pop();
	this.pushmod = true;
};
zpp_nape.util.ZNPList_RayResult.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
zpp_nape.util.ZNPList_RayResult.prototype.empty = function() {
	return this.head == null;
};
zpp_nape.util.ZNPList_RayResult.prototype.size = function() {
	return this.length;
};
zpp_nape.util.ZNPList_RayResult.prototype.has = function(obj) {
	return this.inlined_has(obj);
};
zpp_nape.util.ZNPList_RayResult.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		var npite = cx_ite.elt;
		if(npite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_nape.util.ZNPList_RayResult.prototype.front = function() {
	return this.head.elt;
};
zpp_nape.util.ZNPList_RayResult.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
zpp_nape.util.ZNPList_RayResult.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
zpp_nape.util.ZNPList_RayResult.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) return it.elt; else return null;
};
zpp_nape.util.ZNPList_RayResult.prototype.__class__ = zpp_nape.util.ZNPList_RayResult;
zpp_nape.util.ZNPNode_ZPP_CbType = $hxClasses['zpp_nape.util.ZNPNode_ZPP_CbType'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_nape.util.ZNPNode_ZPP_CbType.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_CbType.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_CbType.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_CbType.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_CbType.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_CbType.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_CbType;
zpp_nape.util.ZNPNode_ZPP_CallbackSet = $hxClasses['zpp_nape.util.ZNPNode_ZPP_CallbackSet'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_CallbackSet;
zpp_nape.util.ZNPNode_ZPP_Shape = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Shape'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Shape;
zpp_nape.util.ZNPNode_ZPP_Body = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Body'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_nape.util.ZNPNode_ZPP_Body.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Body.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Body.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Body.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Body.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Body.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Body;
zpp_nape.util.ZNPNode_ZPP_Constraint = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Constraint'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Constraint;
zpp_nape.util.ZNPNode_ZPP_Compound = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Compound'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_nape.util.ZNPNode_ZPP_Compound.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Compound.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Compound.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Compound.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Compound.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Compound.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Compound;
zpp_nape.util.ZNPNode_ZPP_Arbiter = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Arbiter'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Arbiter;
zpp_nape.util.ZNPNode_ZPP_InteractionListener = $hxClasses['zpp_nape.util.ZNPNode_ZPP_InteractionListener'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_InteractionListener;
zpp_nape.util.ZNPNode_ZPP_CbSet = $hxClasses['zpp_nape.util.ZNPNode_ZPP_CbSet'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_CbSet;
zpp_nape.util.ZNPNode_ZPP_Interactor = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Interactor'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Interactor;
zpp_nape.util.ZNPNode_ZPP_BodyListener = $hxClasses['zpp_nape.util.ZNPNode_ZPP_BodyListener'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_BodyListener;
zpp_nape.util.ZNPNode_ZPP_CbSetPair = $hxClasses['zpp_nape.util.ZNPNode_ZPP_CbSetPair'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_CbSetPair;
zpp_nape.util.ZNPNode_ZPP_ConstraintListener = $hxClasses['zpp_nape.util.ZNPNode_ZPP_ConstraintListener'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_ConstraintListener;
zpp_nape.util.ZNPNode_ZPP_CutInt = $hxClasses['zpp_nape.util.ZNPNode_ZPP_CutInt'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutInt"];
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_CutInt;
zpp_nape.util.ZNPNode_ZPP_CutVert = $hxClasses['zpp_nape.util.ZNPNode_ZPP_CutVert'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutVert"];
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_CutVert;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex = $hxClasses['zpp_nape.util.ZNPNode_ZPP_PartitionVertex'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_PartitionVertex;
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly = $hxClasses['zpp_nape.util.ZNPNode_ZPP_PartitionedPoly'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly;
zpp_nape.util.ZNPNode_ZPP_SimplifyP = $hxClasses['zpp_nape.util.ZNPNode_ZPP_SimplifyP'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SimplifyP;
zpp_nape.util.ZNPNode_ZPP_GeomVert = $hxClasses['zpp_nape.util.ZNPNode_ZPP_GeomVert'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_GeomVert;
zpp_nape.util.ZNPNode_ZPP_SimpleVert = $hxClasses['zpp_nape.util.ZNPNode_ZPP_SimpleVert'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SimpleVert;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent = $hxClasses['zpp_nape.util.ZNPNode_ZPP_SimpleEvent'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SimpleEvent;
zpp_nape.util.ZNPNode_ZPP_AABBPair = $hxClasses['zpp_nape.util.ZNPNode_ZPP_AABBPair'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_AABBPair;
zpp_nape.util.ZNPNode_ZPP_Vec2 = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Vec2'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Vec2;
zpp_nape.util.ZNPNode_ZPP_Edge = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Edge'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Edge;
zpp_nape.util.ZNPNode_ZPP_AABBNode = $hxClasses['zpp_nape.util.ZNPNode_ZPP_AABBNode'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_AABBNode;
zpp_nape.util.ZNPNode_ZPP_Component = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Component'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_nape.util.ZNPNode_ZPP_Component.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Component.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Component.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Component.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Component.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Component.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Component;
zpp_nape.util.ZNPNode_ZPP_InteractionGroup = $hxClasses['zpp_nape.util.ZNPNode_ZPP_InteractionGroup'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_InteractionGroup;
zpp_nape.util.ZNPNode_ZPP_ColArbiter = $hxClasses['zpp_nape.util.ZNPNode_ZPP_ColArbiter'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_ColArbiter;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter = $hxClasses['zpp_nape.util.ZNPNode_ZPP_FluidArbiter'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_FluidArbiter;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter = $hxClasses['zpp_nape.util.ZNPNode_ZPP_SensorArbiter'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SensorArbiter;
zpp_nape.util.ZNPNode_ZPP_Listener = $hxClasses['zpp_nape.util.ZNPNode_ZPP_Listener'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Listener;
zpp_nape.util.ZNPNode_ZPP_ToiEvent = $hxClasses['zpp_nape.util.ZNPNode_ZPP_ToiEvent'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_ToiEvent;
zpp_nape.util.ZNPNode_ConvexResult = $hxClasses['zpp_nape.util.ZNPNode_ConvexResult'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_nape.util.ZNPNode_ConvexResult.prototype.next = null;
zpp_nape.util.ZNPNode_ConvexResult.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ConvexResult.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ConvexResult.prototype.elt = null;
zpp_nape.util.ZNPNode_ConvexResult.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ConvexResult.prototype.__class__ = zpp_nape.util.ZNPNode_ConvexResult;
zpp_nape.util.ZNPNode_ZPP_GeomPoly = $hxClasses['zpp_nape.util.ZNPNode_ZPP_GeomPoly'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_GeomPoly;
zpp_nape.util.ZNPNode_RayResult = $hxClasses['zpp_nape.util.ZNPNode_RayResult'] = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_nape.util.ZNPNode_RayResult.prototype.next = null;
zpp_nape.util.ZNPNode_RayResult.prototype.alloc = function() {
};
zpp_nape.util.ZNPNode_RayResult.prototype.free = function() {
	this.elt = null;
};
zpp_nape.util.ZNPNode_RayResult.prototype.elt = null;
zpp_nape.util.ZNPNode_RayResult.prototype.elem = function() {
	return this.elt;
};
zpp_nape.util.ZNPNode_RayResult.prototype.__class__ = zpp_nape.util.ZNPNode_RayResult;
zpp_nape.util.ZPP_MixVec2List = $hxClasses['zpp_nape.util.ZPP_MixVec2List'] = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape.geom.Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
zpp_nape.util.ZPP_MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_nape.util.ZPP_MixVec2List.__super__ = nape.geom.Vec2List;
for(var k in nape.geom.Vec2List.prototype ) zpp_nape.util.ZPP_MixVec2List.prototype[k] = nape.geom.Vec2List.prototype[k];
zpp_nape.util.ZPP_MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_nape.util.ZPP_MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_nape.util.ZPP_MixVec2List.prototype.inner = null;
zpp_nape.util.ZPP_MixVec2List.prototype._length = null;
zpp_nape.util.ZPP_MixVec2List.prototype.zip_length = null;
zpp_nape.util.ZPP_MixVec2List.prototype.at_ite = null;
zpp_nape.util.ZPP_MixVec2List.prototype.at_index = null;
zpp_nape.util.ZPP_MixVec2List.prototype.zpp_gl = function() {
	this.zpp_vm();
	if(this.zip_length) {
		this._length = 0;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this._length++;
			cx_ite = cx_ite.next;
		}
		this.zip_length = false;
	}
	return this._length;
};
zpp_nape.util.ZPP_MixVec2List.prototype.zpp_vm = function() {
	this.zpp_inner.validate();
	if(this.inner.modified) {
		this.zip_length = true;
		this._length = 0;
		this.at_ite = null;
	}
};
zpp_nape.util.ZPP_MixVec2List.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
	if(index < this.at_index || this.at_ite == null) {
		this.at_index = 0;
		this.at_ite = this.inner.next;
		while(true) {
			var x = this.at_ite;
			break;
			this.at_ite = this.at_ite.next;
		}
	}
	while(this.at_index != index) {
		this.at_index++;
		this.at_ite = this.at_ite.next;
		while(true) {
			var x1 = this.at_ite;
			break;
			this.at_ite = this.at_ite.next;
		}
	}
	return this.at_ite.wrapper();
};
zpp_nape.util.ZPP_MixVec2List.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	if(obj.zpp_inner._inuse) throw "Error: " + "Vec2" + " is already in use";
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
			var ite = this.inner.iterator_at(this.zpp_gl() - 1);
			this.inner.insert(ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
zpp_nape.util.ZPP_MixVec2List.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	if(obj.zpp_inner._inuse) throw "Error: " + "Vec2" + " is already in use";
	var cont;
	if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			var ite = this.inner.iterator_at(this.zpp_gl() - 1);
			this.inner.insert(ite,obj.zpp_inner);
		} else this.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
};
zpp_nape.util.ZPP_MixVec2List.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.inner.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.inner.pop();
	} else {
		if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
		var ite;
		if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) ret = this.inner.next; else ret = ite.next;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
zpp_nape.util.ZPP_MixVec2List.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
		var ite;
		if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) ret = this.inner.next; else ret = ite.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		if(!this.zpp_inner.dontremove) this.inner.erase(ite);
	} else {
		ret = this.inner.next;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
		if(!this.zpp_inner.dontremove) this.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx2 = ret.wrapper();
	return retx2;
};
zpp_nape.util.ZPP_MixVec2List.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret;
	ret = false;
	var cx_ite = this.inner.next;
	while(cx_ite != null) {
		var x = cx_ite;
		if(obj.zpp_inner == x) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		if(!this.zpp_inner.dontremove) this.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
};
zpp_nape.util.ZPP_MixVec2List.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
};
zpp_nape.util.ZPP_MixVec2List.prototype.__class__ = zpp_nape.util.ZPP_MixVec2List;
zpp_nape.util.ZPP_ConstraintList = $hxClasses['zpp_nape.util.ZPP_ConstraintList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_nape.util.ZPP_ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.constraint.ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ConstraintList.prototype.outer = null;
zpp_nape.util.ZPP_ConstraintList.prototype.inner = null;
zpp_nape.util.ZPP_ConstraintList.prototype.immutable = null;
zpp_nape.util.ZPP_ConstraintList.prototype._invalidated = null;
zpp_nape.util.ZPP_ConstraintList.prototype._invalidate = null;
zpp_nape.util.ZPP_ConstraintList.prototype._validate = null;
zpp_nape.util.ZPP_ConstraintList.prototype._modifiable = null;
zpp_nape.util.ZPP_ConstraintList.prototype.adder = null;
zpp_nape.util.ZPP_ConstraintList.prototype.post_adder = null;
zpp_nape.util.ZPP_ConstraintList.prototype.subber = null;
zpp_nape.util.ZPP_ConstraintList.prototype.dontremove = null;
zpp_nape.util.ZPP_ConstraintList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ConstraintList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_ConstraintList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_ConstraintList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_ConstraintList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_ConstraintList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_ConstraintList.prototype.at_index = null;
zpp_nape.util.ZPP_ConstraintList.prototype.at_ite = null;
zpp_nape.util.ZPP_ConstraintList.prototype.push_ite = null;
zpp_nape.util.ZPP_ConstraintList.prototype.zip_length = null;
zpp_nape.util.ZPP_ConstraintList.prototype.user_length = null;
zpp_nape.util.ZPP_ConstraintList.prototype.__class__ = zpp_nape.util.ZPP_ConstraintList;
zpp_nape.util.ZPP_BodyList = $hxClasses['zpp_nape.util.ZPP_BodyList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Body();
	this._invalidated = true;
};
zpp_nape.util.ZPP_BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_nape.util.ZPP_BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_BodyList.prototype.outer = null;
zpp_nape.util.ZPP_BodyList.prototype.inner = null;
zpp_nape.util.ZPP_BodyList.prototype.immutable = null;
zpp_nape.util.ZPP_BodyList.prototype._invalidated = null;
zpp_nape.util.ZPP_BodyList.prototype._invalidate = null;
zpp_nape.util.ZPP_BodyList.prototype._validate = null;
zpp_nape.util.ZPP_BodyList.prototype._modifiable = null;
zpp_nape.util.ZPP_BodyList.prototype.adder = null;
zpp_nape.util.ZPP_BodyList.prototype.post_adder = null;
zpp_nape.util.ZPP_BodyList.prototype.subber = null;
zpp_nape.util.ZPP_BodyList.prototype.dontremove = null;
zpp_nape.util.ZPP_BodyList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_BodyList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_BodyList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_BodyList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_BodyList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_BodyList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_BodyList.prototype.at_index = null;
zpp_nape.util.ZPP_BodyList.prototype.at_ite = null;
zpp_nape.util.ZPP_BodyList.prototype.push_ite = null;
zpp_nape.util.ZPP_BodyList.prototype.zip_length = null;
zpp_nape.util.ZPP_BodyList.prototype.user_length = null;
zpp_nape.util.ZPP_BodyList.prototype.__class__ = zpp_nape.util.ZPP_BodyList;
zpp_nape.util.ZPP_InteractorList = $hxClasses['zpp_nape.util.ZPP_InteractorList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this._invalidated = true;
};
zpp_nape.util.ZPP_InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_nape.util.ZPP_InteractorList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_InteractorList.prototype.outer = null;
zpp_nape.util.ZPP_InteractorList.prototype.inner = null;
zpp_nape.util.ZPP_InteractorList.prototype.immutable = null;
zpp_nape.util.ZPP_InteractorList.prototype._invalidated = null;
zpp_nape.util.ZPP_InteractorList.prototype._invalidate = null;
zpp_nape.util.ZPP_InteractorList.prototype._validate = null;
zpp_nape.util.ZPP_InteractorList.prototype._modifiable = null;
zpp_nape.util.ZPP_InteractorList.prototype.adder = null;
zpp_nape.util.ZPP_InteractorList.prototype.post_adder = null;
zpp_nape.util.ZPP_InteractorList.prototype.subber = null;
zpp_nape.util.ZPP_InteractorList.prototype.dontremove = null;
zpp_nape.util.ZPP_InteractorList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_InteractorList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_InteractorList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_InteractorList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_InteractorList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_InteractorList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_InteractorList.prototype.at_index = null;
zpp_nape.util.ZPP_InteractorList.prototype.at_ite = null;
zpp_nape.util.ZPP_InteractorList.prototype.push_ite = null;
zpp_nape.util.ZPP_InteractorList.prototype.zip_length = null;
zpp_nape.util.ZPP_InteractorList.prototype.user_length = null;
zpp_nape.util.ZPP_InteractorList.prototype.__class__ = zpp_nape.util.ZPP_InteractorList;
zpp_nape.util.ZPP_CompoundList = $hxClasses['zpp_nape.util.ZPP_CompoundList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Compound();
	this._invalidated = true;
};
zpp_nape.util.ZPP_CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_nape.util.ZPP_CompoundList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_CompoundList.prototype.outer = null;
zpp_nape.util.ZPP_CompoundList.prototype.inner = null;
zpp_nape.util.ZPP_CompoundList.prototype.immutable = null;
zpp_nape.util.ZPP_CompoundList.prototype._invalidated = null;
zpp_nape.util.ZPP_CompoundList.prototype._invalidate = null;
zpp_nape.util.ZPP_CompoundList.prototype._validate = null;
zpp_nape.util.ZPP_CompoundList.prototype._modifiable = null;
zpp_nape.util.ZPP_CompoundList.prototype.adder = null;
zpp_nape.util.ZPP_CompoundList.prototype.post_adder = null;
zpp_nape.util.ZPP_CompoundList.prototype.subber = null;
zpp_nape.util.ZPP_CompoundList.prototype.dontremove = null;
zpp_nape.util.ZPP_CompoundList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_CompoundList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_CompoundList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_CompoundList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_CompoundList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_CompoundList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_CompoundList.prototype.at_index = null;
zpp_nape.util.ZPP_CompoundList.prototype.at_ite = null;
zpp_nape.util.ZPP_CompoundList.prototype.push_ite = null;
zpp_nape.util.ZPP_CompoundList.prototype.zip_length = null;
zpp_nape.util.ZPP_CompoundList.prototype.user_length = null;
zpp_nape.util.ZPP_CompoundList.prototype.__class__ = zpp_nape.util.ZPP_CompoundList;
zpp_nape.util.ZPP_ListenerList = $hxClasses['zpp_nape.util.ZPP_ListenerList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Listener();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_nape.util.ZPP_ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ListenerList.prototype.outer = null;
zpp_nape.util.ZPP_ListenerList.prototype.inner = null;
zpp_nape.util.ZPP_ListenerList.prototype.immutable = null;
zpp_nape.util.ZPP_ListenerList.prototype._invalidated = null;
zpp_nape.util.ZPP_ListenerList.prototype._invalidate = null;
zpp_nape.util.ZPP_ListenerList.prototype._validate = null;
zpp_nape.util.ZPP_ListenerList.prototype._modifiable = null;
zpp_nape.util.ZPP_ListenerList.prototype.adder = null;
zpp_nape.util.ZPP_ListenerList.prototype.post_adder = null;
zpp_nape.util.ZPP_ListenerList.prototype.subber = null;
zpp_nape.util.ZPP_ListenerList.prototype.dontremove = null;
zpp_nape.util.ZPP_ListenerList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ListenerList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_ListenerList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_ListenerList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_ListenerList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_ListenerList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_ListenerList.prototype.at_index = null;
zpp_nape.util.ZPP_ListenerList.prototype.at_ite = null;
zpp_nape.util.ZPP_ListenerList.prototype.push_ite = null;
zpp_nape.util.ZPP_ListenerList.prototype.zip_length = null;
zpp_nape.util.ZPP_ListenerList.prototype.user_length = null;
zpp_nape.util.ZPP_ListenerList.prototype.__class__ = zpp_nape.util.ZPP_ListenerList;
zpp_nape.util.ZPP_CbTypeList = $hxClasses['zpp_nape.util.ZPP_CbTypeList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_CbType();
	this._invalidated = true;
};
zpp_nape.util.ZPP_CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_nape.util.ZPP_CbTypeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_CbTypeList.prototype.outer = null;
zpp_nape.util.ZPP_CbTypeList.prototype.inner = null;
zpp_nape.util.ZPP_CbTypeList.prototype.immutable = null;
zpp_nape.util.ZPP_CbTypeList.prototype._invalidated = null;
zpp_nape.util.ZPP_CbTypeList.prototype._invalidate = null;
zpp_nape.util.ZPP_CbTypeList.prototype._validate = null;
zpp_nape.util.ZPP_CbTypeList.prototype._modifiable = null;
zpp_nape.util.ZPP_CbTypeList.prototype.adder = null;
zpp_nape.util.ZPP_CbTypeList.prototype.post_adder = null;
zpp_nape.util.ZPP_CbTypeList.prototype.subber = null;
zpp_nape.util.ZPP_CbTypeList.prototype.dontremove = null;
zpp_nape.util.ZPP_CbTypeList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_CbTypeList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_CbTypeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_CbTypeList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_CbTypeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_CbTypeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_CbTypeList.prototype.at_index = null;
zpp_nape.util.ZPP_CbTypeList.prototype.at_ite = null;
zpp_nape.util.ZPP_CbTypeList.prototype.push_ite = null;
zpp_nape.util.ZPP_CbTypeList.prototype.zip_length = null;
zpp_nape.util.ZPP_CbTypeList.prototype.user_length = null;
zpp_nape.util.ZPP_CbTypeList.prototype.__class__ = zpp_nape.util.ZPP_CbTypeList;
zpp_nape.util.ZPP_Vec2List = $hxClasses['zpp_nape.util.ZPP_Vec2List'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Vec2();
	this._invalidated = true;
};
zpp_nape.util.ZPP_Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_nape.util.ZPP_Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_Vec2List.prototype.outer = null;
zpp_nape.util.ZPP_Vec2List.prototype.inner = null;
zpp_nape.util.ZPP_Vec2List.prototype.immutable = null;
zpp_nape.util.ZPP_Vec2List.prototype._invalidated = null;
zpp_nape.util.ZPP_Vec2List.prototype._invalidate = null;
zpp_nape.util.ZPP_Vec2List.prototype._validate = null;
zpp_nape.util.ZPP_Vec2List.prototype._modifiable = null;
zpp_nape.util.ZPP_Vec2List.prototype.adder = null;
zpp_nape.util.ZPP_Vec2List.prototype.post_adder = null;
zpp_nape.util.ZPP_Vec2List.prototype.subber = null;
zpp_nape.util.ZPP_Vec2List.prototype.dontremove = null;
zpp_nape.util.ZPP_Vec2List.prototype.reverse_flag = null;
zpp_nape.util.ZPP_Vec2List.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_Vec2List.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_Vec2List.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_Vec2List.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_Vec2List.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_Vec2List.prototype.at_index = null;
zpp_nape.util.ZPP_Vec2List.prototype.at_ite = null;
zpp_nape.util.ZPP_Vec2List.prototype.push_ite = null;
zpp_nape.util.ZPP_Vec2List.prototype.zip_length = null;
zpp_nape.util.ZPP_Vec2List.prototype.user_length = null;
zpp_nape.util.ZPP_Vec2List.prototype.__class__ = zpp_nape.util.ZPP_Vec2List;
zpp_nape.util.ZPP_GeomPolyList = $hxClasses['zpp_nape.util.ZPP_GeomPolyList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_GeomPoly();
	this._invalidated = true;
};
zpp_nape.util.ZPP_GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_nape.util.ZPP_GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_GeomPolyList.prototype.outer = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.inner = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.immutable = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._invalidated = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._invalidate = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._validate = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._modifiable = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.adder = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.post_adder = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.subber = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.dontremove = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_GeomPolyList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_GeomPolyList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_GeomPolyList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_GeomPolyList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_GeomPolyList.prototype.at_index = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.at_ite = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.push_ite = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.zip_length = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.user_length = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.__class__ = zpp_nape.util.ZPP_GeomPolyList;
zpp_nape.util.ZPP_RayResultList = $hxClasses['zpp_nape.util.ZPP_RayResultList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_RayResult();
	this._invalidated = true;
};
zpp_nape.util.ZPP_RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_nape.util.ZPP_RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_RayResultList.prototype.outer = null;
zpp_nape.util.ZPP_RayResultList.prototype.inner = null;
zpp_nape.util.ZPP_RayResultList.prototype.immutable = null;
zpp_nape.util.ZPP_RayResultList.prototype._invalidated = null;
zpp_nape.util.ZPP_RayResultList.prototype._invalidate = null;
zpp_nape.util.ZPP_RayResultList.prototype._validate = null;
zpp_nape.util.ZPP_RayResultList.prototype._modifiable = null;
zpp_nape.util.ZPP_RayResultList.prototype.adder = null;
zpp_nape.util.ZPP_RayResultList.prototype.post_adder = null;
zpp_nape.util.ZPP_RayResultList.prototype.subber = null;
zpp_nape.util.ZPP_RayResultList.prototype.dontremove = null;
zpp_nape.util.ZPP_RayResultList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_RayResultList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_RayResultList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_RayResultList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_RayResultList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_RayResultList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_RayResultList.prototype.at_index = null;
zpp_nape.util.ZPP_RayResultList.prototype.at_ite = null;
zpp_nape.util.ZPP_RayResultList.prototype.push_ite = null;
zpp_nape.util.ZPP_RayResultList.prototype.zip_length = null;
zpp_nape.util.ZPP_RayResultList.prototype.user_length = null;
zpp_nape.util.ZPP_RayResultList.prototype.__class__ = zpp_nape.util.ZPP_RayResultList;
zpp_nape.util.ZPP_ConvexResultList = $hxClasses['zpp_nape.util.ZPP_ConvexResultList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ConvexResult();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_nape.util.ZPP_ConvexResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ConvexResultList.prototype.outer = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.inner = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.immutable = null;
zpp_nape.util.ZPP_ConvexResultList.prototype._invalidated = null;
zpp_nape.util.ZPP_ConvexResultList.prototype._invalidate = null;
zpp_nape.util.ZPP_ConvexResultList.prototype._validate = null;
zpp_nape.util.ZPP_ConvexResultList.prototype._modifiable = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.adder = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.post_adder = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.subber = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.dontremove = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_ConvexResultList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_ConvexResultList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_ConvexResultList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_ConvexResultList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_ConvexResultList.prototype.at_index = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.at_ite = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.push_ite = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.zip_length = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.user_length = null;
zpp_nape.util.ZPP_ConvexResultList.prototype.__class__ = zpp_nape.util.ZPP_ConvexResultList;
zpp_nape.util.ZPP_EdgeList = $hxClasses['zpp_nape.util.ZPP_EdgeList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Edge();
	this._invalidated = true;
};
zpp_nape.util.ZPP_EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_nape.util.ZPP_EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_EdgeList.prototype.outer = null;
zpp_nape.util.ZPP_EdgeList.prototype.inner = null;
zpp_nape.util.ZPP_EdgeList.prototype.immutable = null;
zpp_nape.util.ZPP_EdgeList.prototype._invalidated = null;
zpp_nape.util.ZPP_EdgeList.prototype._invalidate = null;
zpp_nape.util.ZPP_EdgeList.prototype._validate = null;
zpp_nape.util.ZPP_EdgeList.prototype._modifiable = null;
zpp_nape.util.ZPP_EdgeList.prototype.adder = null;
zpp_nape.util.ZPP_EdgeList.prototype.post_adder = null;
zpp_nape.util.ZPP_EdgeList.prototype.subber = null;
zpp_nape.util.ZPP_EdgeList.prototype.dontremove = null;
zpp_nape.util.ZPP_EdgeList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_EdgeList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_EdgeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_EdgeList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_EdgeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_EdgeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_EdgeList.prototype.at_index = null;
zpp_nape.util.ZPP_EdgeList.prototype.at_ite = null;
zpp_nape.util.ZPP_EdgeList.prototype.push_ite = null;
zpp_nape.util.ZPP_EdgeList.prototype.zip_length = null;
zpp_nape.util.ZPP_EdgeList.prototype.user_length = null;
zpp_nape.util.ZPP_EdgeList.prototype.__class__ = zpp_nape.util.ZPP_EdgeList;
zpp_nape.util.ZPP_ShapeList = $hxClasses['zpp_nape.util.ZPP_ShapeList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Shape();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_nape.util.ZPP_ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ShapeList.prototype.outer = null;
zpp_nape.util.ZPP_ShapeList.prototype.inner = null;
zpp_nape.util.ZPP_ShapeList.prototype.immutable = null;
zpp_nape.util.ZPP_ShapeList.prototype._invalidated = null;
zpp_nape.util.ZPP_ShapeList.prototype._invalidate = null;
zpp_nape.util.ZPP_ShapeList.prototype._validate = null;
zpp_nape.util.ZPP_ShapeList.prototype._modifiable = null;
zpp_nape.util.ZPP_ShapeList.prototype.adder = null;
zpp_nape.util.ZPP_ShapeList.prototype.post_adder = null;
zpp_nape.util.ZPP_ShapeList.prototype.subber = null;
zpp_nape.util.ZPP_ShapeList.prototype.dontremove = null;
zpp_nape.util.ZPP_ShapeList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ShapeList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_ShapeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_ShapeList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_ShapeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_ShapeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_ShapeList.prototype.at_index = null;
zpp_nape.util.ZPP_ShapeList.prototype.at_ite = null;
zpp_nape.util.ZPP_ShapeList.prototype.push_ite = null;
zpp_nape.util.ZPP_ShapeList.prototype.zip_length = null;
zpp_nape.util.ZPP_ShapeList.prototype.user_length = null;
zpp_nape.util.ZPP_ShapeList.prototype.__class__ = zpp_nape.util.ZPP_ShapeList;
zpp_nape.util.ZPP_InteractionGroupList = $hxClasses['zpp_nape.util.ZPP_InteractionGroupList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this._invalidated = true;
};
zpp_nape.util.ZPP_InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_nape.util.ZPP_InteractionGroupList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_InteractionGroupList.prototype.outer = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.inner = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.immutable = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype._invalidated = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype._invalidate = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype._validate = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype._modifiable = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.adder = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.post_adder = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.subber = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.dontremove = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_InteractionGroupList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_InteractionGroupList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_InteractionGroupList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_InteractionGroupList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_InteractionGroupList.prototype.at_index = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.at_ite = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.push_ite = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.zip_length = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.user_length = null;
zpp_nape.util.ZPP_InteractionGroupList.prototype.__class__ = zpp_nape.util.ZPP_InteractionGroupList;
zpp_nape.util.ZPP_ArbiterList = $hxClasses['zpp_nape.util.ZPP_ArbiterList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_nape.util.ZPP_ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ArbiterList.prototype.outer = null;
zpp_nape.util.ZPP_ArbiterList.prototype.inner = null;
zpp_nape.util.ZPP_ArbiterList.prototype.immutable = null;
zpp_nape.util.ZPP_ArbiterList.prototype._invalidated = null;
zpp_nape.util.ZPP_ArbiterList.prototype._invalidate = null;
zpp_nape.util.ZPP_ArbiterList.prototype._validate = null;
zpp_nape.util.ZPP_ArbiterList.prototype._modifiable = null;
zpp_nape.util.ZPP_ArbiterList.prototype.adder = null;
zpp_nape.util.ZPP_ArbiterList.prototype.post_adder = null;
zpp_nape.util.ZPP_ArbiterList.prototype.subber = null;
zpp_nape.util.ZPP_ArbiterList.prototype.dontremove = null;
zpp_nape.util.ZPP_ArbiterList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ArbiterList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_ArbiterList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_ArbiterList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_ArbiterList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_ArbiterList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_ArbiterList.prototype.at_index = null;
zpp_nape.util.ZPP_ArbiterList.prototype.at_ite = null;
zpp_nape.util.ZPP_ArbiterList.prototype.push_ite = null;
zpp_nape.util.ZPP_ArbiterList.prototype.zip_length = null;
zpp_nape.util.ZPP_ArbiterList.prototype.user_length = null;
zpp_nape.util.ZPP_ArbiterList.prototype.__class__ = zpp_nape.util.ZPP_ArbiterList;
zpp_nape.util.ZPP_ContactList = $hxClasses['zpp_nape.util.ZPP_ContactList'] = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_Contact();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_nape.util.ZPP_ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_nape.util.ZPP_ContactList.prototype.outer = null;
zpp_nape.util.ZPP_ContactList.prototype.inner = null;
zpp_nape.util.ZPP_ContactList.prototype.immutable = null;
zpp_nape.util.ZPP_ContactList.prototype._invalidated = null;
zpp_nape.util.ZPP_ContactList.prototype._invalidate = null;
zpp_nape.util.ZPP_ContactList.prototype._validate = null;
zpp_nape.util.ZPP_ContactList.prototype._modifiable = null;
zpp_nape.util.ZPP_ContactList.prototype.adder = null;
zpp_nape.util.ZPP_ContactList.prototype.post_adder = null;
zpp_nape.util.ZPP_ContactList.prototype.subber = null;
zpp_nape.util.ZPP_ContactList.prototype.dontremove = null;
zpp_nape.util.ZPP_ContactList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ContactList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
zpp_nape.util.ZPP_ContactList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
zpp_nape.util.ZPP_ContactList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
};
zpp_nape.util.ZPP_ContactList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
};
zpp_nape.util.ZPP_ContactList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
};
zpp_nape.util.ZPP_ContactList.prototype.at_index = null;
zpp_nape.util.ZPP_ContactList.prototype.at_ite = null;
zpp_nape.util.ZPP_ContactList.prototype.push_ite = null;
zpp_nape.util.ZPP_ContactList.prototype.zip_length = null;
zpp_nape.util.ZPP_ContactList.prototype.user_length = null;
zpp_nape.util.ZPP_ContactList.prototype.__class__ = zpp_nape.util.ZPP_ContactList;
zpp_nape.util.ZPP_Math = $hxClasses['zpp_nape.util.ZPP_Math'] = function() { };
zpp_nape.util.ZPP_Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_nape.util.ZPP_Math.sqrt = function(x) {
	return Math.sqrt(x);
};
zpp_nape.util.ZPP_Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
};
zpp_nape.util.ZPP_Math.sqr = function(x) {
	return x * x;
};
zpp_nape.util.ZPP_Math.clamp2 = function(x,a) {
	return zpp_nape.util.ZPP_Math.clamp(x,-a,a);
};
zpp_nape.util.ZPP_Math.clamp = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
zpp_nape.util.ZPP_Math.prototype.__class__ = zpp_nape.util.ZPP_Math;
zpp_nape.util.ZPP_PubPool = $hxClasses['zpp_nape.util.ZPP_PubPool'] = function() { };
zpp_nape.util.ZPP_PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
zpp_nape.util.ZPP_PubPool.prototype.__class__ = zpp_nape.util.ZPP_PubPool;
zpp_nape.util.ZPP_Set_ZPP_Body = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_Body'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_Body"];
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_Body.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_Body;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_CbSetPair'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_CbSetPair;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_PartitionPair'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionPair"];
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_PartitionPair;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_PartitionVertex'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_SimpleVert'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_SimpleVert;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_SimpleSeg'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_SimpleEvent'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent;
zpp_nape.util.ZPP_Set_ZPP_CbSet = $hxClasses['zpp_nape.util.ZPP_Set_ZPP_CbSet'] = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.alloc = function() {
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.empty = function() {
	return this.parent == null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.has = function(obj) {
	return this.find(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) return null; else return node.data;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child;
	if(cur.prev == null) child = cur.next; else child = cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.clear = function() {
	this.clear_with(function(_) {
	});
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.clear_with = function(lambda) {
	if(this.parent == null) return; else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
		this.parent = null;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) ret.prev = null; else ret.next = null;
		node.parent = null;
	}
	var o = node;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
	return ret;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) trl.parent = negred;
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) this.swapped(parent.data,nr.data);
		nr.prev = trr;
		if(trr != null) trr.parent = nr;
		nr.next = parent.next;
		if(parent.next != null) parent.next.parent = nr;
		parent.next = nr;
		if(nr != null) nr.parent = parent;
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) trl1.parent = negred;
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) this.swapped(parent.data,nr1.data);
		nr1.next = trr1;
		if(trr1 != null) trr1.parent = nr1;
		nr1.prev = parent.prev;
		if(parent.prev != null) parent.prev.parent = nr1;
		parent.prev = nr1;
		if(nr1 != null) nr1.parent = parent;
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return false; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return true;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
					x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
					zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				null;
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.insert = function(obj) {
	var x;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
		x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
		x.next = null;
	}
	null;
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_CbSet;
{
	Math.NaN = Number.NaN;
	Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
	Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
	Math.isFinite = function(i) {
		return isFinite(i);
	};
	Math.isNaN = function(i1) {
		return isNaN(i1);
	};
};
{
	String.prototype.__class__ = String;
	String.__name__ = true;
	Array.__name__ = true;
	var Int = { __name__ : ["Int"]};
	var Dynamic = { __name__ : ["Dynamic"]};
	var Float = Number;
	Float.__name__ = ["Float"];
	var Bool = Boolean;
	Bool.__ename__ = ["Bool"];
	var Class = { __name__ : ["Class"]};
	var Enum = { };
};
nape.Config.epsilon = 1e-8;
;
nape.Config.fluidAngularDragFriction = 2.5;
;
nape.Config.fluidAngularDrag = 100;
;
nape.Config.fluidVacuumDrag = 0.5;
;
nape.Config.fluidLinearDrag = 0.5;
;
nape.Config.collisionSlop = 0.2;
;
nape.Config.collisionSlopCCD = 0.5;
;
nape.Config.distanceThresholdCCD = 0.05;
;
nape.Config.staticCCDLinearThreshold = 0.05;
;
nape.Config.staticCCDAngularThreshold = 0.005;
;
nape.Config.bulletCCDLinearThreshold = 0.125;
;
nape.Config.bulletCCDAngularThreshold = 0.0125;
;
nape.Config.dynamicSweepLinearThreshold = 17;
;
nape.Config.dynamicSweepAngularThreshold = 0.6;
;
nape.Config.angularCCDSlipScale = 0.75;
;
nape.Config.arbiterExpirationDelay = 6;
;
nape.Config.staticFrictionThreshold = 2;
;
nape.Config.elasticThreshold = 20;
;
nape.Config.sleepDelay = 60;
;
nape.Config.linearSleepThreshold = 0.2;
;
nape.Config.angularSleepThreshold = 0.4;
;
nape.Config.contactBiasCoef = 0.3;
;
nape.Config.contactStaticBiasCoef = 0.6;
;
nape.Config.contactContinuousBiasCoef = 0.4;
;
nape.Config.contactContinuousStaticBiasCoef = 0.5;
;
nape.Config.constraintLinearSlop = 0.1;
;
nape.Config.constraintAngularSlop = 1e-3;
;
nape.Config.illConditionedThreshold = 2e+8;
;
nape.callbacks.CbTypeIterator.zpp_pool = null;
;
nape.callbacks.ListenerIterator.zpp_pool = null;
;
nape.constraint.ConstraintIterator.zpp_pool = null;
;
nape.dynamics.ArbiterIterator.zpp_pool = null;
;
nape.dynamics.ContactIterator.zpp_pool = null;
;
nape.dynamics.InteractionGroupIterator.zpp_pool = null;
;
nape.geom.ConvexResultIterator.zpp_pool = null;
;
nape.geom.GeomPolyIterator.zpp_pool = null;
;
nape.geom.RayResultIterator.zpp_pool = null;
;
nape.geom.Vec2Iterator.zpp_pool = null;
;
nape.phys.BodyIterator.zpp_pool = null;
;
nape.phys.CompoundIterator.zpp_pool = null;
;
nape.phys.InteractorIterator.zpp_pool = null;
;
nape.shape.EdgeIterator.zpp_pool = null;
;
nape.shape.ShapeIterator.zpp_pool = null;
;
zpp_nape.ZPP_Const.FMAX = 1e100;
;
zpp_nape.ZPP_ID._Constraint = 0;
;
zpp_nape.ZPP_ID._Interactor = 0;
;
zpp_nape.ZPP_ID._CbType = 0;
;
zpp_nape.ZPP_ID._CbSet = 0;
;
zpp_nape.ZPP_ID._Listener = 0;
;
zpp_nape.ZPP_ID._ZPP_SimpleVert = 0;
;
zpp_nape.ZPP_ID._ZPP_SimpleSeg = 0;
;
zpp_nape.ZPP_ID._InteractionGroup = 0;
;
zpp_nape.ZPP_ID._Space = 0;
;
zpp_nape.callbacks.ZPP_Callback.internal = false;
;
zpp_nape.callbacks.ZPP_Callback.zpp_pool = null;
;
zpp_nape.callbacks.ZPP_CbSet.zpp_pool = null;
;
zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = null;
;
zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE = new nape.callbacks.CbType();
;
zpp_nape.callbacks.ZPP_CbType.ANY_BODY = new nape.callbacks.CbType();
;
zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND = new nape.callbacks.CbType();
;
zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT = new nape.callbacks.CbType();
;
zpp_nape.util.ZPP_Flags.internal = false;
;
zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT = 1;
;
zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE = 2;
;
zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS = 4;
;
zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT = 0;
;
zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED = 1;
;
zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED = 2;
;
zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT = 0;
;
zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED = 1;
;
zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT = 0;
;
zpp_nape.util.ZPP_Flags.id_MassMode_FIXED = 1;
;
zpp_nape.util.ZPP_Flags.id_BodyType_STATIC = 1;
;
zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC = 2;
;
zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC = 3;
;
zpp_nape.util.ZPP_Flags.id_ListenerType_BODY = 0;
;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT = 1;
;
zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT = 1;
;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE = 2;
;
zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION = 2;
;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT_ONCE = 3;
;
zpp_nape.util.ZPP_Flags.id_ListenerType_PRE = 3;
;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE_ONCE = 4;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN = 0;
;
zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION = 1;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING = 6;
;
zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR = 2;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_END = 1;
;
zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID = 4;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE = 2;
;
zpp_nape.util.ZPP_Flags.id_InteractionType_ANY = 7;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP = 3;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK = 4;
;
zpp_nape.util.ZPP_Flags.id_CbEvent_PRE = 5;
;
zpp_nape.util.ZPP_Flags.id_Winding_UNDEFINED = 0;
;
zpp_nape.util.ZPP_Flags.id_Winding_CLOCKWISE = 1;
;
zpp_nape.util.ZPP_Flags.id_Winding_ANTICLOCKWISE = 2;
;
zpp_nape.util.ZPP_Flags.id_ValidationResult_VALID = 0;
;
zpp_nape.util.ZPP_Flags.id_ValidationResult_DEGENERATE = 1;
;
zpp_nape.util.ZPP_Flags.id_ValidationResult_CONCAVE = 2;
;
zpp_nape.util.ZPP_Flags.id_ValidationResult_SELF_INTERSECTING = 3;
;
zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE = 0;
;
zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON = 1;
;
zpp_nape.util.ZPP_Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
;
zpp_nape.util.ZPP_Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
;
zpp_nape.util.ZPP_Flags.id_ArbiterType_COLLISION = 1;
;
zpp_nape.util.ZPP_Flags.id_ArbiterType_SENSOR = 2;
;
zpp_nape.util.ZPP_Flags.id_ArbiterType_FLUID = 4;
;
zpp_nape.callbacks.ZPP_Listener.internal = false;
;
zpp_nape.callbacks.ZPP_Listener.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
	return $r;
}(this))];
;
zpp_nape.callbacks.ZPP_Listener.events = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
	return $r;
}(this))];
;
zpp_nape.callbacks.ZPP_InteractionListener.UCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
;
zpp_nape.callbacks.ZPP_InteractionListener.VCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
;
zpp_nape.callbacks.ZPP_InteractionListener.WCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
;
zpp_nape.callbacks.ZPP_InteractionListener.UCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
;
zpp_nape.callbacks.ZPP_InteractionListener.VCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
;
zpp_nape.callbacks.ZPP_InteractionListener.WCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
;
zpp_nape.dynamics.ZPP_Arbiter.internal = false;
;
zpp_nape.dynamics.ZPP_Arbiter.COL = 1;
;
zpp_nape.dynamics.ZPP_Arbiter.FLUID = 4;
;
zpp_nape.dynamics.ZPP_Arbiter.SENSOR = 2;
;
zpp_nape.dynamics.ZPP_Arbiter.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
	return $r;
}(this)),null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
	return $r;
}(this))];
;
zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = null;
;
zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = null;
;
zpp_nape.dynamics.ZPP_ColArbiter.FACE1 = 0;
;
zpp_nape.dynamics.ZPP_ColArbiter.FACE2 = 1;
;
zpp_nape.dynamics.ZPP_ColArbiter.CIRCLE = 2;
;
zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = null;
;
zpp_nape.dynamics.ZPP_Contact.internal = false;
;
zpp_nape.dynamics.ZPP_Contact.zpp_pool = null;
;
zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = null;
;
zpp_nape.dynamics.ZPP_InteractionGroup.SHAPE = 1;
;
zpp_nape.dynamics.ZPP_InteractionGroup.BODY = 2;
;
zpp_nape.geom.ZPP_AABB.zpp_pool = null;
;
zpp_nape.geom.ZPP_Collide.flowpoly = new zpp_nape.util.ZNPList_ZPP_Vec2();
;
zpp_nape.geom.ZPP_Collide.flowsegs = new zpp_nape.util.ZNPList_ZPP_Vec2();
;
zpp_nape.geom.ZPP_ConvexRayResult.convexPool = null;
;
zpp_nape.geom.ZPP_ConvexRayResult.rayPool = null;
;
zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
;
zpp_nape.geom.ZPP_CutVert.zpp_pool = null;
;
zpp_nape.geom.ZPP_CutInt.zpp_pool = null;
;
zpp_nape.geom.ZPP_Cutter.ints = null;
;
zpp_nape.geom.ZPP_Cutter.paths = null;
;
zpp_nape.geom.ZPP_GeomVert.zpp_pool = null;
;
zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = null;
;
zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
;
zpp_nape.geom.ZPP_MarchSpan.zpp_pool = null;
;
zpp_nape.geom.ZPP_MarchPair.zpp_pool = null;
;
zpp_nape.geom.ZPP_MarchingSquares.me = new zpp_nape.geom.ZPP_MarchingSquares();
;
zpp_nape.geom.ZPP_MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
;
zpp_nape.geom.ZPP_Mat23.zpp_pool = null;
;
zpp_nape.geom.ZPP_Monotone.queue = null;
;
zpp_nape.geom.ZPP_Monotone.edges = null;
;
zpp_nape.geom.ZPP_PartitionVertex.nextId = 0;
;
zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = null;
;
zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = null;
;
zpp_nape.geom.ZPP_Ray.internal = false;
;
zpp_nape.geom.ZPP_SimpleVert.zpp_pool = null;
;
zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = null;
;
zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = null;
;
zpp_nape.geom.ZPP_Simple.sweep = null;
;
zpp_nape.geom.ZPP_Simple.inthash = null;
;
zpp_nape.geom.ZPP_Simple.vertices = null;
;
zpp_nape.geom.ZPP_Simple.queue = null;
;
zpp_nape.geom.ZPP_Simple.ints = null;
;
zpp_nape.geom.ZPP_Simple.list_vertices = null;
;
zpp_nape.geom.ZPP_Simple.list_queue = null;
;
zpp_nape.geom.ZPP_SimplifyV.zpp_pool = null;
;
zpp_nape.geom.ZPP_SimplifyP.zpp_pool = null;
;
zpp_nape.geom.ZPP_Simplify.stack = null;
;
zpp_nape.geom.ZPP_ToiEvent.zpp_pool = null;
;
zpp_nape.geom.ZPP_PartitionPair.zpp_pool = null;
;
zpp_nape.geom.ZPP_Triangular.queue = null;
;
zpp_nape.geom.ZPP_Triangular.stack = null;
;
zpp_nape.geom.ZPP_Triangular.edgeSet = null;
;
zpp_nape.geom.ZPP_Vec2.zpp_pool = null;
;
zpp_nape.phys.ZPP_Body.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
	return $r;
}(this))];
;
zpp_nape.phys.ZPP_Body.bodystack = null;
;
zpp_nape.phys.ZPP_Body.bodyset = null;
;
zpp_nape.phys.ZPP_Body.cur_graph_depth = 0;
;
zpp_nape.phys.ZPP_FluidProperties.zpp_pool = null;
;
zpp_nape.phys.ZPP_Material.zpp_pool = null;
;
zpp_nape.phys.ZPP_Material.WAKE = 1;
;
zpp_nape.phys.ZPP_Material.PROPS = 2;
;
zpp_nape.phys.ZPP_Material.ANGDRAG = 4;
;
zpp_nape.phys.ZPP_Material.ARBITERS = 8;
;
zpp_nape.shape.ZPP_Shape.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
	return $r;
}(this))];
;
zpp_nape.shape.ZPP_Edge.zpp_pool = null;
;
zpp_nape.shape.ZPP_Edge.internal = false;
;
zpp_nape.space.ZPP_AABBNode.zpp_pool = null;
;
zpp_nape.space.ZPP_AABBPair.zpp_pool = null;
;
zpp_nape.space.ZPP_AABBTree.tmpaabb = new zpp_nape.geom.ZPP_AABB();
;
zpp_nape.space.ZPP_DynAABBPhase.FATTEN = 3.0;
;
zpp_nape.space.ZPP_DynAABBPhase.VEL_STEPS = 2.0;
;
zpp_nape.space.ZPP_Island.zpp_pool = null;
;
zpp_nape.space.ZPP_Component.zpp_pool = null;
;
zpp_nape.space.ZPP_CallbackSet.zpp_pool = null;
;
zpp_nape.space.ZPP_SweepData.zpp_pool = null;
;
zpp_nape.util.Hashable2_Boolfalse.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = null;
;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = null;
;
zpp_nape.util.ZNPNode_RayResult.zpp_pool = null;
;
zpp_nape.util.ZPP_ConstraintList.internal = false;
;
zpp_nape.util.ZPP_BodyList.internal = false;
;
zpp_nape.util.ZPP_InteractorList.internal = false;
;
zpp_nape.util.ZPP_CompoundList.internal = false;
;
zpp_nape.util.ZPP_ListenerList.internal = false;
;
zpp_nape.util.ZPP_CbTypeList.internal = false;
;
zpp_nape.util.ZPP_Vec2List.internal = false;
;
zpp_nape.util.ZPP_GeomPolyList.internal = false;
;
zpp_nape.util.ZPP_RayResultList.internal = false;
;
zpp_nape.util.ZPP_ConvexResultList.internal = false;
;
zpp_nape.util.ZPP_EdgeList.internal = false;
;
zpp_nape.util.ZPP_ShapeList.internal = false;
;
zpp_nape.util.ZPP_InteractionGroupList.internal = false;
;
zpp_nape.util.ZPP_ArbiterList.internal = false;
;
zpp_nape.util.ZPP_ContactList.internal = false;
;
zpp_nape.util.ZPP_PubPool.poolGeomPoly = null;
;
zpp_nape.util.ZPP_PubPool.nextGeomPoly = null;
;
zpp_nape.util.ZPP_PubPool.poolVec2 = null;
;
zpp_nape.util.ZPP_PubPool.nextVec2 = null;
;
zpp_nape.util.ZPP_PubPool.poolVec3 = null;
;
zpp_nape.util.ZPP_PubPool.nextVec3 = null;
;
zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = null;
;
zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = null;
;
sandbox.Main.main();

window.nape = nape;

nape.init = function() {
  rgaInits.forEach(function(i) {
    i();
  });
};
})();
